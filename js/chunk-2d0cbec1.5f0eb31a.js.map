{"version":3,"sources":["webpack:///./src/lode/components/AssertionEditor.vue","webpack:///src/lode/components/AssertionEditor.vue","webpack:///./src/lode/components/AssertionEditor.vue?7181","webpack:///./src/lode/components/AssertionEditor.vue?aa31"],"names":["render","_vm","this","_c","_self","staticClass","class","canAssertion","attrs","loading","on","handleCanClick","canButtonIcon","_v","_s","canButtonText","cannotAssertion","handleCannotClick","cantButtonIcon","cantButtonText","handleBadgeClick","badgeExists","_e","viewBadge","assertionExists","directives","name","rawName","value","assertionText","expression","reasonPlaceholder","domProps","$event","type","indexOf","_k","keyCode","key","handleEvidenceAssertion","apply","arguments","target","composing","evidenceExplanation","_l","evidenceThing","index","url","text","handleUnevidenceAssertion","original","assertionsByOthers","length","item","uri","id","staticRenderFns","props","String","components","Assertion","data","badge","badgeLink","repo","window","competentStateEah","evidence","iconAssertion","created","mounted","initAssertions","computed","assertions","_this","$store","getters","filter","a","competency","EcRemoteLinkedData","trimVersionFromUrl","me","subject","otherClaimsPhrase","subjectPerson","methods","_this2","stop","EcAsyncHelper","each","assertion","callback","getSubjectAsync","toPem","getAgentAsync","agent","negativeCallback","negative","getNegativeAsync","hasReader","EcRemote","urlAppend","selectedServer","getGuid","getEvidencesAsync","evidences","dispatch","then","because","push","_handleEvidenceAssertion","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this3","wrap","_context","prev","next","evidenceAssertion","t0","appError","$nextTick","finish","_handleUnevidenceAssertion","_callee2","_this4","_context2","unevidenceAssertion","_x","_handleBadgeClick","_callee3","_this5","_context3","revokeBadge","generateBadge","_handleCanClick","_callee4","_this6","_context4","abrupt","revokeCanAssertion","revokeCannotAssertion","generateCanAssertion","_handleCannotClick","_callee5","_this7","_context5","generateCannotAssertion","_generateBadge","_callee8","_this8","_context8","Promise","resolve","reject","EcCompetency","get","c","eah","isId","_ref","_callee7","_context7","addReader","EcRepository","save","_ref2","_callee6","_context6","_x3","_x2","open","_revokeBadge","_callee9","_this9","_context9","removeReader","_this10","_delete","commit","_this11","_this12","EcAssertion","generateId","addOwner","EcIdentityManager","default","ids","ppk","toPk","adminKeys","_step","_iterator","_createForOfIteratorHelper","s","n","done","adminPk","EcPk","fromPem","err","e","f","setSubjectAsync","setAgentAsync","setCompetency","setAssertionDateAsync","Date","now","setExpirationDateAsync","setNegativeAsync","setConfidence","searchWithParams","size","resources","resource","resourceCallback","shortId","views","i","setEvidenceAsync","_this13","_step2","_iterator2","_evidenceAssertion","_callee11","_this14","_context11","_ref3","_callee10","_context10","EcArray","setAdd","setEvidence","_x4","_unevidenceAssertion","_callee13","_this15","_context13","_ref4","_callee12","_context12","setRemove","_x6","_x5","watch","component"],"mappings":"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","file":"js/chunk-2d0cbec1.5f0eb31a.js","sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"assertions-group\"},[_c('div',{staticClass:\"assertions-buttons\"},[_c('div',{staticClass:\"left-buttons\"},[_c('div',{staticClass:\"button is-text\",class:{'active': _vm.canAssertion},attrs:{\"data-id\":\"positiveAssertionButton\",\"disabled\":_vm.loading},on:{\"click\":_vm.handleCanClick}},[_c('i',{class:_vm.canButtonIcon}),_vm._v(\" \"+_vm._s(_vm.canButtonText)+\" \")]),_c('div',{staticClass:\"button is-text\",class:{'active': _vm.cannotAssertion},attrs:{\"data-id\":\"negativeAssertionButton\",\"disabled\":_vm.loading},on:{\"click\":_vm.handleCannotClick}},[_c('i',{class:_vm.cantButtonIcon}),_vm._v(\" \"+_vm._s(_vm.cantButtonText)+\" \")])]),_c('div',{staticClass:\"right-button\"},[(_vm.canAssertion)?_c('div',{staticClass:\"button is-text\",attrs:{\"data-id\":\"badgeButton\",\"disabled\":_vm.loading},on:{\"click\":_vm.handleBadgeClick}},[(_vm.badgeExists)?[_c('span',{staticClass:\"text-icon\"},[_vm._v(\"-\")]),_vm._v(\" Remove Badge \")]:[_c('span',{staticClass:\"text-icon\"},[_vm._v(\"+\")]),_vm._v(\" Add Badge \")]],2):_vm._e(),(_vm.badgeExists)?_c('div',{staticClass:\"button is-text\",attrs:{\"data-id\":\"viewBadgeButton\"},on:{\"click\":_vm.viewBadge}},[_vm._v(\" View Badge \")]):_vm._e()])]),_c('div',{staticClass:\"assertions-input\"},[(_vm.assertionExists)?_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.assertionText),expression:\"assertionText\"}],staticClass:\"input is-narrow\",attrs:{\"disabled\":_vm.loading,\"type\":\"text\",\"placeholder\":_vm.reasonPlaceholder},domProps:{\"value\":(_vm.assertionText)},on:{\"keyup\":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,\"enter\",13,$event.key,\"Enter\"))return null;return _vm.handleEvidenceAssertion.apply(null, arguments)},\"input\":function($event){if($event.target.composing)return;_vm.assertionText=$event.target.value}}}):_vm._e()]),(_vm.evidenceExplanation && (_vm.assertionExists))?_c('small',{staticClass:\"assertions-evidence\"},[_c('hr'),_c('ul',_vm._l((_vm.evidenceExplanation),function(evidenceThing,index){return _c('li',{key:index,attrs:{\"data-id\":\"evidenceElement\"}},[(evidenceThing.url)?_c('a',{attrs:{\"href\":evidenceThing.url,\"target\":\"_blank\"}},[_vm._v(\" \"+_vm._s(evidenceThing.text)+\" \")]):_c('span',[_vm._v(_vm._s(evidenceThing.text))]),_c('div',{staticClass:\"button is-text\",attrs:{\"data-id\":\"removeEvidenceButton\"},on:{\"click\":function($event){return _vm.handleUnevidenceAssertion(evidenceThing.original)}}},[_c('i',{staticClass:\"fas fa-times\"})])])}),0)]):_vm._e(),(_vm.assertionsByOthers && _vm.assertionsByOthers.length > 0)?_c('div',{staticClass:\"assertions-others\"},_vm._l((_vm.assertionsByOthers),function(item){return _c('Assertion',{key:_vm.uri+item.id,attrs:{\"uri\":item.id,\"title\":\"Assertion from elsewhere\"}})}),1):_vm._e()])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <div\n        class=\"assertions-group\">\n        <div class=\"assertions-buttons\">\n            <div class=\"left-buttons\">\n                <div\n                    data-id=\"positiveAssertionButton\"\n                    class=\"button is-text\"\n                    :disabled=\"loading\"\n                    :class=\"{'active': canAssertion}\"\n                    @click=\"handleCanClick\">\n                    <i :class=\"canButtonIcon\" />\n                    {{ canButtonText }}\n                </div>\n                <div\n                    data-id=\"negativeAssertionButton\"\n                    class=\"button is-text\"\n                    :disabled=\"loading\"\n                    :class=\"{'active': cannotAssertion}\"\n                    @click=\"handleCannotClick\">\n                    <i :class=\"cantButtonIcon\" />\n                    {{ cantButtonText }}\n                </div>\n            </div>\n            <div class=\"right-button\">\n                <div\n                    data-id=\"badgeButton\"\n                    class=\"button is-text\"\n                    :disabled=\"loading\"\n                    v-if=\"canAssertion\"\n                    @click=\"handleBadgeClick\">\n                    <template v-if=\"badgeExists\">\n                        <span class=\"text-icon\">-</span> Remove Badge\n                    </template>\n                    <template v-else>\n                        <span class=\"text-icon\">+</span> Add Badge\n                    </template>\n                </div>\n                <div\n                    data-id=\"viewBadgeButton\"\n                    class=\"button is-text\"\n                    @click=\"viewBadge\"\n                    v-if=\"badgeExists\">\n                    View Badge\n                </div>\n            </div>\n        </div>\n        <div class=\"assertions-input\">\n            <input\n                :disabled=\"loading\"\n                class=\"input is-narrow\"\n                type=\"text\"\n                v-if=\"assertionExists\"\n                @keyup.enter=\"handleEvidenceAssertion\"\n                v-model=\"assertionText\"\n                :placeholder=\"reasonPlaceholder\">\n        </div>\n        <small\n            class=\"assertions-evidence\"\n            v-if=\"evidenceExplanation && (assertionExists)\">\n            <hr>\n            <ul>\n                <li\n                    data-id=\"evidenceElement\"\n                    v-for=\"(evidenceThing, index) in evidenceExplanation\"\n                    :key=\"index\">\n                    <a\n                        v-if=\"evidenceThing.url\"\n                        :href=\"evidenceThing.url\"\n                        target=\"_blank\">\n                        {{ evidenceThing.text }}\n                    </a>\n                    <span v-else>{{ evidenceThing.text }}</span>\n                    <div\n                        data-id=\"removeEvidenceButton\"\n                        class=\"button is-text\"\n                        @click=\"handleUnevidenceAssertion(evidenceThing.original)\">\n                        <i class=\"fas fa-times\" />\n                    </div>\n                </li>\n            </ul>\n        </small>\n        <div\n            v-if=\"assertionsByOthers && assertionsByOthers.length > 0\"\n            class=\"assertions-others\">\n            <Assertion\n                v-for=\"item in assertionsByOthers\"\n                :key=\"uri+item.id\"\n                :uri=\"item.id\"\n                title=\"Assertion from elsewhere\" />\n        </div>\n    </div>\n</template>\n<script>\n\nexport default {\n    name: 'AssertionEditor',\n    props: {\n        uri: String\n    },\n    components: {\n        Assertion: () => import('./Assertion.vue')\n    },\n    data: function() {\n        return {\n            loading: false,\n            canAssertion: false,\n            cannotAssertion: false,\n            assertionText: '',\n            badge: false,\n            badgeLink: null,\n            repo: window.repo,\n            competentStateEah: null,\n            evidence: null,\n            evidenceExplanation: null,\n            assertionsByOthers: [],\n            iconAssertion: true\n        };\n    },\n    created: function() {},\n    mounted: function() {\n        this.initAssertions();\n    },\n    computed: {\n        badgeExists: function() {\n            return this.badge;\n        },\n        assertionExists: function() {\n            return this.canAssertion || this.cannotAssertion;\n        },\n        assertions: function() {\n            let assertions = this.$store.getters['editor/assertions'].filter((a) => {\n                return a.competency === EcRemoteLinkedData.trimVersionFromUrl(this.uri);\n            });\n            return assertions;\n        },\n        me: function() {\n            return this.$store.getters['editor/getMe'];\n        },\n        subject: function() {\n            return this.$store.getters['editor/getSubject'];\n        },\n        otherClaimsPhrase: function() {\n            return \"Others have made claims about \" + (this.subject === this.me ? \"you\" : (this.subjectPerson === null ? \"them\" : this.subjectPerson)) + \". Click to expand.\";\n        },\n        reasonPlaceholder: function() {\n            if (this.me === this.subject) {\n                return 'do this because I...';\n            } else {\n                return 'do this because they...';\n            }\n        },\n        canButtonText: function() {\n            if (this.me === this.subject) {\n                return 'I can';\n            } else {\n                return 'They can';\n            }\n        },\n        cantButtonText: function() {\n            if (this.me === this.subject) {\n                return \"I can't\";\n            } else {\n                return \"They can't\";\n            }\n        },\n        canButtonIcon: function() {\n            if (this.canAssertion) {\n                return 'far fa-check-circle';\n            } else {\n                return 'far fa-circle';\n            }\n        },\n        cantButtonIcon: function() {\n            if (this.cannotAssertion) {\n                return 'far fa-check-square';\n            } else {\n                return 'far fa-square';\n            }\n        },\n        subjectPerson: function() {\n            return this.$store.getters['editor/getSubjectName'];\n        }\n    },\n    methods: {\n        initAssertions: function() {\n            this.canAssertion = false;\n            this.cannotAssertion = false;\n            this.assertionText = '';\n            this.badge = false;\n            this.badgeLink = null;\n            this.competentStateEah = null;\n            this.evidence = null;\n            this.evidenceExplanation = null;\n            this.assertionsByOthers = [];\n            this.iconAssertion = true;\n\n            if (this.competentStateEah != null) {\n                this.competentStateEah.stop();\n            }\n            this.competentStateEah = new EcAsyncHelper();\n            this.competentStateEah.each(this.assertions, (assertion, callback) => {\n                if (assertion !== null) {\n                    assertion.getSubjectAsync((subject) => {\n                        if (this.subject === subject.toPem()) {\n                            assertion.getAgentAsync((agent) => {\n                                if (this.me === agent.toPem()) {\n                                    var negativeCallback = () => {\n                                        if (assertion.negative != null) {\n                                            assertion.getNegativeAsync((negative) => {\n                                                if (negative) {\n                                                    this.canAssertion = false;\n                                                    this.cannotAssertion = true;\n                                                    this.badge = false;\n                                                } else {\n                                                    this.badge = assertion.hasReader(this.$store.getters['editor/badgePk']);\n                                                    this.badgeLink = EcRemote.urlAppend(this.repo.selectedServer, \"badge/assertion/\") + assertion.getGuid();\n                                                    this.canAssertion = true;\n                                                    this.cannotAssertion = false;\n                                                }\n                                                callback();\n                                            }, callback);\n                                        } else {\n                                            this.canAssertion = true;\n                                            this.cannotAssertion = false;\n                                            this.badge = assertion.hasReader(this.$store.getters['editor/badgePk']);\n                                            this.badgeLink = EcRemote.urlAppend(this.repo.selectedServer, \"badge/assertion/\") + assertion.getGuid();\n                                            callback();\n                                        }\n                                    };\n                                    if (assertion.evidence != null) {\n                                        assertion.getEvidencesAsync((evidences) => {\n                                            this.evidence = evidences;\n                                            this.$store.dispatch('editor/computeBecause', this.evidence).then((because) => {\n                                                this.evidenceExplanation = because;\n                                            });\n                                            negativeCallback();\n                                        }, callback);\n                                    } else {\n                                        this.evidence = null;\n                                        this.evidenceExplanation = null;\n                                        negativeCallback();\n                                    }\n                                } else {\n                                    this.assertionsByOthers.push(assertion);\n                                    callback();\n                                }\n                            }, callback);\n                        } else {\n                            callback();\n                        }\n                    }, callback);\n                } else {\n                    callback();\n                }\n            }, () => {\n                // TODO\n            });\n        },\n        handleEvidenceAssertion: async function() {\n            this.loading = true;\n            try {\n                await this.evidenceAssertion();\n            } catch (e) {\n                appError(e);\n            } finally {\n                this.$nextTick(() => {\n                    this.loading = false;\n                });\n            }\n        },\n        handleUnevidenceAssertion: async function(url) {\n            this.loading = true;\n            try {\n                await this.unevidenceAssertion(url);\n            } catch (e) {\n                appError(e);\n            } finally {\n                this.$nextTick(() => {\n                    this.loading = false;\n                });\n            }\n        },\n        handleBadgeClick: async function() {\n            this.loading = true;\n            try {\n                if (this.badge) {\n                    await this.revokeBadge();\n                } else {\n                    await this.generateBadge();\n                }\n            } catch (e) {\n                appError(e);\n            } finally {\n                this.$nextTick(() => {\n                    this.loading = false;\n                });\n            }\n        },\n        handleCanClick: async function() {\n            if (this.loading) {\n                return;\n            }\n            this.loading = true;\n            try {\n                if (this.canAssertion) {\n                    await this.revokeBadge();\n                    await this.revokeCanAssertion();\n                } else {\n                    if (this.cannotAssertion) {\n                        await this.revokeCannotAssertion();\n                    }\n                    await this.generateCanAssertion();\n                }\n            } catch (e) {\n                appError(e);\n            } finally {\n                this.$nextTick(() => {\n                    this.loading = false;\n                });\n            }\n        },\n        handleCannotClick: async function() {\n            if (this.loading) {\n                return;\n            }\n\n            this.loading = true;\n            try {\n                if (this.cannotAssertion) {\n                    await this.revokeCannotAssertion();\n                } else {\n                    if (this.canAssertion) {\n                        await this.revokeBadge();\n                        await this.revokeCanAssertion();\n                    }\n                    await this.generateCannotAssertion();\n                }\n            } catch (e) {\n                appError(e);\n            } finally {\n                this.$nextTick(() => {\n                    this.loading = false;\n                });\n            }\n        },\n        generateBadge: async function() {\n            return new Promise((resolve, reject) => {\n                EcCompetency.get(this.uri, (c) => {\n                    if (this.assertions.length === 0) {\n                        return;\n                    }\n                    var eah = new EcAsyncHelper();\n                    eah.each(this.assertions, (assertion, callback) => {\n                        if (c.isId(assertion.competency)) {\n                            assertion.getSubjectAsync((subject) => {\n                                if (this.subject === subject.toPem()) {\n                                    assertion.getAgentAsync(async(agent) => {\n                                        if (this.me === agent.toPem()) {\n                                            if (assertion.negative == null) {\n                                                await assertion.addReader(this.$store.getters['editor/badgePk']);\n                                                EcRepository.save(assertion, () => {\n                                                    // this.$store.commit('editor/addAssertion', assertion);\n                                                    this.badgeLink = EcRemote.urlAppend(this.repo.selectedServer, \"badge/assertion/\") + assertion.getGuid();\n                                                    this.badge = true;\n                                                    callback();\n                                                }, callback);\n                                            } else {\n                                                assertion.getNegativeAsync(async(negative) => {\n                                                    if (!negative) {\n                                                        await assertion.addReader(this.$store.getters['editor/badgePk']);\n                                                        EcRepository.save(assertion, () => {\n                                                            // this.$store.commit('editor/addAssertion', assertion);\n                                                            this.badgeLink = EcRemote.urlAppend(this.repo.selectedServer, \"badge/assertion/\") + assertion.getGuid();\n                                                            this.badge = true;\n                                                            callback();\n                                                        }, callback);\n                                                    } else {\n                                                        callback();\n                                                    }\n                                                }, callback);\n                                            }\n                                        } else {\n                                            callback();\n                                        }\n                                    }, callback);\n                                } else {\n                                    callback();\n                                }\n                            }, callback);\n                        } else {\n                            callback();\n                        }\n                    }, () => {\n                        resolve();\n                    });\n                }, reject);\n            });\n        },\n        viewBadge: function() {\n            window.open(this.badgeLink, '_blank');\n        },\n        revokeBadge: async function() {\n            return new Promise((resolve, reject) => {\n                EcCompetency.get(this.uri, (c) => {\n                    if (this.assertions.length === 0) {\n                        return;\n                    }\n                    var eah = new EcAsyncHelper();\n                    eah.each(this.assertions, (assertion, callback) => {\n                        if (c.isId(assertion.competency)) {\n                            assertion.getSubjectAsync((subject) => {\n                                if (this.subject === subject.toPem()) {\n                                    assertion.getAgentAsync((agent) => {\n                                        if (this.me === agent.toPem()) {\n                                            if (assertion.negative == null) {\n                                                assertion.removeReader(this.$store.getters['editor/badgePk']);\n                                                EcRepository.save(assertion, () => {\n                                                    // this.$store.commit('editor/addAssertion', assertion);\n                                                    this.badgeLink = null;\n                                                    this.badge = false;\n                                                    callback();\n                                                }, callback);\n                                            } else {\n                                                assertion.getNegativeAsync((negative) => {\n                                                    if (!negative) {\n                                                        assertion.removeReader(this.$store.getters['editor/badgePk']);\n                                                        EcRepository.save(assertion, () => {\n                                                            // this.$store.commit('editor/addAssertion', assertion);\n                                                            this.badgeLink = null;\n                                                            this.badge = false;\n                                                            callback();\n                                                        }, callback);\n                                                    } else {\n                                                        callback();\n                                                    }\n                                                }, callback);\n                                            }\n                                        } else {\n                                            callback();\n                                        }\n                                    }, callback);\n                                } else {\n                                    callback();\n                                }\n                            }, callback);\n                        } else {\n                            callback();\n                        }\n                    }, () => {\n                        resolve();\n                    });\n                }, reject);\n            });\n        },\n        revokeCanAssertion: function() {\n            return new Promise((resolve, reject) => {\n                EcCompetency.get(this.uri, (c) => {\n                    if (this.assertions.length === 0) {\n                        return;\n                    }\n                    var eah = new EcAsyncHelper();\n                    eah.each(this.assertions, (assertion, callback) => {\n                        if (c.isId(assertion.competency)) {\n                            assertion.getSubjectAsync((subject) => {\n                                if (this.subject === subject.toPem()) {\n                                    assertion.getAgentAsync((agent) => {\n                                        if (this.me === agent.toPem()) {\n                                            if (assertion.negative === null) {\n                                                EcRepository._delete(assertion, () => {\n                                                    this.$store.commit('editor/removeAssertion', assertion);\n                                                    this.canAssertion = false;\n                                                    callback();\n                                                }, callback);\n                                            } else {\n                                                assertion.getNegativeAsync((negative) => {\n                                                    if (!negative) {\n                                                        EcRepository._delete(assertion, () => {\n                                                            this.$store.commit('editor/removeAssertion', assertion);\n                                                            this.canAssertion = false;\n                                                            callback();\n                                                        }, callback);\n                                                    } else {\n                                                        callback();\n                                                    }\n                                                }, callback);\n                                            }\n                                        } else {\n                                            callback();\n                                        }\n                                    }, callback);\n                                } else {\n                                    callback();\n                                }\n                            }, callback);\n                        } else {\n                            callback();\n                        }\n                    }, () => {\n                        resolve();\n                    });\n                }, reject);\n            });\n        },\n        revokeCannotAssertion: function() {\n            return new Promise((resolve, reject) => {\n                EcCompetency.get(this.uri, (c) => {\n                    if (this.assertions.length === 0) {\n                        return;\n                    }\n                    var eah = new EcAsyncHelper();\n                    eah.each(this.assertions, (assertion, callback) => {\n                        if (c.isId(assertion.competency)) {\n                            assertion.getSubjectAsync((subject) => {\n                                if (this.subject === subject.toPem()) {\n                                    assertion.getAgentAsync((agent) => {\n                                        if (this.me === agent.toPem()) {\n                                            if (assertion.negative != null) {\n                                                assertion.getNegativeAsync((negative) => {\n                                                    if (negative) {\n                                                        EcRepository._delete(assertion, () => {\n                                                            this.$store.commit('editor/removeAssertion', assertion);\n                                                            this.cannotAssertion = false;\n                                                            callback();\n                                                        }, callback);\n                                                    } else {\n                                                        callback();\n                                                    }\n                                                }, callback);\n                                            }\n                                        } else callback();\n                                    }, callback);\n                                } else callback();\n                            }, callback);\n                        } else {\n                            callback();\n                        }\n                    }, () => {\n                        resolve();\n                    });\n                }, reject);\n            });\n        },\n        generateCanAssertion: function() {\n            return new Promise((resolve, reject) => {\n                var a = new EcAssertion();\n                a.generateId(this.repo.selectedServer);\n                a.addOwner(EcIdentityManager.default.ids[0].ppk.toPk());\n                if (this.repo.adminKeys) {\n                    for (let key of this.repo.adminKeys) {\n                        let adminPk = EcPk.fromPem(key);\n                        a.addOwner(adminPk);\n                    }\n                }\n                a.setSubjectAsync(EcPk.fromPem(this.subject), () => {\n                    a.setAgentAsync(EcPk.fromPem(this.me), () => {\n                        a.setCompetency(EcRemoteLinkedData.trimVersionFromUrl(this.uri));\n                        a.setAssertionDateAsync(Date.now(), () => {\n                            a.setExpirationDateAsync(Date.now() + 1000 * 60 * 60 * 24 * 365, () => {\n                                a.setNegativeAsync(false, () => {\n                                    a.setConfidence(1.0);\n                                    var evidences = [];\n                                    // Go find viewActions on related resources to attach to the assertion.\n                                    if (this.me === this.subject) {\n                                        repo.searchWithParams(\n                                            \"@type:CreativeWork AND educationalAlignment.targetUrl:\\\"\" + EcRemoteLinkedData.trimVersionFromUrl(this.uri) + \"\\\"\",\n                                            {size: 5000},\n                                            null,\n                                            (resources) => {\n                                                new EcAsyncHelper().each(\n                                                    resources,\n                                                    (resource, resourceCallback) => {\n                                                        repo.searchWithParams(\n                                                            \"@type:ChooseAction AND object:\\\"\" + resource.shortId() + \"\\\" AND \\\\*owner:\\\"\" + this.subject + \"\\\"\",\n                                                            {size: 5000},\n                                                            null,\n                                                            (views) => {\n                                                                for (var i = 0; i < views.length; i++) {\n                                                                    evidences.push(views[i].shortId());\n                                                                }\n                                                                resourceCallback();\n                                                            },\n                                                            resourceCallback\n                                                        );\n                                                    }, (resources) => {\n                                                        if (evidences.length > 0) {\n                                                            a.setEvidenceAsync(evidences, () => {\n                                                                EcRepository.save(a, () => {\n                                                                    // this.$store.commit('editor/addAssertion', a);\n                                                                    this.canAssertion = true;\n                                                                    resolve();\n                                                                }, reject);\n                                                            }, reject);\n                                                        } else {\n                                                            EcRepository.save(a, () => {\n                                                                // this.$store.commit('editor/addAssertion', a);\n                                                                this.canAssertion = true;\n                                                                resolve();\n                                                            }, reject);\n                                                        }\n                                                    }\n                                                );\n                                            },\n                                            reject\n                                        );\n                                    } else {\n                                        EcRepository.save(a, () => {\n                                            // this.$store.commit('editor/addAssertion', a);\n                                            this.canAssertion = true;\n                                            resolve();\n                                        }, reject);\n                                    }\n                                }, reject); // This is an assertion that an individual *can* do something, not that they *cannot*.\n                            }, reject); // UTC Milliseconds, 365 days in the future.\n                        }, reject); // UTC Milliseconds\n                    }, reject);\n                }, reject);\n            });\n        },\n        generateCannotAssertion: function() {\n            return new Promise((resolve, reject) => {\n                var a = new EcAssertion();\n                a.generateId(this.repo.selectedServer);\n                a.addOwner(EcIdentityManager.default.ids[0].ppk.toPk());\n                if (this.repo.adminKeys) {\n                    for (let key of this.repo.adminKeys) {\n                        let adminPk = EcPk.fromPem(key);\n                        a.addOwner(adminPk);\n                    }\n                }\n                a.setSubjectAsync(EcPk.fromPem(this.subject), () => {\n                    a.setAgentAsync(EcPk.fromPem(this.me), () => {\n                        a.setCompetency(EcRemoteLinkedData.trimVersionFromUrl(this.uri));\n                        a.setAssertionDateAsync(Date.now(), () => {\n                            a.setExpirationDateAsync(Date.now() + 1000 * 60 * 60 * 24 * 365, () => {\n                                a.setNegativeAsync(true, () => {\n                                    a.setConfidence(1.0);\n                                    EcRepository.save(a, () => {\n                                        // this.$store.commit('editor/addAssertion', a);\n                                        this.cannotAssertion = true;\n                                        resolve();\n                                    }, reject);\n                                }, reject); // This is an assertion that an individual *cannot* do something, not that they *can*.\n                            }, reject); // UTC Milliseconds, 365 days in the future.\n                        }, reject); // UTC Milliseconds\n                    }, reject);\n                }, reject);\n            });\n        },\n        evidenceAssertion: async function() {\n            return new Promise((resolve, reject) => {\n                EcCompetency.get(this.uri, (c) => {\n                    if (this.assertions.length === 0) {\n                        return;\n                    }\n                    var eah = new EcAsyncHelper();\n                    eah.each(this.assertions, (assertion, callback) => {\n                        if (c.isId(assertion.competency)) {\n                            assertion.getSubjectAsync((subject) => {\n                                if (this.subject === subject.toPem()) {\n                                    assertion.getAgentAsync((agent) => {\n                                        if (this.me === agent.toPem()) {\n                                            assertion.getEvidencesAsync(async(evidences) => {\n                                                EcArray.setAdd(evidences, this.assertionText);\n                                                this.assertionText = \"\";\n                                                await assertion.setEvidence(evidences);\n                                                EcRepository.save(assertion, () => {\n                                                    // this.$store.commit('editor/addAssertion', assertion);\n                                                    this.$store.dispatch('editor/computeBecause', evidences).then((because) => {\n                                                        this.evidenceExplanation = because;\n                                                    });\n                                                    callback();\n                                                }, callback);\n                                            }, callback);\n                                        } else {\n                                            callback();\n                                        }\n                                    }, callback);\n                                } else {\n                                    callback();\n                                }\n                            }, callback);\n                        } else {\n                            callback();\n                        }\n                    }, () => {\n                        resolve();\n                    });\n                }, reject);\n            });\n        },\n        unevidenceAssertion: async function(url) {\n            return new Promise((resolve, reject) => {\n                EcCompetency.get(this.uri, (c) => {\n                    if (this.assertions.length === 0) {\n                        return;\n                    }\n                    var eah = new EcAsyncHelper();\n                    eah.each(this.assertions, (assertion, callback) => {\n                        if (c.isId(assertion.competency)) {\n                            assertion.getSubjectAsync((subject) => {\n                                if (this.subject === subject.toPem()) {\n                                    assertion.getAgentAsync((agent) => {\n                                        if (this.me === agent.toPem()) {\n                                            assertion.getEvidencesAsync(async(evidences) => {\n                                                EcArray.setRemove(evidences, url);\n                                                await assertion.setEvidence(evidences);\n                                                EcRepository.save(assertion, () => {\n                                                    // this.$store.commit('editor/addAssertion', assertion);\n                                                    this.$store.dispatch('editor/computeBecause', evidences).then((because) => {\n                                                        this.evidenceExplanation = because;\n                                                    });\n                                                    callback();\n                                                }, callback);\n                                            }, callback);\n                                        } else {\n                                            callback();\n                                        }\n                                    }, callback);\n                                } else {\n                                    callback();\n                                }\n                            }, callback);\n                        } else {\n                            callback();\n                        }\n                    }, () => {\n                        resolve();\n                    });\n                }, reject);\n            });\n        }\n    },\n    watch: {\n        subject: function() {\n            this.initAssertions();\n        }\n    }\n};\n</script>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./AssertionEditor.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./AssertionEditor.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./AssertionEditor.vue?vue&type=template&id=3d6d2e13&\"\nimport script from \"./AssertionEditor.vue?vue&type=script&lang=js&\"\nexport * from \"./AssertionEditor.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}