{"version":3,"sources":["webpack:///./src/mixins/cassUtil.js"],"names":["cassUtil","name","data","methods","getOrganizationByEcPk","ecPk","successCallback","failureCallback","ecPkPem","toPem","paramObj","EcOrganization","search","window","repo","ecoa","_iterator","_context","o","getOrgKeys","groupPpkSet","_iterator2","gPpk","toPk","equals","toString","err","getOrganizationEcPk","orgObj","_context2","getCurrentOrgKey","getPersonEcPk","personObj","personFingerprint","this","generateProbablePersonFingerprintFromShortId","shortId","owner","pkPem","EcPk","fromPem","fingerprint","_iterator3","addAllOwnersFromObjectToObject","fromObj","toObj","addOwner","_iterator4","setDefaultBrowserConfigId","configId","localStorage","setItem","removeDefaultBrowserConfig","removeItem","getDefaultBrowserConfigId","getItem","getBooleanValue","val","equalsIgnoreCase","addAllIdentityPksAsOwners","obj","EcIdentityManager","default","ids","length","i","ppk","isObjectOwnerless","doesAnyIdentityOwnObject","hasOwner","personShortId","substring","lastIndexOf","isPersonIdAnObjectOwner","ownerPkPem","ownerFingerprint","_iterator5","isPersonIdAnObjectReader","reader","readerPkPem","readerFingerprint","_iterator6","areAnyIdentitiesThisPerson","getFingerprint","isPersonalIdentityAnObjectOwner","personalIdentPkPem","getPersonalIdentityPk","includes","buildEcAlignmentsFromRemoteLinkedData","ecrlda","ecaa","ecrld","eca","EcAlignment","copyFrom","push","_iterator7","computed","amLoggedIn"],"mappings":"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","file":"js/chunk-2d0dab46.e8387539.js","sourcesContent":["export const cassUtil = {\n    name: 'cassUtil',\n    data: () => ({\n    }),\n    methods: {\n        getOrganizationByEcPk(ecPk, successCallback, failureCallback) {\n            let ecPkPem = ecPk.toPem();\n            let paramObj = {};\n            paramObj.size = 10000;\n            EcOrganization.search(window.repo, '',\n                async function(ecoa) {\n                    for (let o of ecoa) {\n                        try {\n                            let groupPpkSet = await o.getOrgKeys();\n                            for (let gPpk of groupPpkSet) {\n                                if (gPpk && gPpk.toPk().toPem().equals(ecPkPem)) {\n                                    successCallback(o);\n                                    return;\n                                }\n                            }\n                        } catch (e) {\n                            // TODO Problem with EcOrganization update and creating encrypted value when only a reader...\n                            // Anticipated workaround....login as group owner and save it.\n                            // console.error(\"TODO...fix this...needs FRITZ input!!!!: \" + e.toString());\n                            failureCallback(e.toString());\n                        }\n                    }\n                    successCallback(null);\n                },\n                function(err) {\n                    failureCallback(err);\n                },\n                paramObj);\n        },\n        async getOrganizationEcPk(orgObj) {\n            try {\n                return (await orgObj.getCurrentOrgKey()).toPk();\n                // let orgEvPpk = new EcEncryptedValue();\n                // orgEvPpk.copyFrom(orgObj[this.GROUP_PPK_KEY]);\n                // let orgPpk = EcPpk.fromPem(orgEvPpk.decryptIntoString());\n                // return orgPpk.toPk();\n            } catch (e) {\n                // TODO Problem with EcOrganization update and creating encrypted value when only a reader...\n                // Anticipated workaround....login as group owner and save it.\n                return null;\n            }\n        },\n        getPersonEcPk(personObj) {\n            let personFingerprint = this.generateProbablePersonFingerprintFromShortId(personObj.shortId());\n            if (personObj.owner) {\n                for (let pkPem of personObj.owner) {\n                    let ecPk = EcPk.fromPem(pkPem);\n                    if (personFingerprint.equals(ecPk.fingerprint())) return ecPk;\n                }\n            }\n            return null;\n        },\n        addAllOwnersFromObjectToObject(fromObj, toObj) {\n            if (fromObj && fromObj.owner) {\n                for (let pkPem of fromObj.owner) {\n                    let ecPk = EcPk.fromPem(pkPem);\n                    toObj.addOwner(ecPk);\n                }\n            }\n        },\n        setDefaultBrowserConfigId(configId) {\n            localStorage.setItem(\"cassAuthoringToolDefaultBrowserConfigId\", configId);\n        },\n        removeDefaultBrowserConfig() {\n            localStorage.removeItem(\"cassAuthoringToolDefaultBrowserConfigId\");\n        },\n        getDefaultBrowserConfigId() {\n            return localStorage.getItem(\"cassAuthoringToolDefaultBrowserConfigId\");\n        },\n        getBooleanValue(val) {\n            if (typeof val === 'boolean') return val;\n            else if (typeof val === 'string') {\n                if (val.equalsIgnoreCase('true')) return true;\n                else return false;\n            } else return false;\n        },\n        addAllIdentityPksAsOwners(obj) {\n            // let isEcrld = (obj instanceOf EcRemoteLinkedData);\n            if (EcIdentityManager && EcIdentityManager.default.ids && EcIdentityManager.default.ids.length > 0) {\n                for (let i = 0; i < EcIdentityManager.default.ids.length; i++) {\n                    obj.addOwner(EcIdentityManager.default.ids[i].ppk.toPk());\n                }\n            }\n        },\n        isObjectOwnerless(obj) {\n            if (!obj.owner || obj.owner.length === 0) return true;\n            else return false;\n        },\n        doesAnyIdentityOwnObject(obj) {\n            if (!EcIdentityManager || !EcIdentityManager.default.ids || EcIdentityManager.default.ids.length <= 0) return false;\n            else {\n                for (let i = 0; i < EcIdentityManager.default.ids.length; i++) {\n                    if (obj.hasOwner(EcIdentityManager.default.ids[i].ppk.toPk())) return true;\n                }\n                return false;\n            }\n        },\n        generateProbablePersonFingerprintFromShortId(personShortId) {\n            return personShortId.substring(personShortId.lastIndexOf(\"/\") + 1);\n        },\n        isPersonIdAnObjectOwner(personShortId, obj) {\n            if (!obj.owner || obj.owner.length === 0) return false;\n            let personFingerprint = this.generateProbablePersonFingerprintFromShortId(personShortId);\n            for (let ownerPkPem of obj.owner) {\n                let ownerFingerprint = EcPk.fromPem(ownerPkPem).fingerprint();\n                if (ownerFingerprint.equals(personFingerprint)) return true;\n            }\n            return false;\n        },\n        isPersonIdAnObjectReader(personShortId, obj) {\n            if (!obj.reader || obj.reader.length === 0) return false;\n            let personFingerprint = this.generateProbablePersonFingerprintFromShortId(personShortId);\n            for (let readerPkPem of obj.reader) {\n                let readerFingerprint = EcPk.fromPem(readerPkPem).fingerprint();\n                if (readerFingerprint.equals(personFingerprint)) return true;\n            }\n            // return obj.hasReader(EcPk.fromPem(pkPem));\n            return false;\n        },\n        areAnyIdentitiesThisPerson(personObj) {\n            let personFingerprint = personObj.getFingerprint();\n            if (EcIdentityManager && EcIdentityManager.default.ids && EcIdentityManager.default.ids.length > 0) {\n                for (let i = 0; i < EcIdentityManager.default.ids.length; i++) {\n                    if (EcIdentityManager.default.ids[i].ppk.toPk().fingerprint().equals(personFingerprint)) return true;\n                }\n            }\n            return false;\n        },\n        isPersonalIdentityAnObjectOwner(obj) {\n            if (!obj.owner || obj.owner.length === 0) return false;\n            let personalIdentPkPem = this.getPersonalIdentityPk().toPem();\n            return obj.owner.includes(personalIdentPkPem);\n        },\n        getPersonalIdentityPk() {\n            // assuming that the first identity is the user's personal identity\n            if (EcIdentityManager && EcIdentityManager.default.ids && EcIdentityManager.default.ids.length > 0) {\n                return EcIdentityManager.default.ids[0].ppk.toPk();\n            } else return null;\n        },\n        buildEcAlignmentsFromRemoteLinkedData(ecrlda) {\n            let ecaa = [];\n            for (let ecrld of ecrlda) {\n                let eca = new EcAlignment();\n                eca.copyFrom(ecrld);\n                ecaa.push(eca);\n            }\n            return ecaa;\n        }\n    },\n    computed: {\n        amLoggedIn: function() {\n            if (EcIdentityManager && EcIdentityManager.default.ids && EcIdentityManager.default.ids.length > 0) return true;\n            else return false;\n        }\n    }\n};\n\n"],"sourceRoot":""}