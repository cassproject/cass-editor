{"version":3,"sources":["webpack:///./src/mixins/cassUtil.js"],"names":["cassUtil","name","data","methods","getOrganizationByEcPk","ecPkPem","ecPk","paramObj","EcOrganization","window","o","groupPpkSet","gPpk","successCallback","failureCallback","getOrganizationEcPk","orgObj","getPersonEcPk","personFingerprint","this","generateProbablePersonFingerprintFromShortId","personObj","pkPem","EcPk","addAllOwnersFromObjectToObject","fromObj","toObj","setDefaultBrowserConfigId","localStorage","removeDefaultBrowserConfig","getDefaultBrowserConfigId","getBooleanValue","val","addAllIdentityPksAsOwners","EcIdentityManager","i","obj","isObjectOwnerless","doesAnyIdentityOwnObject","personShortId","isPersonIdAnObjectOwner","ownerPkPem","ownerFingerprint","isPersonIdAnObjectReader","readerPkPem","readerFingerprint","areAnyIdentitiesThisPerson","isPersonalIdentityAnObjectOwner","personalIdentPkPem","getPersonalIdentityPk","buildEcAlignmentsFromRemoteLinkedData","ecaa","ecrld","eca","computed","amLoggedIn"],"mappings":"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","file":"js/chunk-2d0dab46.e8387539.js","sourcesContent":["export const cassUtil = {\n    name: 'cassUtil',\n    data: () => ({\n    }),\n    methods: {\n        getOrganizationByEcPk(ecPk, successCallback, failureCallback) {\n            let ecPkPem = ecPk.toPem();\n            let paramObj = {};\n            paramObj.size = 10000;\n            EcOrganization.search(window.repo, '',\n                async function(ecoa) {\n                    for (let o of ecoa) {\n                        try {\n                            let groupPpkSet = await o.getOrgKeys();\n                            for (let gPpk of groupPpkSet) {\n                                if (gPpk && gPpk.toPk().toPem().equals(ecPkPem)) {\n                                    successCallback(o);\n                                    return;\n                                }\n                            }\n                        } catch (e) {\n                            // TODO Problem with EcOrganization update and creating encrypted value when only a reader...\n                            // Anticipated workaround....login as group owner and save it.\n                            // console.error(\"TODO...fix this...needs FRITZ input!!!!: \" + e.toString());\n                            failureCallback(e.toString());\n                        }\n                    }\n                    successCallback(null);\n                },\n                function(err) {\n                    failureCallback(err);\n                },\n                paramObj);\n        },\n        async getOrganizationEcPk(orgObj) {\n            try {\n                return (await orgObj.getCurrentOrgKey()).toPk();\n                // let orgEvPpk = new EcEncryptedValue();\n                // orgEvPpk.copyFrom(orgObj[this.GROUP_PPK_KEY]);\n                // let orgPpk = EcPpk.fromPem(orgEvPpk.decryptIntoString());\n                // return orgPpk.toPk();\n            } catch (e) {\n                // TODO Problem with EcOrganization update and creating encrypted value when only a reader...\n                // Anticipated workaround....login as group owner and save it.\n                return null;\n            }\n        },\n        getPersonEcPk(personObj) {\n            let personFingerprint = this.generateProbablePersonFingerprintFromShortId(personObj.shortId());\n            if (personObj.owner) {\n                for (let pkPem of personObj.owner) {\n                    let ecPk = EcPk.fromPem(pkPem);\n                    if (personFingerprint.equals(ecPk.fingerprint())) return ecPk;\n                }\n            }\n            return null;\n        },\n        addAllOwnersFromObjectToObject(fromObj, toObj) {\n            if (fromObj && fromObj.owner) {\n                for (let pkPem of fromObj.owner) {\n                    let ecPk = EcPk.fromPem(pkPem);\n                    toObj.addOwner(ecPk);\n                }\n            }\n        },\n        setDefaultBrowserConfigId(configId) {\n            localStorage.setItem(\"cassAuthoringToolDefaultBrowserConfigId\", configId);\n        },\n        removeDefaultBrowserConfig() {\n            localStorage.removeItem(\"cassAuthoringToolDefaultBrowserConfigId\");\n        },\n        getDefaultBrowserConfigId() {\n            return localStorage.getItem(\"cassAuthoringToolDefaultBrowserConfigId\");\n        },\n        getBooleanValue(val) {\n            if (typeof val === 'boolean') return val;\n            else if (typeof val === 'string') {\n                if (val.equalsIgnoreCase('true')) return true;\n                else return false;\n            } else return false;\n        },\n        addAllIdentityPksAsOwners(obj) {\n            // let isEcrld = (obj instanceOf EcRemoteLinkedData);\n            if (EcIdentityManager && EcIdentityManager.default.ids && EcIdentityManager.default.ids.length > 0) {\n                for (let i = 0; i < EcIdentityManager.default.ids.length; i++) {\n                    obj.addOwner(EcIdentityManager.default.ids[i].ppk.toPk());\n                }\n            }\n        },\n        isObjectOwnerless(obj) {\n            if (!obj.owner || obj.owner.length === 0) return true;\n            else return false;\n        },\n        doesAnyIdentityOwnObject(obj) {\n            if (!EcIdentityManager || !EcIdentityManager.default.ids || EcIdentityManager.default.ids.length <= 0) return false;\n            else {\n                for (let i = 0; i < EcIdentityManager.default.ids.length; i++) {\n                    if (obj.hasOwner(EcIdentityManager.default.ids[i].ppk.toPk())) return true;\n                }\n                return false;\n            }\n        },\n        generateProbablePersonFingerprintFromShortId(personShortId) {\n            return personShortId.substring(personShortId.lastIndexOf(\"/\") + 1);\n        },\n        isPersonIdAnObjectOwner(personShortId, obj) {\n            if (!obj.owner || obj.owner.length === 0) return false;\n            let personFingerprint = this.generateProbablePersonFingerprintFromShortId(personShortId);\n            for (let ownerPkPem of obj.owner) {\n                let ownerFingerprint = EcPk.fromPem(ownerPkPem).fingerprint();\n                if (ownerFingerprint.equals(personFingerprint)) return true;\n            }\n            return false;\n        },\n        isPersonIdAnObjectReader(personShortId, obj) {\n            if (!obj.reader || obj.reader.length === 0) return false;\n            let personFingerprint = this.generateProbablePersonFingerprintFromShortId(personShortId);\n            for (let readerPkPem of obj.reader) {\n                let readerFingerprint = EcPk.fromPem(readerPkPem).fingerprint();\n                if (readerFingerprint.equals(personFingerprint)) return true;\n            }\n            // return obj.hasReader(EcPk.fromPem(pkPem));\n            return false;\n        },\n        areAnyIdentitiesThisPerson(personObj) {\n            let personFingerprint = personObj.getFingerprint();\n            if (EcIdentityManager && EcIdentityManager.default.ids && EcIdentityManager.default.ids.length > 0) {\n                for (let i = 0; i < EcIdentityManager.default.ids.length; i++) {\n                    if (EcIdentityManager.default.ids[i].ppk.toPk().fingerprint().equals(personFingerprint)) return true;\n                }\n            }\n            return false;\n        },\n        isPersonalIdentityAnObjectOwner(obj) {\n            if (!obj.owner || obj.owner.length === 0) return false;\n            let personalIdentPkPem = this.getPersonalIdentityPk().toPem();\n            return obj.owner.includes(personalIdentPkPem);\n        },\n        getPersonalIdentityPk() {\n            // assuming that the first identity is the user's personal identity\n            if (EcIdentityManager && EcIdentityManager.default.ids && EcIdentityManager.default.ids.length > 0) {\n                return EcIdentityManager.default.ids[0].ppk.toPk();\n            } else return null;\n        },\n        buildEcAlignmentsFromRemoteLinkedData(ecrlda) {\n            let ecaa = [];\n            for (let ecrld of ecrlda) {\n                let eca = new EcAlignment();\n                eca.copyFrom(ecrld);\n                ecaa.push(eca);\n            }\n            return ecaa;\n        }\n    },\n    computed: {\n        amLoggedIn: function() {\n            if (EcIdentityManager && EcIdentityManager.default.ids && EcIdentityManager.default.ids.length > 0) return true;\n            else return false;\n        }\n    }\n};\n\n"],"sourceRoot":""}