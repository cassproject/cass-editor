{"version":3,"sources":["webpack:///./src/lode/components/AssertionEditor.vue","webpack:///src/lode/components/AssertionEditor.vue","webpack:///./src/lode/components/AssertionEditor.vue?34f1","webpack:///./src/lode/components/AssertionEditor.vue?aa31"],"names":["render","_vm","_c","_self","staticClass","class","canAssertion","attrs","loading","on","handleCanClick","canButtonIcon","_v","_s","canButtonText","cannotAssertion","handleCannotClick","cantButtonIcon","cantButtonText","handleBadgeClick","badgeExists","_e","viewBadge","assertionExists","directives","name","rawName","value","assertionText","expression","reasonPlaceholder","domProps","keyup","$event","type","indexOf","_k","keyCode","key","handleEvidenceAssertion","apply","arguments","input","target","composing","evidenceExplanation","_l","evidenceThing","index","url","text","click","handleUnevidenceAssertion","original","assertionsByOthers","length","item","uri","id","staticRenderFns","props","String","components","Assertion","data","badge","badgeLink","repo","window","competentStateEah","evidence","iconAssertion","created","mounted","initAssertions","computed","assertions","_this","$store","getters","filter","a","competency","EcRemoteLinkedData","trimVersionFromUrl","me","subject","otherClaimsPhrase","subjectPerson","methods","_this2","stop","EcAsyncHelper","each","assertion","callback","getSubjectAsync","toPem","getAgentAsync","agent","negativeCallback","negative","getNegativeAsync","hasReader","EcRemote","urlAppend","selectedServer","getGuid","getEvidencesAsync","evidences","dispatch","then","because","push","_handleEvidenceAssertion","_asyncToGenerator","_regenerator","m","_callee","_this3","_t","w","_context","p","n","evidenceAssertion","v","appError","$nextTick","f","_handleUnevidenceAssertion","_callee2","_this4","_t2","_context2","unevidenceAssertion","_x","_handleBadgeClick","_callee3","_this5","_t3","_context3","revokeBadge","generateBadge","_handleCanClick","_callee4","_this6","_t4","_context4","revokeCanAssertion","revokeCannotAssertion","generateCanAssertion","_handleCannotClick","_callee5","_this7","_t5","_context5","generateCannotAssertion","_generateBadge","_callee8","_this8","_context8","Promise","resolve","reject","EcCompetency","get","c","eah","isId","_ref","_callee7","_context7","addReader","EcRepository","save","_ref2","_callee6","_context6","_x3","_x2","open","_revokeBadge","_callee9","_this9","_context9","removeReader","_this0","_delete","commit","_this1","_this10","EcAssertion","generateId","addOwner","EcIdentityManager","default","ids","ppk","toPk","adminKeys","_iterator","_createForOfIteratorHelper","_step","s","done","adminPk","EcPk","fromPem","err","e","setSubjectAsync","setAgentAsync","setCompetency","setAssertionDateAsync","Date","now","setExpirationDateAsync","setNegativeAsync","setConfidence","searchWithParams","size","resources","resource","resourceCallback","shortId","views","i","setEvidenceAsync","_this11","_iterator2","_step2","_evidenceAssertion","_callee1","_this12","_context1","_ref3","_callee0","_context0","EcArray","setAdd","setEvidence","_x4","_unevidenceAssertion","_callee11","_this13","_context11","_ref4","_callee10","_context10","setRemove","_x6","_x5","watch"],"mappings":"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","file":"js/chunk-2d0cbec1.8887f26a.js","sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"assertions-group\"},[_c('div',{staticClass:\"assertions-buttons\"},[_c('div',{staticClass:\"left-buttons\"},[_c('div',{staticClass:\"button is-text\",class:{'active': _vm.canAssertion},attrs:{\"data-id\":\"positiveAssertionButton\",\"disabled\":_vm.loading},on:{\"click\":_vm.handleCanClick}},[_c('i',{class:_vm.canButtonIcon}),_vm._v(\" \"+_vm._s(_vm.canButtonText)+\" \")]),_c('div',{staticClass:\"button is-text\",class:{'active': _vm.cannotAssertion},attrs:{\"data-id\":\"negativeAssertionButton\",\"disabled\":_vm.loading},on:{\"click\":_vm.handleCannotClick}},[_c('i',{class:_vm.cantButtonIcon}),_vm._v(\" \"+_vm._s(_vm.cantButtonText)+\" \")])]),_c('div',{staticClass:\"right-button\"},[(_vm.canAssertion)?_c('div',{staticClass:\"button is-text\",attrs:{\"data-id\":\"badgeButton\",\"disabled\":_vm.loading},on:{\"click\":_vm.handleBadgeClick}},[(_vm.badgeExists)?[_c('span',{staticClass:\"text-icon\"},[_vm._v(\"-\")]),_vm._v(\" Remove Badge \")]:[_c('span',{staticClass:\"text-icon\"},[_vm._v(\"+\")]),_vm._v(\" Add Badge \")]],2):_vm._e(),(_vm.badgeExists)?_c('div',{staticClass:\"button is-text\",attrs:{\"data-id\":\"viewBadgeButton\"},on:{\"click\":_vm.viewBadge}},[_vm._v(\" View Badge \")]):_vm._e()])]),_c('div',{staticClass:\"assertions-input\"},[(_vm.assertionExists)?_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.assertionText),expression:\"assertionText\"}],staticClass:\"input is-narrow\",attrs:{\"disabled\":_vm.loading,\"type\":\"text\",\"placeholder\":_vm.reasonPlaceholder},domProps:{\"value\":(_vm.assertionText)},on:{\"keyup\":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,\"enter\",13,$event.key,\"Enter\"))return null;return _vm.handleEvidenceAssertion.apply(null, arguments)},\"input\":function($event){if($event.target.composing)return;_vm.assertionText=$event.target.value}}}):_vm._e()]),(_vm.evidenceExplanation && (_vm.assertionExists))?_c('small',{staticClass:\"assertions-evidence\"},[_c('hr'),_c('ul',_vm._l((_vm.evidenceExplanation),function(evidenceThing,index){return _c('li',{key:index,attrs:{\"data-id\":\"evidenceElement\"}},[(evidenceThing.url)?_c('a',{attrs:{\"href\":evidenceThing.url,\"target\":\"_blank\"}},[_vm._v(\" \"+_vm._s(evidenceThing.text)+\" \")]):_c('span',[_vm._v(_vm._s(evidenceThing.text))]),_c('div',{staticClass:\"button is-text\",attrs:{\"data-id\":\"removeEvidenceButton\"},on:{\"click\":function($event){return _vm.handleUnevidenceAssertion(evidenceThing.original)}}},[_c('i',{staticClass:\"fas fa-times\"})])])}),0)]):_vm._e(),(_vm.assertionsByOthers && _vm.assertionsByOthers.length > 0)?_c('div',{staticClass:\"assertions-others\"},_vm._l((_vm.assertionsByOthers),function(item){return _c('Assertion',{key:_vm.uri+item.id,attrs:{\"uri\":item.id,\"title\":\"Assertion from elsewhere\"}})}),1):_vm._e()])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <div\n        class=\"assertions-group\">\n        <div class=\"assertions-buttons\">\n            <div class=\"left-buttons\">\n                <div\n                    data-id=\"positiveAssertionButton\"\n                    class=\"button is-text\"\n                    :disabled=\"loading\"\n                    :class=\"{'active': canAssertion}\"\n                    @click=\"handleCanClick\">\n                    <i :class=\"canButtonIcon\" />\n                    {{ canButtonText }}\n                </div>\n                <div\n                    data-id=\"negativeAssertionButton\"\n                    class=\"button is-text\"\n                    :disabled=\"loading\"\n                    :class=\"{'active': cannotAssertion}\"\n                    @click=\"handleCannotClick\">\n                    <i :class=\"cantButtonIcon\" />\n                    {{ cantButtonText }}\n                </div>\n            </div>\n            <div class=\"right-button\">\n                <div\n                    data-id=\"badgeButton\"\n                    class=\"button is-text\"\n                    :disabled=\"loading\"\n                    v-if=\"canAssertion\"\n                    @click=\"handleBadgeClick\">\n                    <template v-if=\"badgeExists\">\n                        <span class=\"text-icon\">-</span> Remove Badge\n                    </template>\n                    <template v-else>\n                        <span class=\"text-icon\">+</span> Add Badge\n                    </template>\n                </div>\n                <div\n                    data-id=\"viewBadgeButton\"\n                    class=\"button is-text\"\n                    @click=\"viewBadge\"\n                    v-if=\"badgeExists\">\n                    View Badge\n                </div>\n            </div>\n        </div>\n        <div class=\"assertions-input\">\n            <input\n                :disabled=\"loading\"\n                class=\"input is-narrow\"\n                type=\"text\"\n                v-if=\"assertionExists\"\n                @keyup.enter=\"handleEvidenceAssertion\"\n                v-model=\"assertionText\"\n                :placeholder=\"reasonPlaceholder\">\n        </div>\n        <small\n            class=\"assertions-evidence\"\n            v-if=\"evidenceExplanation && (assertionExists)\">\n            <hr>\n            <ul>\n                <li\n                    data-id=\"evidenceElement\"\n                    v-for=\"(evidenceThing, index) in evidenceExplanation\"\n                    :key=\"index\">\n                    <a\n                        v-if=\"evidenceThing.url\"\n                        :href=\"evidenceThing.url\"\n                        target=\"_blank\">\n                        {{ evidenceThing.text }}\n                    </a>\n                    <span v-else>{{ evidenceThing.text }}</span>\n                    <div\n                        data-id=\"removeEvidenceButton\"\n                        class=\"button is-text\"\n                        @click=\"handleUnevidenceAssertion(evidenceThing.original)\">\n                        <i class=\"fas fa-times\" />\n                    </div>\n                </li>\n            </ul>\n        </small>\n        <div\n            v-if=\"assertionsByOthers && assertionsByOthers.length > 0\"\n            class=\"assertions-others\">\n            <Assertion\n                v-for=\"item in assertionsByOthers\"\n                :key=\"uri+item.id\"\n                :uri=\"item.id\"\n                title=\"Assertion from elsewhere\" />\n        </div>\n    </div>\n</template>\n<script>\n\nexport default {\n    name: 'AssertionEditor',\n    props: {\n        uri: String\n    },\n    components: {\n        Assertion: () => import('./Assertion.vue')\n    },\n    data: function() {\n        return {\n            loading: false,\n            canAssertion: false,\n            cannotAssertion: false,\n            assertionText: '',\n            badge: false,\n            badgeLink: null,\n            repo: window.repo,\n            competentStateEah: null,\n            evidence: null,\n            evidenceExplanation: null,\n            assertionsByOthers: [],\n            iconAssertion: true\n        };\n    },\n    created: function() {},\n    mounted: function() {\n        this.initAssertions();\n    },\n    computed: {\n        badgeExists: function() {\n            return this.badge;\n        },\n        assertionExists: function() {\n            return this.canAssertion || this.cannotAssertion;\n        },\n        assertions: function() {\n            let assertions = this.$store.getters['editor/assertions'].filter((a) => {\n                return a.competency === EcRemoteLinkedData.trimVersionFromUrl(this.uri);\n            });\n            return assertions;\n        },\n        me: function() {\n            return this.$store.getters['editor/getMe'];\n        },\n        subject: function() {\n            return this.$store.getters['editor/getSubject'];\n        },\n        otherClaimsPhrase: function() {\n            return \"Others have made claims about \" + (this.subject === this.me ? \"you\" : (this.subjectPerson === null ? \"them\" : this.subjectPerson)) + \". Click to expand.\";\n        },\n        reasonPlaceholder: function() {\n            if (this.me === this.subject) {\n                return 'do this because I...';\n            } else {\n                return 'do this because they...';\n            }\n        },\n        canButtonText: function() {\n            if (this.me === this.subject) {\n                return 'I can';\n            } else {\n                return 'They can';\n            }\n        },\n        cantButtonText: function() {\n            if (this.me === this.subject) {\n                return \"I can't\";\n            } else {\n                return \"They can't\";\n            }\n        },\n        canButtonIcon: function() {\n            if (this.canAssertion) {\n                return 'far fa-check-circle';\n            } else {\n                return 'far fa-circle';\n            }\n        },\n        cantButtonIcon: function() {\n            if (this.cannotAssertion) {\n                return 'far fa-check-square';\n            } else {\n                return 'far fa-square';\n            }\n        },\n        subjectPerson: function() {\n            return this.$store.getters['editor/getSubjectName'];\n        }\n    },\n    methods: {\n        initAssertions: function() {\n            this.canAssertion = false;\n            this.cannotAssertion = false;\n            this.assertionText = '';\n            this.badge = false;\n            this.badgeLink = null;\n            this.competentStateEah = null;\n            this.evidence = null;\n            this.evidenceExplanation = null;\n            this.assertionsByOthers = [];\n            this.iconAssertion = true;\n\n            if (this.competentStateEah != null) {\n                this.competentStateEah.stop();\n            }\n            this.competentStateEah = new EcAsyncHelper();\n            this.competentStateEah.each(this.assertions, (assertion, callback) => {\n                if (assertion !== null) {\n                    assertion.getSubjectAsync((subject) => {\n                        if (this.subject === subject.toPem()) {\n                            assertion.getAgentAsync((agent) => {\n                                if (this.me === agent.toPem()) {\n                                    var negativeCallback = () => {\n                                        if (assertion.negative != null) {\n                                            assertion.getNegativeAsync((negative) => {\n                                                if (negative) {\n                                                    this.canAssertion = false;\n                                                    this.cannotAssertion = true;\n                                                    this.badge = false;\n                                                } else {\n                                                    this.badge = assertion.hasReader(this.$store.getters['editor/badgePk']);\n                                                    this.badgeLink = EcRemote.urlAppend(this.repo.selectedServer, \"badge/assertion/\") + assertion.getGuid();\n                                                    this.canAssertion = true;\n                                                    this.cannotAssertion = false;\n                                                }\n                                                callback();\n                                            }, callback);\n                                        } else {\n                                            this.canAssertion = true;\n                                            this.cannotAssertion = false;\n                                            this.badge = assertion.hasReader(this.$store.getters['editor/badgePk']);\n                                            this.badgeLink = EcRemote.urlAppend(this.repo.selectedServer, \"badge/assertion/\") + assertion.getGuid();\n                                            callback();\n                                        }\n                                    };\n                                    if (assertion.evidence != null) {\n                                        assertion.getEvidencesAsync((evidences) => {\n                                            this.evidence = evidences;\n                                            this.$store.dispatch('editor/computeBecause', this.evidence).then((because) => {\n                                                this.evidenceExplanation = because;\n                                            });\n                                            negativeCallback();\n                                        }, callback);\n                                    } else {\n                                        this.evidence = null;\n                                        this.evidenceExplanation = null;\n                                        negativeCallback();\n                                    }\n                                } else {\n                                    this.assertionsByOthers.push(assertion);\n                                    callback();\n                                }\n                            }, callback);\n                        } else {\n                            callback();\n                        }\n                    }, callback);\n                } else {\n                    callback();\n                }\n            }, () => {\n                // TODO\n            });\n        },\n        handleEvidenceAssertion: async function() {\n            this.loading = true;\n            try {\n                await this.evidenceAssertion();\n            } catch (e) {\n                appError(e);\n            } finally {\n                this.$nextTick(() => {\n                    this.loading = false;\n                });\n            }\n        },\n        handleUnevidenceAssertion: async function(url) {\n            this.loading = true;\n            try {\n                await this.unevidenceAssertion(url);\n            } catch (e) {\n                appError(e);\n            } finally {\n                this.$nextTick(() => {\n                    this.loading = false;\n                });\n            }\n        },\n        handleBadgeClick: async function() {\n            this.loading = true;\n            try {\n                if (this.badge) {\n                    await this.revokeBadge();\n                } else {\n                    await this.generateBadge();\n                }\n            } catch (e) {\n                appError(e);\n            } finally {\n                this.$nextTick(() => {\n                    this.loading = false;\n                });\n            }\n        },\n        handleCanClick: async function() {\n            if (this.loading) {\n                return;\n            }\n            this.loading = true;\n            try {\n                if (this.canAssertion) {\n                    await this.revokeBadge();\n                    await this.revokeCanAssertion();\n                } else {\n                    if (this.cannotAssertion) {\n                        await this.revokeCannotAssertion();\n                    }\n                    await this.generateCanAssertion();\n                }\n            } catch (e) {\n                appError(e);\n            } finally {\n                this.$nextTick(() => {\n                    this.loading = false;\n                });\n            }\n        },\n        handleCannotClick: async function() {\n            if (this.loading) {\n                return;\n            }\n\n            this.loading = true;\n            try {\n                if (this.cannotAssertion) {\n                    await this.revokeCannotAssertion();\n                } else {\n                    if (this.canAssertion) {\n                        await this.revokeBadge();\n                        await this.revokeCanAssertion();\n                    }\n                    await this.generateCannotAssertion();\n                }\n            } catch (e) {\n                appError(e);\n            } finally {\n                this.$nextTick(() => {\n                    this.loading = false;\n                });\n            }\n        },\n        generateBadge: async function() {\n            return new Promise((resolve, reject) => {\n                EcCompetency.get(this.uri, (c) => {\n                    if (this.assertions.length === 0) {\n                        return;\n                    }\n                    var eah = new EcAsyncHelper();\n                    eah.each(this.assertions, (assertion, callback) => {\n                        if (c.isId(assertion.competency)) {\n                            assertion.getSubjectAsync((subject) => {\n                                if (this.subject === subject.toPem()) {\n                                    assertion.getAgentAsync(async(agent) => {\n                                        if (this.me === agent.toPem()) {\n                                            if (assertion.negative == null) {\n                                                await assertion.addReader(this.$store.getters['editor/badgePk']);\n                                                EcRepository.save(assertion, () => {\n                                                    // this.$store.commit('editor/addAssertion', assertion);\n                                                    this.badgeLink = EcRemote.urlAppend(this.repo.selectedServer, \"badge/assertion/\") + assertion.getGuid();\n                                                    this.badge = true;\n                                                    callback();\n                                                }, callback);\n                                            } else {\n                                                assertion.getNegativeAsync(async(negative) => {\n                                                    if (!negative) {\n                                                        await assertion.addReader(this.$store.getters['editor/badgePk']);\n                                                        EcRepository.save(assertion, () => {\n                                                            // this.$store.commit('editor/addAssertion', assertion);\n                                                            this.badgeLink = EcRemote.urlAppend(this.repo.selectedServer, \"badge/assertion/\") + assertion.getGuid();\n                                                            this.badge = true;\n                                                            callback();\n                                                        }, callback);\n                                                    } else {\n                                                        callback();\n                                                    }\n                                                }, callback);\n                                            }\n                                        } else {\n                                            callback();\n                                        }\n                                    }, callback);\n                                } else {\n                                    callback();\n                                }\n                            }, callback);\n                        } else {\n                            callback();\n                        }\n                    }, () => {\n                        resolve();\n                    });\n                }, reject);\n            });\n        },\n        viewBadge: function() {\n            window.open(this.badgeLink, '_blank');\n        },\n        revokeBadge: async function() {\n            return new Promise((resolve, reject) => {\n                EcCompetency.get(this.uri, (c) => {\n                    if (this.assertions.length === 0) {\n                        return;\n                    }\n                    var eah = new EcAsyncHelper();\n                    eah.each(this.assertions, (assertion, callback) => {\n                        if (c.isId(assertion.competency)) {\n                            assertion.getSubjectAsync((subject) => {\n                                if (this.subject === subject.toPem()) {\n                                    assertion.getAgentAsync((agent) => {\n                                        if (this.me === agent.toPem()) {\n                                            if (assertion.negative == null) {\n                                                assertion.removeReader(this.$store.getters['editor/badgePk']);\n                                                EcRepository.save(assertion, () => {\n                                                    // this.$store.commit('editor/addAssertion', assertion);\n                                                    this.badgeLink = null;\n                                                    this.badge = false;\n                                                    callback();\n                                                }, callback);\n                                            } else {\n                                                assertion.getNegativeAsync((negative) => {\n                                                    if (!negative) {\n                                                        assertion.removeReader(this.$store.getters['editor/badgePk']);\n                                                        EcRepository.save(assertion, () => {\n                                                            // this.$store.commit('editor/addAssertion', assertion);\n                                                            this.badgeLink = null;\n                                                            this.badge = false;\n                                                            callback();\n                                                        }, callback);\n                                                    } else {\n                                                        callback();\n                                                    }\n                                                }, callback);\n                                            }\n                                        } else {\n                                            callback();\n                                        }\n                                    }, callback);\n                                } else {\n                                    callback();\n                                }\n                            }, callback);\n                        } else {\n                            callback();\n                        }\n                    }, () => {\n                        resolve();\n                    });\n                }, reject);\n            });\n        },\n        revokeCanAssertion: function() {\n            return new Promise((resolve, reject) => {\n                EcCompetency.get(this.uri, (c) => {\n                    if (this.assertions.length === 0) {\n                        return;\n                    }\n                    var eah = new EcAsyncHelper();\n                    eah.each(this.assertions, (assertion, callback) => {\n                        if (c.isId(assertion.competency)) {\n                            assertion.getSubjectAsync((subject) => {\n                                if (this.subject === subject.toPem()) {\n                                    assertion.getAgentAsync((agent) => {\n                                        if (this.me === agent.toPem()) {\n                                            if (assertion.negative === null) {\n                                                EcRepository._delete(assertion, () => {\n                                                    this.$store.commit('editor/removeAssertion', assertion);\n                                                    this.canAssertion = false;\n                                                    callback();\n                                                }, callback);\n                                            } else {\n                                                assertion.getNegativeAsync((negative) => {\n                                                    if (!negative) {\n                                                        EcRepository._delete(assertion, () => {\n                                                            this.$store.commit('editor/removeAssertion', assertion);\n                                                            this.canAssertion = false;\n                                                            callback();\n                                                        }, callback);\n                                                    } else {\n                                                        callback();\n                                                    }\n                                                }, callback);\n                                            }\n                                        } else {\n                                            callback();\n                                        }\n                                    }, callback);\n                                } else {\n                                    callback();\n                                }\n                            }, callback);\n                        } else {\n                            callback();\n                        }\n                    }, () => {\n                        resolve();\n                    });\n                }, reject);\n            });\n        },\n        revokeCannotAssertion: function() {\n            return new Promise((resolve, reject) => {\n                EcCompetency.get(this.uri, (c) => {\n                    if (this.assertions.length === 0) {\n                        return;\n                    }\n                    var eah = new EcAsyncHelper();\n                    eah.each(this.assertions, (assertion, callback) => {\n                        if (c.isId(assertion.competency)) {\n                            assertion.getSubjectAsync((subject) => {\n                                if (this.subject === subject.toPem()) {\n                                    assertion.getAgentAsync((agent) => {\n                                        if (this.me === agent.toPem()) {\n                                            if (assertion.negative != null) {\n                                                assertion.getNegativeAsync((negative) => {\n                                                    if (negative) {\n                                                        EcRepository._delete(assertion, () => {\n                                                            this.$store.commit('editor/removeAssertion', assertion);\n                                                            this.cannotAssertion = false;\n                                                            callback();\n                                                        }, callback);\n                                                    } else {\n                                                        callback();\n                                                    }\n                                                }, callback);\n                                            }\n                                        } else callback();\n                                    }, callback);\n                                } else callback();\n                            }, callback);\n                        } else {\n                            callback();\n                        }\n                    }, () => {\n                        resolve();\n                    });\n                }, reject);\n            });\n        },\n        generateCanAssertion: function() {\n            return new Promise((resolve, reject) => {\n                var a = new EcAssertion();\n                a.generateId(this.repo.selectedServer);\n                a.addOwner(EcIdentityManager.default.ids[0].ppk.toPk());\n                if (this.repo.adminKeys) {\n                    for (let key of this.repo.adminKeys) {\n                        let adminPk = EcPk.fromPem(key);\n                        a.addOwner(adminPk);\n                    }\n                }\n                a.setSubjectAsync(EcPk.fromPem(this.subject), () => {\n                    a.setAgentAsync(EcPk.fromPem(this.me), () => {\n                        a.setCompetency(EcRemoteLinkedData.trimVersionFromUrl(this.uri));\n                        a.setAssertionDateAsync(Date.now(), () => {\n                            a.setExpirationDateAsync(Date.now() + 1000 * 60 * 60 * 24 * 365, () => {\n                                a.setNegativeAsync(false, () => {\n                                    a.setConfidence(1.0);\n                                    var evidences = [];\n                                    // Go find viewActions on related resources to attach to the assertion.\n                                    if (this.me === this.subject) {\n                                        repo.searchWithParams(\n                                            \"@type:CreativeWork AND educationalAlignment.targetUrl:\\\"\" + EcRemoteLinkedData.trimVersionFromUrl(this.uri) + \"\\\"\",\n                                            {size: 5000},\n                                            null,\n                                            (resources) => {\n                                                new EcAsyncHelper().each(\n                                                    resources,\n                                                    (resource, resourceCallback) => {\n                                                        repo.searchWithParams(\n                                                            \"@type:ChooseAction AND object:\\\"\" + resource.shortId() + \"\\\" AND \\\\*owner:\\\"\" + this.subject + \"\\\"\",\n                                                            {size: 5000},\n                                                            null,\n                                                            (views) => {\n                                                                for (var i = 0; i < views.length; i++) {\n                                                                    evidences.push(views[i].shortId());\n                                                                }\n                                                                resourceCallback();\n                                                            },\n                                                            resourceCallback\n                                                        );\n                                                    }, (resources) => {\n                                                        if (evidences.length > 0) {\n                                                            a.setEvidenceAsync(evidences, () => {\n                                                                EcRepository.save(a, () => {\n                                                                    // this.$store.commit('editor/addAssertion', a);\n                                                                    this.canAssertion = true;\n                                                                    resolve();\n                                                                }, reject);\n                                                            }, reject);\n                                                        } else {\n                                                            EcRepository.save(a, () => {\n                                                                // this.$store.commit('editor/addAssertion', a);\n                                                                this.canAssertion = true;\n                                                                resolve();\n                                                            }, reject);\n                                                        }\n                                                    }\n                                                );\n                                            },\n                                            reject\n                                        );\n                                    } else {\n                                        EcRepository.save(a, () => {\n                                            // this.$store.commit('editor/addAssertion', a);\n                                            this.canAssertion = true;\n                                            resolve();\n                                        }, reject);\n                                    }\n                                }, reject); // This is an assertion that an individual *can* do something, not that they *cannot*.\n                            }, reject); // UTC Milliseconds, 365 days in the future.\n                        }, reject); // UTC Milliseconds\n                    }, reject);\n                }, reject);\n            });\n        },\n        generateCannotAssertion: function() {\n            return new Promise((resolve, reject) => {\n                var a = new EcAssertion();\n                a.generateId(this.repo.selectedServer);\n                a.addOwner(EcIdentityManager.default.ids[0].ppk.toPk());\n                if (this.repo.adminKeys) {\n                    for (let key of this.repo.adminKeys) {\n                        let adminPk = EcPk.fromPem(key);\n                        a.addOwner(adminPk);\n                    }\n                }\n                a.setSubjectAsync(EcPk.fromPem(this.subject), () => {\n                    a.setAgentAsync(EcPk.fromPem(this.me), () => {\n                        a.setCompetency(EcRemoteLinkedData.trimVersionFromUrl(this.uri));\n                        a.setAssertionDateAsync(Date.now(), () => {\n                            a.setExpirationDateAsync(Date.now() + 1000 * 60 * 60 * 24 * 365, () => {\n                                a.setNegativeAsync(true, () => {\n                                    a.setConfidence(1.0);\n                                    EcRepository.save(a, () => {\n                                        // this.$store.commit('editor/addAssertion', a);\n                                        this.cannotAssertion = true;\n                                        resolve();\n                                    }, reject);\n                                }, reject); // This is an assertion that an individual *cannot* do something, not that they *can*.\n                            }, reject); // UTC Milliseconds, 365 days in the future.\n                        }, reject); // UTC Milliseconds\n                    }, reject);\n                }, reject);\n            });\n        },\n        evidenceAssertion: async function() {\n            return new Promise((resolve, reject) => {\n                EcCompetency.get(this.uri, (c) => {\n                    if (this.assertions.length === 0) {\n                        return;\n                    }\n                    var eah = new EcAsyncHelper();\n                    eah.each(this.assertions, (assertion, callback) => {\n                        if (c.isId(assertion.competency)) {\n                            assertion.getSubjectAsync((subject) => {\n                                if (this.subject === subject.toPem()) {\n                                    assertion.getAgentAsync((agent) => {\n                                        if (this.me === agent.toPem()) {\n                                            assertion.getEvidencesAsync(async(evidences) => {\n                                                EcArray.setAdd(evidences, this.assertionText);\n                                                this.assertionText = \"\";\n                                                await assertion.setEvidence(evidences);\n                                                EcRepository.save(assertion, () => {\n                                                    // this.$store.commit('editor/addAssertion', assertion);\n                                                    this.$store.dispatch('editor/computeBecause', evidences).then((because) => {\n                                                        this.evidenceExplanation = because;\n                                                    });\n                                                    callback();\n                                                }, callback);\n                                            }, callback);\n                                        } else {\n                                            callback();\n                                        }\n                                    }, callback);\n                                } else {\n                                    callback();\n                                }\n                            }, callback);\n                        } else {\n                            callback();\n                        }\n                    }, () => {\n                        resolve();\n                    });\n                }, reject);\n            });\n        },\n        unevidenceAssertion: async function(url) {\n            return new Promise((resolve, reject) => {\n                EcCompetency.get(this.uri, (c) => {\n                    if (this.assertions.length === 0) {\n                        return;\n                    }\n                    var eah = new EcAsyncHelper();\n                    eah.each(this.assertions, (assertion, callback) => {\n                        if (c.isId(assertion.competency)) {\n                            assertion.getSubjectAsync((subject) => {\n                                if (this.subject === subject.toPem()) {\n                                    assertion.getAgentAsync((agent) => {\n                                        if (this.me === agent.toPem()) {\n                                            assertion.getEvidencesAsync(async(evidences) => {\n                                                EcArray.setRemove(evidences, url);\n                                                await assertion.setEvidence(evidences);\n                                                EcRepository.save(assertion, () => {\n                                                    // this.$store.commit('editor/addAssertion', assertion);\n                                                    this.$store.dispatch('editor/computeBecause', evidences).then((because) => {\n                                                        this.evidenceExplanation = because;\n                                                    });\n                                                    callback();\n                                                }, callback);\n                                            }, callback);\n                                        } else {\n                                            callback();\n                                        }\n                                    }, callback);\n                                } else {\n                                    callback();\n                                }\n                            }, callback);\n                        } else {\n                            callback();\n                        }\n                    }, () => {\n                        resolve();\n                    });\n                }, reject);\n            });\n        }\n    },\n    watch: {\n        subject: function() {\n            this.initAssertions();\n        }\n    }\n};\n</script>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./AssertionEditor.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./AssertionEditor.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./AssertionEditor.vue?vue&type=template&id=3d6d2e13\"\nimport script from \"./AssertionEditor.vue?vue&type=script&lang=js\"\nexport * from \"./AssertionEditor.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}