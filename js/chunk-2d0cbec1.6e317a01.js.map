{"version":3,"sources":["webpack:///./src/lode/components/AssertionEditor.vue","webpack:///src/lode/components/AssertionEditor.vue","webpack:///./src/lode/components/AssertionEditor.vue?34f1","webpack:///./src/lode/components/AssertionEditor.vue?aa31"],"names":["render","_vm","_c","_self","staticClass","class","canAssertion","attrs","loading","on","handleCanClick","canButtonIcon","_v","_s","canButtonText","cannotAssertion","handleCannotClick","cantButtonIcon","cantButtonText","handleBadgeClick","badgeExists","_e","viewBadge","assertionExists","directives","name","rawName","value","assertionText","expression","reasonPlaceholder","domProps","keyup","$event","type","indexOf","_k","keyCode","key","handleEvidenceAssertion","apply","arguments","input","target","composing","evidenceExplanation","_l","evidenceThing","index","url","text","click","handleUnevidenceAssertion","original","assertionsByOthers","length","item","uri","id","staticRenderFns","props","String","components","Assertion","data","badge","badgeLink","repo","window","competentStateEah","evidence","iconAssertion","created","mounted","initAssertions","computed","assertions","_this","$store","getters","filter","a","competency","EcRemoteLinkedData","trimVersionFromUrl","me","subject","otherClaimsPhrase","subjectPerson","methods","_this2","stop","EcAsyncHelper","each","assertion","callback","getSubjectAsync","toPem","getAgentAsync","agent","negativeCallback","negative","getNegativeAsync","hasReader","EcRemote","urlAppend","selectedServer","getGuid","getEvidencesAsync","evidences","dispatch","then","because","push","_handleEvidenceAssertion","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this3","wrap","_callee$","_context","prev","next","evidenceAssertion","t0","appError","$nextTick","finish","_handleUnevidenceAssertion","_callee2","_this4","_callee2$","_context2","unevidenceAssertion","_x","_handleBadgeClick","_callee3","_this5","_callee3$","_context3","revokeBadge","generateBadge","_handleCanClick","_callee4","_this6","_callee4$","_context4","abrupt","revokeCanAssertion","revokeCannotAssertion","generateCanAssertion","_handleCannotClick","_callee5","_this7","_callee5$","_context5","generateCannotAssertion","_generateBadge","_callee8","_this8","_callee8$","_context8","Promise","resolve","reject","EcCompetency","get","c","eah","isId","_ref","_callee7","_callee7$","_context7","addReader","EcRepository","save","_ref2","_callee6","_callee6$","_context6","_x3","_x2","open","_revokeBadge","_callee9","_this9","_callee9$","_context9","removeReader","_this10","_delete","commit","_this11","_this12","EcAssertion","generateId","addOwner","EcIdentityManager","default","ids","ppk","toPk","adminKeys","_iterator","_createForOfIteratorHelper","_step","s","n","done","adminPk","EcPk","fromPem","err","e","f","setSubjectAsync","setAgentAsync","setCompetency","setAssertionDateAsync","Date","now","setExpirationDateAsync","setNegativeAsync","setConfidence","searchWithParams","size","resources","resource","resourceCallback","shortId","views","i","setEvidenceAsync","_this13","_iterator2","_step2","_evidenceAssertion","_callee11","_this14","_callee11$","_context11","_ref3","_callee10","_callee10$","_context10","EcArray","setAdd","setEvidence","_x4","_unevidenceAssertion","_callee13","_this15","_callee13$","_context13","_ref4","_callee12","_callee12$","_context12","setRemove","_x6","_x5","watch"],"mappings":"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","file":"js/chunk-2d0cbec1.6e317a01.js","sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"assertions-group\"},[_c('div',{staticClass:\"assertions-buttons\"},[_c('div',{staticClass:\"left-buttons\"},[_c('div',{staticClass:\"button is-text\",class:{'active': _vm.canAssertion},attrs:{\"data-id\":\"positiveAssertionButton\",\"disabled\":_vm.loading},on:{\"click\":_vm.handleCanClick}},[_c('i',{class:_vm.canButtonIcon}),_vm._v(\" \"+_vm._s(_vm.canButtonText)+\" \")]),_c('div',{staticClass:\"button is-text\",class:{'active': _vm.cannotAssertion},attrs:{\"data-id\":\"negativeAssertionButton\",\"disabled\":_vm.loading},on:{\"click\":_vm.handleCannotClick}},[_c('i',{class:_vm.cantButtonIcon}),_vm._v(\" \"+_vm._s(_vm.cantButtonText)+\" \")])]),_c('div',{staticClass:\"right-button\"},[(_vm.canAssertion)?_c('div',{staticClass:\"button is-text\",attrs:{\"data-id\":\"badgeButton\",\"disabled\":_vm.loading},on:{\"click\":_vm.handleBadgeClick}},[(_vm.badgeExists)?[_c('span',{staticClass:\"text-icon\"},[_vm._v(\"-\")]),_vm._v(\" Remove Badge \")]:[_c('span',{staticClass:\"text-icon\"},[_vm._v(\"+\")]),_vm._v(\" Add Badge \")]],2):_vm._e(),(_vm.badgeExists)?_c('div',{staticClass:\"button is-text\",attrs:{\"data-id\":\"viewBadgeButton\"},on:{\"click\":_vm.viewBadge}},[_vm._v(\" View Badge \")]):_vm._e()])]),_c('div',{staticClass:\"assertions-input\"},[(_vm.assertionExists)?_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.assertionText),expression:\"assertionText\"}],staticClass:\"input is-narrow\",attrs:{\"disabled\":_vm.loading,\"type\":\"text\",\"placeholder\":_vm.reasonPlaceholder},domProps:{\"value\":(_vm.assertionText)},on:{\"keyup\":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,\"enter\",13,$event.key,\"Enter\"))return null;return _vm.handleEvidenceAssertion.apply(null, arguments)},\"input\":function($event){if($event.target.composing)return;_vm.assertionText=$event.target.value}}}):_vm._e()]),(_vm.evidenceExplanation && (_vm.assertionExists))?_c('small',{staticClass:\"assertions-evidence\"},[_c('hr'),_c('ul',_vm._l((_vm.evidenceExplanation),function(evidenceThing,index){return _c('li',{key:index,attrs:{\"data-id\":\"evidenceElement\"}},[(evidenceThing.url)?_c('a',{attrs:{\"href\":evidenceThing.url,\"target\":\"_blank\"}},[_vm._v(\" \"+_vm._s(evidenceThing.text)+\" \")]):_c('span',[_vm._v(_vm._s(evidenceThing.text))]),_c('div',{staticClass:\"button is-text\",attrs:{\"data-id\":\"removeEvidenceButton\"},on:{\"click\":function($event){return _vm.handleUnevidenceAssertion(evidenceThing.original)}}},[_c('i',{staticClass:\"fas fa-times\"})])])}),0)]):_vm._e(),(_vm.assertionsByOthers && _vm.assertionsByOthers.length > 0)?_c('div',{staticClass:\"assertions-others\"},_vm._l((_vm.assertionsByOthers),function(item){return _c('Assertion',{key:_vm.uri+item.id,attrs:{\"uri\":item.id,\"title\":\"Assertion from elsewhere\"}})}),1):_vm._e()])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <div\n        class=\"assertions-group\">\n        <div class=\"assertions-buttons\">\n            <div class=\"left-buttons\">\n                <div\n                    data-id=\"positiveAssertionButton\"\n                    class=\"button is-text\"\n                    :disabled=\"loading\"\n                    :class=\"{'active': canAssertion}\"\n                    @click=\"handleCanClick\">\n                    <i :class=\"canButtonIcon\" />\n                    {{ canButtonText }}\n                </div>\n                <div\n                    data-id=\"negativeAssertionButton\"\n                    class=\"button is-text\"\n                    :disabled=\"loading\"\n                    :class=\"{'active': cannotAssertion}\"\n                    @click=\"handleCannotClick\">\n                    <i :class=\"cantButtonIcon\" />\n                    {{ cantButtonText }}\n                </div>\n            </div>\n            <div class=\"right-button\">\n                <div\n                    data-id=\"badgeButton\"\n                    class=\"button is-text\"\n                    :disabled=\"loading\"\n                    v-if=\"canAssertion\"\n                    @click=\"handleBadgeClick\">\n                    <template v-if=\"badgeExists\">\n                        <span class=\"text-icon\">-</span> Remove Badge\n                    </template>\n                    <template v-else>\n                        <span class=\"text-icon\">+</span> Add Badge\n                    </template>\n                </div>\n                <div\n                    data-id=\"viewBadgeButton\"\n                    class=\"button is-text\"\n                    @click=\"viewBadge\"\n                    v-if=\"badgeExists\">\n                    View Badge\n                </div>\n            </div>\n        </div>\n        <div class=\"assertions-input\">\n            <input\n                :disabled=\"loading\"\n                class=\"input is-narrow\"\n                type=\"text\"\n                v-if=\"assertionExists\"\n                @keyup.enter=\"handleEvidenceAssertion\"\n                v-model=\"assertionText\"\n                :placeholder=\"reasonPlaceholder\">\n        </div>\n        <small\n            class=\"assertions-evidence\"\n            v-if=\"evidenceExplanation && (assertionExists)\">\n            <hr>\n            <ul>\n                <li\n                    data-id=\"evidenceElement\"\n                    v-for=\"(evidenceThing, index) in evidenceExplanation\"\n                    :key=\"index\">\n                    <a\n                        v-if=\"evidenceThing.url\"\n                        :href=\"evidenceThing.url\"\n                        target=\"_blank\">\n                        {{ evidenceThing.text }}\n                    </a>\n                    <span v-else>{{ evidenceThing.text }}</span>\n                    <div\n                        data-id=\"removeEvidenceButton\"\n                        class=\"button is-text\"\n                        @click=\"handleUnevidenceAssertion(evidenceThing.original)\">\n                        <i class=\"fas fa-times\" />\n                    </div>\n                </li>\n            </ul>\n        </small>\n        <div\n            v-if=\"assertionsByOthers && assertionsByOthers.length > 0\"\n            class=\"assertions-others\">\n            <Assertion\n                v-for=\"item in assertionsByOthers\"\n                :key=\"uri+item.id\"\n                :uri=\"item.id\"\n                title=\"Assertion from elsewhere\" />\n        </div>\n    </div>\n</template>\n<script>\n\nexport default {\n    name: 'AssertionEditor',\n    props: {\n        uri: String\n    },\n    components: {\n        Assertion: () => import('./Assertion.vue')\n    },\n    data: function() {\n        return {\n            loading: false,\n            canAssertion: false,\n            cannotAssertion: false,\n            assertionText: '',\n            badge: false,\n            badgeLink: null,\n            repo: window.repo,\n            competentStateEah: null,\n            evidence: null,\n            evidenceExplanation: null,\n            assertionsByOthers: [],\n            iconAssertion: true\n        };\n    },\n    created: function() {},\n    mounted: function() {\n        this.initAssertions();\n    },\n    computed: {\n        badgeExists: function() {\n            return this.badge;\n        },\n        assertionExists: function() {\n            return this.canAssertion || this.cannotAssertion;\n        },\n        assertions: function() {\n            let assertions = this.$store.getters['editor/assertions'].filter((a) => {\n                return a.competency === EcRemoteLinkedData.trimVersionFromUrl(this.uri);\n            });\n            return assertions;\n        },\n        me: function() {\n            return this.$store.getters['editor/getMe'];\n        },\n        subject: function() {\n            return this.$store.getters['editor/getSubject'];\n        },\n        otherClaimsPhrase: function() {\n            return \"Others have made claims about \" + (this.subject === this.me ? \"you\" : (this.subjectPerson === null ? \"them\" : this.subjectPerson)) + \". Click to expand.\";\n        },\n        reasonPlaceholder: function() {\n            if (this.me === this.subject) {\n                return 'do this because I...';\n            } else {\n                return 'do this because they...';\n            }\n        },\n        canButtonText: function() {\n            if (this.me === this.subject) {\n                return 'I can';\n            } else {\n                return 'They can';\n            }\n        },\n        cantButtonText: function() {\n            if (this.me === this.subject) {\n                return \"I can't\";\n            } else {\n                return \"They can't\";\n            }\n        },\n        canButtonIcon: function() {\n            if (this.canAssertion) {\n                return 'far fa-check-circle';\n            } else {\n                return 'far fa-circle';\n            }\n        },\n        cantButtonIcon: function() {\n            if (this.cannotAssertion) {\n                return 'far fa-check-square';\n            } else {\n                return 'far fa-square';\n            }\n        },\n        subjectPerson: function() {\n            return this.$store.getters['editor/getSubjectName'];\n        }\n    },\n    methods: {\n        initAssertions: function() {\n            this.canAssertion = false;\n            this.cannotAssertion = false;\n            this.assertionText = '';\n            this.badge = false;\n            this.badgeLink = null;\n            this.competentStateEah = null;\n            this.evidence = null;\n            this.evidenceExplanation = null;\n            this.assertionsByOthers = [];\n            this.iconAssertion = true;\n\n            if (this.competentStateEah != null) {\n                this.competentStateEah.stop();\n            }\n            this.competentStateEah = new EcAsyncHelper();\n            this.competentStateEah.each(this.assertions, (assertion, callback) => {\n                if (assertion !== null) {\n                    assertion.getSubjectAsync((subject) => {\n                        if (this.subject === subject.toPem()) {\n                            assertion.getAgentAsync((agent) => {\n                                if (this.me === agent.toPem()) {\n                                    var negativeCallback = () => {\n                                        if (assertion.negative != null) {\n                                            assertion.getNegativeAsync((negative) => {\n                                                if (negative) {\n                                                    this.canAssertion = false;\n                                                    this.cannotAssertion = true;\n                                                    this.badge = false;\n                                                } else {\n                                                    this.badge = assertion.hasReader(this.$store.getters['editor/badgePk']);\n                                                    this.badgeLink = EcRemote.urlAppend(this.repo.selectedServer, \"badge/assertion/\") + assertion.getGuid();\n                                                    this.canAssertion = true;\n                                                    this.cannotAssertion = false;\n                                                }\n                                                callback();\n                                            }, callback);\n                                        } else {\n                                            this.canAssertion = true;\n                                            this.cannotAssertion = false;\n                                            this.badge = assertion.hasReader(this.$store.getters['editor/badgePk']);\n                                            this.badgeLink = EcRemote.urlAppend(this.repo.selectedServer, \"badge/assertion/\") + assertion.getGuid();\n                                            callback();\n                                        }\n                                    };\n                                    if (assertion.evidence != null) {\n                                        assertion.getEvidencesAsync((evidences) => {\n                                            this.evidence = evidences;\n                                            this.$store.dispatch('editor/computeBecause', this.evidence).then((because) => {\n                                                this.evidenceExplanation = because;\n                                            });\n                                            negativeCallback();\n                                        }, callback);\n                                    } else {\n                                        this.evidence = null;\n                                        this.evidenceExplanation = null;\n                                        negativeCallback();\n                                    }\n                                } else {\n                                    this.assertionsByOthers.push(assertion);\n                                    callback();\n                                }\n                            }, callback);\n                        } else {\n                            callback();\n                        }\n                    }, callback);\n                } else {\n                    callback();\n                }\n            }, () => {\n                // TODO\n            });\n        },\n        handleEvidenceAssertion: async function() {\n            this.loading = true;\n            try {\n                await this.evidenceAssertion();\n            } catch (e) {\n                appError(e);\n            } finally {\n                this.$nextTick(() => {\n                    this.loading = false;\n                });\n            }\n        },\n        handleUnevidenceAssertion: async function(url) {\n            this.loading = true;\n            try {\n                await this.unevidenceAssertion(url);\n            } catch (e) {\n                appError(e);\n            } finally {\n                this.$nextTick(() => {\n                    this.loading = false;\n                });\n            }\n        },\n        handleBadgeClick: async function() {\n            this.loading = true;\n            try {\n                if (this.badge) {\n                    await this.revokeBadge();\n                } else {\n                    await this.generateBadge();\n                }\n            } catch (e) {\n                appError(e);\n            } finally {\n                this.$nextTick(() => {\n                    this.loading = false;\n                });\n            }\n        },\n        handleCanClick: async function() {\n            if (this.loading) {\n                return;\n            }\n            this.loading = true;\n            try {\n                if (this.canAssertion) {\n                    await this.revokeBadge();\n                    await this.revokeCanAssertion();\n                } else {\n                    if (this.cannotAssertion) {\n                        await this.revokeCannotAssertion();\n                    }\n                    await this.generateCanAssertion();\n                }\n            } catch (e) {\n                appError(e);\n            } finally {\n                this.$nextTick(() => {\n                    this.loading = false;\n                });\n            }\n        },\n        handleCannotClick: async function() {\n            if (this.loading) {\n                return;\n            }\n\n            this.loading = true;\n            try {\n                if (this.cannotAssertion) {\n                    await this.revokeCannotAssertion();\n                } else {\n                    if (this.canAssertion) {\n                        await this.revokeBadge();\n                        await this.revokeCanAssertion();\n                    }\n                    await this.generateCannotAssertion();\n                }\n            } catch (e) {\n                appError(e);\n            } finally {\n                this.$nextTick(() => {\n                    this.loading = false;\n                });\n            }\n        },\n        generateBadge: async function() {\n            return new Promise((resolve, reject) => {\n                EcCompetency.get(this.uri, (c) => {\n                    if (this.assertions.length === 0) {\n                        return;\n                    }\n                    var eah = new EcAsyncHelper();\n                    eah.each(this.assertions, (assertion, callback) => {\n                        if (c.isId(assertion.competency)) {\n                            assertion.getSubjectAsync((subject) => {\n                                if (this.subject === subject.toPem()) {\n                                    assertion.getAgentAsync(async(agent) => {\n                                        if (this.me === agent.toPem()) {\n                                            if (assertion.negative == null) {\n                                                await assertion.addReader(this.$store.getters['editor/badgePk']);\n                                                EcRepository.save(assertion, () => {\n                                                    // this.$store.commit('editor/addAssertion', assertion);\n                                                    this.badgeLink = EcRemote.urlAppend(this.repo.selectedServer, \"badge/assertion/\") + assertion.getGuid();\n                                                    this.badge = true;\n                                                    callback();\n                                                }, callback);\n                                            } else {\n                                                assertion.getNegativeAsync(async(negative) => {\n                                                    if (!negative) {\n                                                        await assertion.addReader(this.$store.getters['editor/badgePk']);\n                                                        EcRepository.save(assertion, () => {\n                                                            // this.$store.commit('editor/addAssertion', assertion);\n                                                            this.badgeLink = EcRemote.urlAppend(this.repo.selectedServer, \"badge/assertion/\") + assertion.getGuid();\n                                                            this.badge = true;\n                                                            callback();\n                                                        }, callback);\n                                                    } else {\n                                                        callback();\n                                                    }\n                                                }, callback);\n                                            }\n                                        } else {\n                                            callback();\n                                        }\n                                    }, callback);\n                                } else {\n                                    callback();\n                                }\n                            }, callback);\n                        } else {\n                            callback();\n                        }\n                    }, () => {\n                        resolve();\n                    });\n                }, reject);\n            });\n        },\n        viewBadge: function() {\n            window.open(this.badgeLink, '_blank');\n        },\n        revokeBadge: async function() {\n            return new Promise((resolve, reject) => {\n                EcCompetency.get(this.uri, (c) => {\n                    if (this.assertions.length === 0) {\n                        return;\n                    }\n                    var eah = new EcAsyncHelper();\n                    eah.each(this.assertions, (assertion, callback) => {\n                        if (c.isId(assertion.competency)) {\n                            assertion.getSubjectAsync((subject) => {\n                                if (this.subject === subject.toPem()) {\n                                    assertion.getAgentAsync((agent) => {\n                                        if (this.me === agent.toPem()) {\n                                            if (assertion.negative == null) {\n                                                assertion.removeReader(this.$store.getters['editor/badgePk']);\n                                                EcRepository.save(assertion, () => {\n                                                    // this.$store.commit('editor/addAssertion', assertion);\n                                                    this.badgeLink = null;\n                                                    this.badge = false;\n                                                    callback();\n                                                }, callback);\n                                            } else {\n                                                assertion.getNegativeAsync((negative) => {\n                                                    if (!negative) {\n                                                        assertion.removeReader(this.$store.getters['editor/badgePk']);\n                                                        EcRepository.save(assertion, () => {\n                                                            // this.$store.commit('editor/addAssertion', assertion);\n                                                            this.badgeLink = null;\n                                                            this.badge = false;\n                                                            callback();\n                                                        }, callback);\n                                                    } else {\n                                                        callback();\n                                                    }\n                                                }, callback);\n                                            }\n                                        } else {\n                                            callback();\n                                        }\n                                    }, callback);\n                                } else {\n                                    callback();\n                                }\n                            }, callback);\n                        } else {\n                            callback();\n                        }\n                    }, () => {\n                        resolve();\n                    });\n                }, reject);\n            });\n        },\n        revokeCanAssertion: function() {\n            return new Promise((resolve, reject) => {\n                EcCompetency.get(this.uri, (c) => {\n                    if (this.assertions.length === 0) {\n                        return;\n                    }\n                    var eah = new EcAsyncHelper();\n                    eah.each(this.assertions, (assertion, callback) => {\n                        if (c.isId(assertion.competency)) {\n                            assertion.getSubjectAsync((subject) => {\n                                if (this.subject === subject.toPem()) {\n                                    assertion.getAgentAsync((agent) => {\n                                        if (this.me === agent.toPem()) {\n                                            if (assertion.negative === null) {\n                                                EcRepository._delete(assertion, () => {\n                                                    this.$store.commit('editor/removeAssertion', assertion);\n                                                    this.canAssertion = false;\n                                                    callback();\n                                                }, callback);\n                                            } else {\n                                                assertion.getNegativeAsync((negative) => {\n                                                    if (!negative) {\n                                                        EcRepository._delete(assertion, () => {\n                                                            this.$store.commit('editor/removeAssertion', assertion);\n                                                            this.canAssertion = false;\n                                                            callback();\n                                                        }, callback);\n                                                    } else {\n                                                        callback();\n                                                    }\n                                                }, callback);\n                                            }\n                                        } else {\n                                            callback();\n                                        }\n                                    }, callback);\n                                } else {\n                                    callback();\n                                }\n                            }, callback);\n                        } else {\n                            callback();\n                        }\n                    }, () => {\n                        resolve();\n                    });\n                }, reject);\n            });\n        },\n        revokeCannotAssertion: function() {\n            return new Promise((resolve, reject) => {\n                EcCompetency.get(this.uri, (c) => {\n                    if (this.assertions.length === 0) {\n                        return;\n                    }\n                    var eah = new EcAsyncHelper();\n                    eah.each(this.assertions, (assertion, callback) => {\n                        if (c.isId(assertion.competency)) {\n                            assertion.getSubjectAsync((subject) => {\n                                if (this.subject === subject.toPem()) {\n                                    assertion.getAgentAsync((agent) => {\n                                        if (this.me === agent.toPem()) {\n                                            if (assertion.negative != null) {\n                                                assertion.getNegativeAsync((negative) => {\n                                                    if (negative) {\n                                                        EcRepository._delete(assertion, () => {\n                                                            this.$store.commit('editor/removeAssertion', assertion);\n                                                            this.cannotAssertion = false;\n                                                            callback();\n                                                        }, callback);\n                                                    } else {\n                                                        callback();\n                                                    }\n                                                }, callback);\n                                            }\n                                        } else callback();\n                                    }, callback);\n                                } else callback();\n                            }, callback);\n                        } else {\n                            callback();\n                        }\n                    }, () => {\n                        resolve();\n                    });\n                }, reject);\n            });\n        },\n        generateCanAssertion: function() {\n            return new Promise((resolve, reject) => {\n                var a = new EcAssertion();\n                a.generateId(this.repo.selectedServer);\n                a.addOwner(EcIdentityManager.default.ids[0].ppk.toPk());\n                if (this.repo.adminKeys) {\n                    for (let key of this.repo.adminKeys) {\n                        let adminPk = EcPk.fromPem(key);\n                        a.addOwner(adminPk);\n                    }\n                }\n                a.setSubjectAsync(EcPk.fromPem(this.subject), () => {\n                    a.setAgentAsync(EcPk.fromPem(this.me), () => {\n                        a.setCompetency(EcRemoteLinkedData.trimVersionFromUrl(this.uri));\n                        a.setAssertionDateAsync(Date.now(), () => {\n                            a.setExpirationDateAsync(Date.now() + 1000 * 60 * 60 * 24 * 365, () => {\n                                a.setNegativeAsync(false, () => {\n                                    a.setConfidence(1.0);\n                                    var evidences = [];\n                                    // Go find viewActions on related resources to attach to the assertion.\n                                    if (this.me === this.subject) {\n                                        repo.searchWithParams(\n                                            \"@type:CreativeWork AND educationalAlignment.targetUrl:\\\"\" + EcRemoteLinkedData.trimVersionFromUrl(this.uri) + \"\\\"\",\n                                            {size: 5000},\n                                            null,\n                                            (resources) => {\n                                                new EcAsyncHelper().each(\n                                                    resources,\n                                                    (resource, resourceCallback) => {\n                                                        repo.searchWithParams(\n                                                            \"@type:ChooseAction AND object:\\\"\" + resource.shortId() + \"\\\" AND \\\\*owner:\\\"\" + this.subject + \"\\\"\",\n                                                            {size: 5000},\n                                                            null,\n                                                            (views) => {\n                                                                for (var i = 0; i < views.length; i++) {\n                                                                    evidences.push(views[i].shortId());\n                                                                }\n                                                                resourceCallback();\n                                                            },\n                                                            resourceCallback\n                                                        );\n                                                    }, (resources) => {\n                                                        if (evidences.length > 0) {\n                                                            a.setEvidenceAsync(evidences, () => {\n                                                                EcRepository.save(a, () => {\n                                                                    // this.$store.commit('editor/addAssertion', a);\n                                                                    this.canAssertion = true;\n                                                                    resolve();\n                                                                }, reject);\n                                                            }, reject);\n                                                        } else {\n                                                            EcRepository.save(a, () => {\n                                                                // this.$store.commit('editor/addAssertion', a);\n                                                                this.canAssertion = true;\n                                                                resolve();\n                                                            }, reject);\n                                                        }\n                                                    }\n                                                );\n                                            },\n                                            reject\n                                        );\n                                    } else {\n                                        EcRepository.save(a, () => {\n                                            // this.$store.commit('editor/addAssertion', a);\n                                            this.canAssertion = true;\n                                            resolve();\n                                        }, reject);\n                                    }\n                                }, reject); // This is an assertion that an individual *can* do something, not that they *cannot*.\n                            }, reject); // UTC Milliseconds, 365 days in the future.\n                        }, reject); // UTC Milliseconds\n                    }, reject);\n                }, reject);\n            });\n        },\n        generateCannotAssertion: function() {\n            return new Promise((resolve, reject) => {\n                var a = new EcAssertion();\n                a.generateId(this.repo.selectedServer);\n                a.addOwner(EcIdentityManager.default.ids[0].ppk.toPk());\n                if (this.repo.adminKeys) {\n                    for (let key of this.repo.adminKeys) {\n                        let adminPk = EcPk.fromPem(key);\n                        a.addOwner(adminPk);\n                    }\n                }\n                a.setSubjectAsync(EcPk.fromPem(this.subject), () => {\n                    a.setAgentAsync(EcPk.fromPem(this.me), () => {\n                        a.setCompetency(EcRemoteLinkedData.trimVersionFromUrl(this.uri));\n                        a.setAssertionDateAsync(Date.now(), () => {\n                            a.setExpirationDateAsync(Date.now() + 1000 * 60 * 60 * 24 * 365, () => {\n                                a.setNegativeAsync(true, () => {\n                                    a.setConfidence(1.0);\n                                    EcRepository.save(a, () => {\n                                        // this.$store.commit('editor/addAssertion', a);\n                                        this.cannotAssertion = true;\n                                        resolve();\n                                    }, reject);\n                                }, reject); // This is an assertion that an individual *cannot* do something, not that they *can*.\n                            }, reject); // UTC Milliseconds, 365 days in the future.\n                        }, reject); // UTC Milliseconds\n                    }, reject);\n                }, reject);\n            });\n        },\n        evidenceAssertion: async function() {\n            return new Promise((resolve, reject) => {\n                EcCompetency.get(this.uri, (c) => {\n                    if (this.assertions.length === 0) {\n                        return;\n                    }\n                    var eah = new EcAsyncHelper();\n                    eah.each(this.assertions, (assertion, callback) => {\n                        if (c.isId(assertion.competency)) {\n                            assertion.getSubjectAsync((subject) => {\n                                if (this.subject === subject.toPem()) {\n                                    assertion.getAgentAsync((agent) => {\n                                        if (this.me === agent.toPem()) {\n                                            assertion.getEvidencesAsync(async(evidences) => {\n                                                EcArray.setAdd(evidences, this.assertionText);\n                                                this.assertionText = \"\";\n                                                await assertion.setEvidence(evidences);\n                                                EcRepository.save(assertion, () => {\n                                                    // this.$store.commit('editor/addAssertion', assertion);\n                                                    this.$store.dispatch('editor/computeBecause', evidences).then((because) => {\n                                                        this.evidenceExplanation = because;\n                                                    });\n                                                    callback();\n                                                }, callback);\n                                            }, callback);\n                                        } else {\n                                            callback();\n                                        }\n                                    }, callback);\n                                } else {\n                                    callback();\n                                }\n                            }, callback);\n                        } else {\n                            callback();\n                        }\n                    }, () => {\n                        resolve();\n                    });\n                }, reject);\n            });\n        },\n        unevidenceAssertion: async function(url) {\n            return new Promise((resolve, reject) => {\n                EcCompetency.get(this.uri, (c) => {\n                    if (this.assertions.length === 0) {\n                        return;\n                    }\n                    var eah = new EcAsyncHelper();\n                    eah.each(this.assertions, (assertion, callback) => {\n                        if (c.isId(assertion.competency)) {\n                            assertion.getSubjectAsync((subject) => {\n                                if (this.subject === subject.toPem()) {\n                                    assertion.getAgentAsync((agent) => {\n                                        if (this.me === agent.toPem()) {\n                                            assertion.getEvidencesAsync(async(evidences) => {\n                                                EcArray.setRemove(evidences, url);\n                                                await assertion.setEvidence(evidences);\n                                                EcRepository.save(assertion, () => {\n                                                    // this.$store.commit('editor/addAssertion', assertion);\n                                                    this.$store.dispatch('editor/computeBecause', evidences).then((because) => {\n                                                        this.evidenceExplanation = because;\n                                                    });\n                                                    callback();\n                                                }, callback);\n                                            }, callback);\n                                        } else {\n                                            callback();\n                                        }\n                                    }, callback);\n                                } else {\n                                    callback();\n                                }\n                            }, callback);\n                        } else {\n                            callback();\n                        }\n                    }, () => {\n                        resolve();\n                    });\n                }, reject);\n            });\n        }\n    },\n    watch: {\n        subject: function() {\n            this.initAssertions();\n        }\n    }\n};\n</script>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./AssertionEditor.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./AssertionEditor.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./AssertionEditor.vue?vue&type=template&id=3d6d2e13\"\nimport script from \"./AssertionEditor.vue?vue&type=script&lang=js\"\nexport * from \"./AssertionEditor.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}