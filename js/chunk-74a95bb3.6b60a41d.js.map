{"version":3,"sources":["webpack:///./src/mixins/competencyEdits.js"],"names":["mixins","common","methods","removeObject","thing","appLog","id","me","this","thisFramework","$store","getters","initialCompetencies","competency","slice","initialRelations","relation","initialLevels","level","Date","toISOString","removeCompetency","shortId","framework","commit","operation","fieldChanged","initialValue","state","editor","private","EcEncryptedValue","encryptOnSaveMap","f","_context","toEncryptedValue","window","repo","saveTo","appError","deleteObject","deleteRegistered","success","spitEvent","i","length","conditionalDelete","importType","$router","push","name","removeLevel","obj","changedValue","frameworkToSave","_context2"],"mappings":"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","file":"js/chunk-74a95bb3.6b60a41d.js","sourcesContent":["import common from '@/mixins/common.js';\nexport default {\n    mixins: [common],\n    methods: {\n        removeObject: function(thing) {\n            // Remove from container but don't delete\n            appLog(\"removing \" + thing.id);\n            var me = this;\n            var thisFramework = this.$store.getters['editor/framework'];\n            var initialCompetencies = thisFramework.competency ? thisFramework.competency.slice() : null;\n            var initialRelations = thisFramework.relation ? thisFramework.relation.slice() : null;\n            var initialLevels = thisFramework.level ? thisFramework.level.slice() : null;\n            thisFramework[\"schema:dateModified\"] = new Date().toISOString();\n            thisFramework.removeCompetency(thing.shortId(), async function() {\n                var framework = me.framework;\n                me.$store.commit('editor/addEditsToUndo', [{operation: \"update\", id: framework.shortId(), fieldChanged: [\"competency\", \"relation\", \"level\"], initialValue: [initialCompetencies, initialRelations, initialLevels]}]);\n                if (me.$store.state.editor.private === true && EcEncryptedValue.encryptOnSaveMap[f.id] !== true) {\n                    framework = await EcEncryptedValue.toEncryptedValue(framework);\n                }\n                window.repo.saveTo(framework, function() {\n                    me.$store.commit('editor/framework', thisFramework);\n                }, appError);\n            }, appLog);\n        },\n        deleteObject: function(thing) {\n            appLog(\"deleting \" + thing.id);\n            var me = this;\n            var framework = this.$store.getters['editor/framework'];\n            if (thing.shortId() === framework.shortId()) {\n                // delete framework\n                window.repo.deleteRegistered(framework, function(success) {\n                    me.spitEvent(\"frameworkDeleted\", framework.shortId(), \"editFrameworkSection\");\n                    // Delete the framework, delete all non-used stuff.\n                    if (framework.competency != null) {\n                        for (var i = 0; i < framework.competency.length; i++) {\n                            me.conditionalDelete(framework.competency[i]);\n                        }\n                    }\n                    if (framework.relation != null) {\n                        for (var i = 0; i < framework.relation.length; i++) {\n                            me.conditionalDelete(framework.relation[i]);\n                        }\n                    }\n                    if (framework.level != null) {\n                        for (var i = 0; i < framework.level.length; i++) {\n                            me.conditionalDelete(framework.level[i]);\n                        }\n                    }\n                    me.$store.commit('editor/framework', null);\n                    if (me.importType) {\n                        // Calling function from import page\n                        me.$store.commit('app/importFramework', null);\n                    } else {\n                        me.$router.push({name: \"frameworks\"});\n                    }\n                }, appLog);\n            } else {\n                // Delete competency and relations\n                var initialCompetencies = framework.competency ? framework.competency.slice() : null;\n                var initialRelations = framework.relation ? framework.relation.slice() : null;\n                var initialLevels = framework.level ? framework.level.slice() : null;\n                this.$store.commit('editor/selectedCompetency', thing);\n                framework[\"schema:dateModified\"] = new Date().toISOString();\n                framework.removeCompetency(thing.shortId(), async function() {\n                    framework.removeLevel(thing.shortId());\n                    me.$store.commit('editor/addEditsToUndo', [\n                        {operation: \"delete\", obj: thing},\n                        {operation: \"update\", id: framework.shortId(), fieldChanged: [\"competency\", \"relation\", \"level\"], initialValue: [initialCompetencies, initialRelations, initialLevels], changedValue: [framework.competency, framework.relation, framework.level]}\n                    ]);\n                    me.conditionalDelete(thing.shortId());\n                    me.spitEvent(\"competencyDeleted\", thing.shortId(), \"editFrameworkSection\");\n                    me.$store.commit('editor/selectedCompetency', null);\n                    var frameworkToSave = framework;\n                    if (me.$store.state.editor.private === true && EcEncryptedValue.encryptOnSaveMap[framework.id] !== true) {\n                        frameworkToSave = await EcEncryptedValue.toEncryptedValue(framework);\n                    }\n                    window.repo.saveTo(frameworkToSave, function() {\n                        me.$store.commit('editor/framework', framework);\n                    }, appError);\n                }, appLog);\n            }\n        }\n    }\n};"],"sourceRoot":""}