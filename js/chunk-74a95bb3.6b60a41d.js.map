{"version":3,"sources":["webpack:///./src/mixins/competencyEdits.js"],"names":["mixins","methods","removeObject","appLog","thing","me","thisFramework","this","$store","getters","initialCompetencies","initialRelations","initialLevels","Date","framework","operation","id","fieldChanged","initialValue","EcEncryptedValue","f","window","deleteObject","i","name","obj","changedValue","frameworkToSave"],"mappings":"mKACe,QACXA,OAAQ,CADG,QAEXC,QAAS,CACLC,aAAc,YAEVC,OAAO,YAAcC,EAArBD,IACA,IAAIE,EAAJ,KACIC,EAAgBC,KAAKC,OAAOC,QAAhC,oBACIC,EAAsBJ,aAA2BA,aAA3BA,QAA1B,KACIK,EAAmBL,WAAyBA,WAAzBA,QAAvB,KACIM,EAAgBN,QAAsBA,QAAtBA,QAApB,KACAA,0BAAuC,IAAIO,MAA3CP,cACAA,mBAA+BF,EAA/BE,kDAAgD,uGACxCQ,EAAYT,EAD4B,UAE5CA,wCAA0C,CAAC,CAACU,UAAD,SAAsBC,GAAIF,EAA1B,UAA+CG,aAAc,CAAC,aAAc,WAA5E,SAAkGC,aAAc,CAACR,EAAqBC,EAAkBC,OAC/LP,oCAHwC,IAGGc,kCAAkCC,EAAlCD,IAHH,gCAItBA,kCAJsB,UAIxCL,EAJwC,cAM5CO,sBAA8B,WAC1BhB,wCADJgB,UAN4C,2CAAhDf,SAWJgB,aAAc,YACVnB,OAAO,YAAcC,EAArBD,IACA,IAAIE,EAAJ,KACIS,EAAYP,KAAKC,OAAOC,QAA5B,oBACA,GAAIL,cAAoBU,EAAxB,UAEIO,gCAAwC,YAGpC,GAFAhB,+BAAiCS,EAAjCT,UADsD,wBAGtD,MAAIS,aACA,IAAK,IAAIS,EAAT,EAAgBA,EAAIT,aAApB,OAAiDS,IAC7ClB,oBAAqBS,aAArBT,IAGR,SAAIS,WACA,IAASS,EAAT,EAAgBA,EAAIT,WAApB,OAA+CS,IAC3ClB,oBAAqBS,WAArBT,IAGR,SAAIS,QACA,IAASS,EAAT,EAAgBA,EAAIT,QAApB,OAA4CS,IACxClB,oBAAqBS,QAArBT,IAGRA,yCACIA,EAAJ,WAEIA,4CAEAA,eAAgB,CAACmB,KAAM,iBAvB/BH,YA0BG,CAEH,IAAIX,EAAsBI,aAAuBA,aAAvBA,QAA1B,KACIH,EAAmBG,WAAqBA,WAArBA,QAAvB,KACIF,EAAgBE,QAAkBA,QAAlBA,QAApB,KACAP,KAAA,6CACAO,0BAAmC,IAAID,MAAvCC,cACAA,mBAA2BV,EAA3BU,kDAA4C,uGACxCA,cAAsBV,EAAtBU,WACAT,wCAA0C,CACtC,CAACU,UAAD,SAAsBU,IAAKrB,GAC3B,CAACW,UAAD,SAAsBC,GAAIF,EAA1B,UAA+CG,aAAc,CAAC,aAAc,WAA5E,SAAkGC,aAAc,CAACR,EAAqBC,EAAtI,GAAwKe,aAAc,CAACZ,EAAD,WAAuBA,EAAvB,SAA2CA,EAA3C,UAE1LT,oBAAqBD,EAArBC,WACAA,gCAAkCD,EAAlCC,kCACAA,kDACIsB,EAToC,GAUpCtB,oCAVoC,IAUOc,kCAAkCL,EAAlCK,IAVP,iCAWZA,kCAXY,UAWpCQ,EAXoC,eAaxCN,sBAAoC,WAChChB,wCADJgB,UAbwC,4CAA5CP","file":"js/chunk-74a95bb3.6b60a41d.js","sourcesContent":["import common from '@/mixins/common.js';\nexport default {\n    mixins: [common],\n    methods: {\n        removeObject: function(thing) {\n            // Remove from container but don't delete\n            appLog(\"removing \" + thing.id);\n            var me = this;\n            var thisFramework = this.$store.getters['editor/framework'];\n            var initialCompetencies = thisFramework.competency ? thisFramework.competency.slice() : null;\n            var initialRelations = thisFramework.relation ? thisFramework.relation.slice() : null;\n            var initialLevels = thisFramework.level ? thisFramework.level.slice() : null;\n            thisFramework[\"schema:dateModified\"] = new Date().toISOString();\n            thisFramework.removeCompetency(thing.shortId(), async function() {\n                var framework = me.framework;\n                me.$store.commit('editor/addEditsToUndo', [{operation: \"update\", id: framework.shortId(), fieldChanged: [\"competency\", \"relation\", \"level\"], initialValue: [initialCompetencies, initialRelations, initialLevels]}]);\n                if (me.$store.state.editor.private === true && EcEncryptedValue.encryptOnSaveMap[f.id] !== true) {\n                    framework = await EcEncryptedValue.toEncryptedValue(framework);\n                }\n                window.repo.saveTo(framework, function() {\n                    me.$store.commit('editor/framework', thisFramework);\n                }, appError);\n            }, appLog);\n        },\n        deleteObject: function(thing) {\n            appLog(\"deleting \" + thing.id);\n            var me = this;\n            var framework = this.$store.getters['editor/framework'];\n            if (thing.shortId() === framework.shortId()) {\n                // delete framework\n                window.repo.deleteRegistered(framework, function(success) {\n                    me.spitEvent(\"frameworkDeleted\", framework.shortId(), \"editFrameworkSection\");\n                    // Delete the framework, delete all non-used stuff.\n                    if (framework.competency != null) {\n                        for (var i = 0; i < framework.competency.length; i++) {\n                            me.conditionalDelete(framework.competency[i]);\n                        }\n                    }\n                    if (framework.relation != null) {\n                        for (var i = 0; i < framework.relation.length; i++) {\n                            me.conditionalDelete(framework.relation[i]);\n                        }\n                    }\n                    if (framework.level != null) {\n                        for (var i = 0; i < framework.level.length; i++) {\n                            me.conditionalDelete(framework.level[i]);\n                        }\n                    }\n                    me.$store.commit('editor/framework', null);\n                    if (me.importType) {\n                        // Calling function from import page\n                        me.$store.commit('app/importFramework', null);\n                    } else {\n                        me.$router.push({name: \"frameworks\"});\n                    }\n                }, appLog);\n            } else {\n                // Delete competency and relations\n                var initialCompetencies = framework.competency ? framework.competency.slice() : null;\n                var initialRelations = framework.relation ? framework.relation.slice() : null;\n                var initialLevels = framework.level ? framework.level.slice() : null;\n                this.$store.commit('editor/selectedCompetency', thing);\n                framework[\"schema:dateModified\"] = new Date().toISOString();\n                framework.removeCompetency(thing.shortId(), async function() {\n                    framework.removeLevel(thing.shortId());\n                    me.$store.commit('editor/addEditsToUndo', [\n                        {operation: \"delete\", obj: thing},\n                        {operation: \"update\", id: framework.shortId(), fieldChanged: [\"competency\", \"relation\", \"level\"], initialValue: [initialCompetencies, initialRelations, initialLevels], changedValue: [framework.competency, framework.relation, framework.level]}\n                    ]);\n                    me.conditionalDelete(thing.shortId());\n                    me.spitEvent(\"competencyDeleted\", thing.shortId(), \"editFrameworkSection\");\n                    me.$store.commit('editor/selectedCompetency', null);\n                    var frameworkToSave = framework;\n                    if (me.$store.state.editor.private === true && EcEncryptedValue.encryptOnSaveMap[framework.id] !== true) {\n                        frameworkToSave = await EcEncryptedValue.toEncryptedValue(framework);\n                    }\n                    window.repo.saveTo(frameworkToSave, function() {\n                        me.$store.commit('editor/framework', framework);\n                    }, appError);\n                }, appLog);\n            }\n        }\n    }\n};"],"sourceRoot":""}