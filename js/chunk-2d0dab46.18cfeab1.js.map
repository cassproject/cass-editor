{"version":3,"sources":["webpack:///./src/mixins/cassUtil.js"],"names":["cassUtil","name","data","methods","getOrganizationByEcPk","ecPk","successCallback","failureCallback","ecPkPem","toPem","paramObj","EcOrganization","search","window","repo","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","ecoa","_iterator","_step","o","groupPpkSet","_iterator2","_step2","gPpk","wrap","_context","prev","next","_createForOfIteratorHelper","s","n","done","value","getOrgKeys","sent","toPk","equals","abrupt","t0","e","f","finish","t1","toString","t2","stop","_x","apply","arguments","err","getOrganizationEcPk","orgObj","_callee2","_context2","getCurrentOrgKey","getPersonEcPk","personObj","personFingerprint","this","generateProbablePersonFingerprintFromShortId","shortId","owner","_step3","_iterator3","pkPem","EcPk","fromPem","fingerprint","addAllOwnersFromObjectToObject","fromObj","toObj","_step4","_iterator4","addOwner","setDefaultBrowserConfigId","configId","localStorage","setItem","removeDefaultBrowserConfig","removeItem","getDefaultBrowserConfigId","getItem","getBooleanValue","val","equalsIgnoreCase","addAllIdentityPksAsOwners","obj","EcIdentityManager","default","ids","length","i","ppk","isObjectOwnerless","doesAnyIdentityOwnObject","isAdmin","canEditAny","getMyPks","item","adminKeys","personShortId","substring","lastIndexOf","isPersonIdAnObjectOwner","_step5","_iterator5","ownerPkPem","ownerFingerprint","isPersonIdAnObjectReader","reader","_step6","_iterator6","readerPkPem","readerFingerprint","areAnyIdentitiesThisPerson","getFingerprint","isPersonalIdentityAnObjectOwner","personalIdentPkPem","getPersonalIdentityPk","includes","buildEcAlignmentsFromRemoteLinkedData","ecrlda","_step7","ecaa","_iterator7","ecrld","eca","EcAlignment","copyFrom","push","computed","amLoggedIn"],"mappings":"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","file":"js/chunk-2d0dab46.18cfeab1.js","sourcesContent":["export const cassUtil = {\n    name: 'cassUtil',\n    data: () => ({\n    }),\n    methods: {\n        getOrganizationByEcPk(ecPk, successCallback, failureCallback) {\n            let ecPkPem = ecPk.toPem();\n            let paramObj = {};\n            paramObj.size = 10000;\n            EcOrganization.search(window.repo, '',\n                async function(ecoa) {\n                    for (let o of ecoa) {\n                        try {\n                            let groupPpkSet = await o.getOrgKeys();\n                            for (let gPpk of groupPpkSet) {\n                                if (gPpk && gPpk.toPk().toPem().equals(ecPkPem)) {\n                                    successCallback(o);\n                                    return;\n                                }\n                            }\n                        } catch (e) {\n                            // TODO Problem with EcOrganization update and creating encrypted value when only a reader...\n                            // Anticipated workaround....login as group owner and save it.\n                            // console.error(\"TODO...fix this...needs FRITZ input!!!!: \" + e.toString());\n                            failureCallback(e.toString());\n                        }\n                    }\n                    successCallback(null);\n                },\n                function(err) {\n                    failureCallback(err);\n                },\n                paramObj);\n        },\n        async getOrganizationEcPk(orgObj) {\n            try {\n                return (await orgObj.getCurrentOrgKey()).toPk();\n                // let orgEvPpk = new EcEncryptedValue();\n                // orgEvPpk.copyFrom(orgObj[this.GROUP_PPK_KEY]);\n                // let orgPpk = EcPpk.fromPem(orgEvPpk.decryptIntoString());\n                // return orgPpk.toPk();\n            } catch (e) {\n                // TODO Problem with EcOrganization update and creating encrypted value when only a reader...\n                // Anticipated workaround....login as group owner and save it.\n                return null;\n            }\n        },\n        getPersonEcPk(personObj) {\n            let personFingerprint = this.generateProbablePersonFingerprintFromShortId(personObj.shortId());\n            if (personObj.owner) {\n                for (let pkPem of personObj.owner) {\n                    let ecPk = EcPk.fromPem(pkPem);\n                    if (personFingerprint.equals(ecPk.fingerprint())) return ecPk;\n                }\n            }\n            return null;\n        },\n        addAllOwnersFromObjectToObject(fromObj, toObj) {\n            if (fromObj && fromObj.owner) {\n                for (let pkPem of fromObj.owner) {\n                    let ecPk = EcPk.fromPem(pkPem);\n                    toObj.addOwner(ecPk);\n                }\n            }\n        },\n        setDefaultBrowserConfigId(configId) {\n            localStorage.setItem(\"cassAuthoringToolDefaultBrowserConfigId\", configId);\n        },\n        removeDefaultBrowserConfig() {\n            localStorage.removeItem(\"cassAuthoringToolDefaultBrowserConfigId\");\n        },\n        getDefaultBrowserConfigId() {\n            return localStorage.getItem(\"cassAuthoringToolDefaultBrowserConfigId\");\n        },\n        getBooleanValue(val) {\n            if (typeof val === 'boolean') return val;\n            else if (typeof val === 'string') {\n                if (val.equalsIgnoreCase('true')) return true;\n                else return false;\n            } else return false;\n        },\n        addAllIdentityPksAsOwners(obj) {\n            // let isEcrld = (obj instanceOf EcRemoteLinkedData);\n            if (EcIdentityManager && EcIdentityManager.default.ids && EcIdentityManager.default.ids.length > 0) {\n                for (let i = 0; i < EcIdentityManager.default.ids.length; i++) {\n                    obj.addOwner(EcIdentityManager.default.ids[i].ppk.toPk());\n                }\n            }\n        },\n        isObjectOwnerless(obj) {\n            if (!obj.owner || obj.owner.length === 0) return true;\n            else return false;\n        },\n        doesAnyIdentityOwnObject(obj) {\n            if (this.isAdmin()) return true;\n            if (obj.canEditAny == null) return true;\n            return obj.canEditAny(EcIdentityManager.default.getMyPks());\n        },\n        canEditAny: function(item) {\n            if (this.isAdmin()) return true;\n            if (item.canEditAny == null) return true;\n            return item.canEditAny(EcIdentityManager.default.getMyPks());\n        },\n        isAdmin: function() {\n            if (EcIdentityManager.default.ids.length > 0 && window.repo.adminKeys != null && window.repo.adminKeys.length > 0) {\n                if (window.repo.adminKeys[0] === EcIdentityManager.default.ids[0].ppk.toPk().toPem()) { return true; }\n            }\n            return false;\n        },\n        generateProbablePersonFingerprintFromShortId(personShortId) {\n            return personShortId.substring(personShortId.lastIndexOf(\"/\") + 1);\n        },\n        isPersonIdAnObjectOwner(personShortId, obj) {\n            if (!obj.owner || obj.owner.length === 0) return false;\n            let personFingerprint = this.generateProbablePersonFingerprintFromShortId(personShortId);\n            for (let ownerPkPem of obj.owner) {\n                let ownerFingerprint = EcPk.fromPem(ownerPkPem).fingerprint();\n                if (ownerFingerprint.equals(personFingerprint)) return true;\n            }\n            return false;\n        },\n        isPersonIdAnObjectReader(personShortId, obj) {\n            if (!obj.reader || obj.reader.length === 0) return false;\n            let personFingerprint = this.generateProbablePersonFingerprintFromShortId(personShortId);\n            for (let readerPkPem of obj.reader) {\n                let readerFingerprint = EcPk.fromPem(readerPkPem).fingerprint();\n                if (readerFingerprint.equals(personFingerprint)) return true;\n            }\n            // return obj.hasReader(EcPk.fromPem(pkPem));\n            return false;\n        },\n        areAnyIdentitiesThisPerson(personObj) {\n            let personFingerprint = personObj.getFingerprint();\n            if (EcIdentityManager && EcIdentityManager.default.ids && EcIdentityManager.default.ids.length > 0) {\n                for (let i = 0; i < EcIdentityManager.default.ids.length; i++) {\n                    if (EcIdentityManager.default.ids[i].ppk.toPk().fingerprint().equals(personFingerprint)) return true;\n                }\n            }\n            return false;\n        },\n        isPersonalIdentityAnObjectOwner(obj) {\n            if (this.isAdmin()) return true;\n            if (!obj.owner || obj.owner.length === 0) return false;\n            let personalIdentPkPem = this.getPersonalIdentityPk().toPem();\n            return obj.owner.includes(personalIdentPkPem);\n        },\n        getPersonalIdentityPk() {\n            // assuming that the first identity is the user's personal identity\n            if (EcIdentityManager && EcIdentityManager.default.ids && EcIdentityManager.default.ids.length > 0) {\n                return EcIdentityManager.default.ids[0].ppk.toPk();\n            } else return null;\n        },\n        buildEcAlignmentsFromRemoteLinkedData(ecrlda) {\n            let ecaa = [];\n            for (let ecrld of ecrlda) {\n                let eca = new EcAlignment();\n                eca.copyFrom(ecrld);\n                ecaa.push(eca);\n            }\n            return ecaa;\n        }\n    },\n    computed: {\n        amLoggedIn: function() {\n            if (EcIdentityManager && EcIdentityManager.default.ids && EcIdentityManager.default.ids.length > 0) return true;\n            else return false;\n        }\n    }\n};\n\n"],"sourceRoot":""}