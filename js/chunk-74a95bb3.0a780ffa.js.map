{"version":3,"sources":["webpack:///./src/mixins/competencyEdits.js"],"names":["mixins","common","methods","removeObject","thing","appLog","id","me","this","thisFramework","$store","getters","initialCompetencies","competency","slice","initialRelations","relation","initialLevels","level","Date","toISOString","removeCompetency","shortId","_asyncToGenerator","_regeneratorRuntime","mark","_callee","framework","wrap","_context","prev","next","commit","operation","fieldChanged","initialValue","state","editor","private","EcEncryptedValue","encryptOnSaveMap","f","toEncryptedValue","sent","window","repo","saveTo","appError","stop","deleteObject","deleteRegistered","success","spitEvent","i","length","conditionalDelete","importType","$router","push","name","_callee2","frameworkToSave","_context2","removeLevel","obj","changedValue"],"mappings":"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","file":"js/chunk-74a95bb3.0a780ffa.js","sourcesContent":["import common from '@/mixins/common.js';\nexport default {\n    mixins: [common],\n    methods: {\n        removeObject: function(thing) {\n            // Remove from container but don't delete\n            appLog(\"removing \" + thing.id);\n            var me = this;\n            var thisFramework = this.$store.getters['editor/framework'];\n            var initialCompetencies = thisFramework.competency ? thisFramework.competency.slice() : null;\n            var initialRelations = thisFramework.relation ? thisFramework.relation.slice() : null;\n            var initialLevels = thisFramework.level ? thisFramework.level.slice() : null;\n            thisFramework[\"schema:dateModified\"] = new Date().toISOString();\n            thisFramework.removeCompetency(thing.shortId(), async function() {\n                var framework = me.framework;\n                me.$store.commit('editor/addEditsToUndo', [{operation: \"update\", id: framework.shortId(), fieldChanged: [\"competency\", \"relation\", \"level\"], initialValue: [initialCompetencies, initialRelations, initialLevels]}]);\n                if (me.$store.state.editor.private === true && EcEncryptedValue.encryptOnSaveMap[f.id] !== true) {\n                    framework = await EcEncryptedValue.toEncryptedValue(framework);\n                }\n                window.repo.saveTo(framework, function() {\n                    me.$store.commit('editor/framework', thisFramework);\n                }, appError);\n            }, appLog);\n        },\n        deleteObject: function(thing) {\n            appLog(\"deleting \" + thing.id);\n            var me = this;\n            var framework = this.$store.getters['editor/framework'];\n            if (thing.shortId() === framework.shortId()) {\n                // delete framework\n                window.repo.deleteRegistered(framework, function(success) {\n                    me.spitEvent(\"frameworkDeleted\", framework.shortId(), \"editFrameworkSection\");\n                    // Delete the framework, delete all non-used stuff.\n                    if (framework.competency != null) {\n                        for (var i = 0; i < framework.competency.length; i++) {\n                            me.conditionalDelete(framework.competency[i]);\n                        }\n                    }\n                    if (framework.relation != null) {\n                        for (var i = 0; i < framework.relation.length; i++) {\n                            me.conditionalDelete(framework.relation[i]);\n                        }\n                    }\n                    if (framework.level != null) {\n                        for (var i = 0; i < framework.level.length; i++) {\n                            me.conditionalDelete(framework.level[i]);\n                        }\n                    }\n                    me.$store.commit('editor/framework', null);\n                    if (me.importType) {\n                        // Calling function from import page\n                        me.$store.commit('app/importFramework', null);\n                    } else {\n                        me.$router.push({name: \"frameworks\"});\n                    }\n                }, appLog);\n            } else {\n                // Delete competency and relations\n                var initialCompetencies = framework.competency ? framework.competency.slice() : null;\n                var initialRelations = framework.relation ? framework.relation.slice() : null;\n                var initialLevels = framework.level ? framework.level.slice() : null;\n                this.$store.commit('editor/selectedCompetency', thing);\n                framework[\"schema:dateModified\"] = new Date().toISOString();\n                framework.removeCompetency(thing.shortId(), async function() {\n                    framework.removeLevel(thing.shortId());\n                    me.$store.commit('editor/addEditsToUndo', [\n                        {operation: \"delete\", obj: thing},\n                        {operation: \"update\", id: framework.shortId(), fieldChanged: [\"competency\", \"relation\", \"level\"], initialValue: [initialCompetencies, initialRelations, initialLevels], changedValue: [framework.competency, framework.relation, framework.level]}\n                    ]);\n                    me.conditionalDelete(thing.shortId());\n                    me.spitEvent(\"competencyDeleted\", thing.shortId(), \"editFrameworkSection\");\n                    me.$store.commit('editor/selectedCompetency', null);\n                    var frameworkToSave = framework;\n                    if (me.$store.state.editor.private === true && EcEncryptedValue.encryptOnSaveMap[framework.id] !== true) {\n                        frameworkToSave = await EcEncryptedValue.toEncryptedValue(framework);\n                    }\n                    window.repo.saveTo(frameworkToSave, function() {\n                        me.$store.commit('editor/framework', framework);\n                    }, appError);\n                }, appLog);\n            }\n        }\n    }\n};"],"sourceRoot":""}