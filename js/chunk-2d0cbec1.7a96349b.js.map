{"version":3,"sources":["webpack:///./src/lode/components/AssertionEditor.vue?f32f","webpack:///src/lode/components/AssertionEditor.vue","webpack:///./src/lode/components/AssertionEditor.vue?7181","webpack:///./src/lode/components/AssertionEditor.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","class","canAssertion","attrs","loading","on","handleCanClick","canButtonIcon","_v","_s","canButtonText","cannotAssertion","handleCannotClick","cantButtonIcon","cantButtonText","handleBadgeClick","_e","viewBadge","directives","name","rawName","value","expression","reasonPlaceholder","domProps","$event","type","indexOf","_k","keyCode","key","handleEvidenceAssertion","apply","arguments","target","composing","assertionText","evidenceExplanation","_l","evidenceThing","index","url","text","handleUnevidenceAssertion","original","assertionsByOthers","length","item","uri","id","staticRenderFns","appError","eah","EcAsyncHelper","each","component"],"mappings":"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","file":"js/chunk-2d0cbec1.7a96349b.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"assertions-group\"},[_c('div',{staticClass:\"assertions-buttons\"},[_c('div',{staticClass:\"left-buttons\"},[_c('div',{staticClass:\"button is-text\",class:{'active': _vm.canAssertion},attrs:{\"data-id\":\"positiveAssertionButton\",\"disabled\":_vm.loading},on:{\"click\":_vm.handleCanClick}},[_c('i',{class:_vm.canButtonIcon}),_vm._v(\" \"+_vm._s(_vm.canButtonText)+\" \")]),_c('div',{staticClass:\"button is-text\",class:{'active': _vm.cannotAssertion},attrs:{\"data-id\":\"negativeAssertionButton\",\"disabled\":_vm.loading},on:{\"click\":_vm.handleCannotClick}},[_c('i',{class:_vm.cantButtonIcon}),_vm._v(\" \"+_vm._s(_vm.cantButtonText)+\" \")])]),_c('div',{staticClass:\"right-button\"},[(_vm.canAssertion)?_c('div',{staticClass:\"button is-text\",attrs:{\"data-id\":\"badgeButton\",\"disabled\":_vm.loading},on:{\"click\":_vm.handleBadgeClick}},[(_vm.badgeExists)?[_c('span',{staticClass:\"text-icon\"},[_vm._v(\"-\")]),_vm._v(\" Remove Badge \")]:[_c('span',{staticClass:\"text-icon\"},[_vm._v(\"+\")]),_vm._v(\" Add Badge \")]],2):_vm._e(),(_vm.badgeExists)?_c('div',{staticClass:\"button is-text\",attrs:{\"data-id\":\"viewBadgeButton\"},on:{\"click\":_vm.viewBadge}},[_vm._v(\" View Badge \")]):_vm._e()])]),_c('div',{staticClass:\"assertions-input\"},[(_vm.assertionExists)?_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.assertionText),expression:\"assertionText\"}],staticClass:\"input is-narrow\",attrs:{\"disabled\":_vm.loading,\"type\":\"text\",\"placeholder\":_vm.reasonPlaceholder},domProps:{\"value\":(_vm.assertionText)},on:{\"keyup\":function($event){if(!$event.type.indexOf('key')&&_vm._k($event.keyCode,\"enter\",13,$event.key,\"Enter\")){ return null; }return _vm.handleEvidenceAssertion.apply(null, arguments)},\"input\":function($event){if($event.target.composing){ return; }_vm.assertionText=$event.target.value}}}):_vm._e()]),(_vm.evidenceExplanation && (_vm.assertionExists))?_c('small',{staticClass:\"assertions-evidence\"},[_c('hr'),_c('ul',_vm._l((_vm.evidenceExplanation),function(evidenceThing,index){return _c('li',{key:index,attrs:{\"data-id\":\"evidenceElement\"}},[(evidenceThing.url)?_c('a',{attrs:{\"href\":evidenceThing.url,\"target\":\"_blank\"}},[_vm._v(\" \"+_vm._s(evidenceThing.text)+\" \")]):_c('span',[_vm._v(_vm._s(evidenceThing.text))]),_c('div',{staticClass:\"button is-text\",attrs:{\"data-id\":\"removeEvidenceButton\"},on:{\"click\":function($event){return _vm.handleUnevidenceAssertion(evidenceThing.original)}}},[_c('i',{staticClass:\"fas fa-times\"})])])}),0)]):_vm._e(),(_vm.assertionsByOthers && _vm.assertionsByOthers.length > 0)?_c('div',{staticClass:\"assertions-others\"},_vm._l((_vm.assertionsByOthers),function(item){return _c('Assertion',{key:_vm.uri+item.id,attrs:{\"uri\":item.id,\"title\":\"Assertion from elsewhere\"}})}),1):_vm._e()])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n    <div\n        class=\"assertions-group\">\n        <div class=\"assertions-buttons\">\n            <div class=\"left-buttons\">\n                <div\n                    data-id=\"positiveAssertionButton\"\n                    class=\"button is-text\"\n                    :disabled=\"loading\"\n                    :class=\"{'active': canAssertion}\"\n                    @click=\"handleCanClick\">\n                    <i :class=\"canButtonIcon\" />\n                    {{ canButtonText }}\n                </div>\n                <div\n                    data-id=\"negativeAssertionButton\"\n                    class=\"button is-text\"\n                    :disabled=\"loading\"\n                    :class=\"{'active': cannotAssertion}\"\n                    @click=\"handleCannotClick\">\n                    <i :class=\"cantButtonIcon\" />\n                    {{ cantButtonText }}\n                </div>\n            </div>\n            <div class=\"right-button\">\n                <div\n                    data-id=\"badgeButton\"\n                    class=\"button is-text\"\n                    :disabled=\"loading\"\n                    v-if=\"canAssertion\"\n                    @click=\"handleBadgeClick\">\n                    <template v-if=\"badgeExists\">\n                        <span class=\"text-icon\">-</span> Remove Badge\n                    </template>\n                    <template v-else>\n                        <span class=\"text-icon\">+</span> Add Badge\n                    </template>\n                </div>\n                <div\n                    data-id=\"viewBadgeButton\"\n                    class=\"button is-text\"\n                    @click=\"viewBadge\"\n                    v-if=\"badgeExists\">\n                    View Badge\n                </div>\n            </div>\n        </div>\n        <div class=\"assertions-input\">\n            <input\n                :disabled=\"loading\"\n                class=\"input is-narrow\"\n                type=\"text\"\n                v-if=\"assertionExists\"\n                @keyup.enter=\"handleEvidenceAssertion\"\n                v-model=\"assertionText\"\n                :placeholder=\"reasonPlaceholder\">\n        </div>\n        <small\n            class=\"assertions-evidence\"\n            v-if=\"evidenceExplanation && (assertionExists)\">\n            <hr>\n            <ul>\n                <li\n                    data-id=\"evidenceElement\"\n                    v-for=\"(evidenceThing, index) in evidenceExplanation\"\n                    :key=\"index\">\n                    <a\n                        v-if=\"evidenceThing.url\"\n                        :href=\"evidenceThing.url\"\n                        target=\"_blank\">\n                        {{ evidenceThing.text }}\n                    </a>\n                    <span v-else>{{ evidenceThing.text }}</span>\n                    <div\n                        data-id=\"removeEvidenceButton\"\n                        class=\"button is-text\"\n                        @click=\"handleUnevidenceAssertion(evidenceThing.original)\">\n                        <i class=\"fas fa-times\" />\n                    </div>\n                </li>\n            </ul>\n        </small>\n        <div\n            v-if=\"assertionsByOthers && assertionsByOthers.length > 0\"\n            class=\"assertions-others\">\n            <Assertion\n                v-for=\"item in assertionsByOthers\"\n                :key=\"uri+item.id\"\n                :uri=\"item.id\"\n                title=\"Assertion from elsewhere\" />\n        </div>\n    </div>\n</template>\n<script>\n\nexport default {\n    name: 'AssertionEditor',\n    props: {\n        uri: String\n    },\n    components: {\n        Assertion: () => import('./Assertion.vue')\n    },\n    data: function() {\n        return {\n            loading: false,\n            canAssertion: false,\n            cannotAssertion: false,\n            assertionText: '',\n            badge: false,\n            badgeLink: null,\n            repo: window.repo,\n            competentStateEah: null,\n            evidence: null,\n            evidenceExplanation: null,\n            assertionsByOthers: [],\n            iconAssertion: true\n        };\n    },\n    created: function() {},\n    mounted: function() {\n        this.initAssertions();\n    },\n    computed: {\n        badgeExists: function() {\n            return this.badge;\n        },\n        assertionExists: function() {\n            return this.canAssertion || this.cannotAssertion;\n        },\n        assertions: function() {\n            let assertions = this.$store.getters['editor/assertions'].filter((a) => {\n                return a.competency === EcRemoteLinkedData.trimVersionFromUrl(this.uri);\n            });\n            return assertions;\n        },\n        me: function() {\n            return this.$store.getters['editor/getMe'];\n        },\n        subject: function() {\n            return this.$store.getters['editor/getSubject'];\n        },\n        otherClaimsPhrase: function() {\n            return \"Others have made claims about \" + (this.subject === this.me ? \"you\" : (this.subjectPerson === null ? \"them\" : this.subjectPerson)) + \". Click to expand.\";\n        },\n        reasonPlaceholder: function() {\n            if (this.me === this.subject) {\n                return 'do this because I...';\n            } else {\n                return 'do this because they...';\n            }\n        },\n        canButtonText: function() {\n            if (this.me === this.subject) {\n                return 'I can';\n            } else {\n                return 'They can';\n            }\n        },\n        cantButtonText: function() {\n            if (this.me === this.subject) {\n                return \"I can't\";\n            } else {\n                return \"They can't\";\n            }\n        },\n        canButtonIcon: function() {\n            if (this.canAssertion) {\n                return 'far fa-check-circle';\n            } else {\n                return 'far fa-circle';\n            }\n        },\n        cantButtonIcon: function() {\n            if (this.cannotAssertion) {\n                return 'far fa-check-square';\n            } else {\n                return 'far fa-square';\n            }\n        },\n        subjectPerson: function() {\n            return this.$store.getters['editor/getSubjectName'];\n        }\n    },\n    methods: {\n        initAssertions: function() {\n            this.canAssertion = false;\n            this.cannotAssertion = false;\n            this.assertionText = '';\n            this.badge = false;\n            this.badgeLink = null;\n            this.competentStateEah = null;\n            this.evidence = null;\n            this.evidenceExplanation = null;\n            this.assertionsByOthers = [];\n            this.iconAssertion = true;\n\n            if (this.competentStateEah != null) {\n                this.competentStateEah.stop();\n            }\n            this.competentStateEah = new EcAsyncHelper();\n            this.competentStateEah.each(this.assertions, (assertion, callback) => {\n                if (assertion !== null) {\n                    assertion.getSubjectAsync((subject) => {\n                        if (this.subject === subject.toPem()) {\n                            assertion.getAgentAsync((agent) => {\n                                if (this.me === agent.toPem()) {\n                                    var negativeCallback = () => {\n                                        if (assertion.negative != null) {\n                                            assertion.getNegativeAsync((negative) => {\n                                                if (negative) {\n                                                    this.canAssertion = false;\n                                                    this.cannotAssertion = true;\n                                                    this.badge = false;\n                                                } else {\n                                                    this.badge = assertion.hasReader(this.$store.getters['editor/badgePk']);\n                                                    this.badgeLink = EcRemote.urlAppend(this.repo.selectedServer, \"badge/assertion/\") + assertion.getGuid();\n                                                    this.canAssertion = true;\n                                                    this.cannotAssertion = false;\n                                                }\n                                                callback();\n                                            }, callback);\n                                        } else {\n                                            this.canAssertion = true;\n                                            this.cannotAssertion = false;\n                                            this.badge = assertion.hasReader(this.$store.getters['editor/badgePk']);\n                                            this.badgeLink = EcRemote.urlAppend(this.repo.selectedServer, \"badge/assertion/\") + assertion.getGuid();\n                                            callback();\n                                        }\n                                    };\n                                    if (assertion.evidence != null) {\n                                        assertion.getEvidencesAsync((evidences) => {\n                                            this.evidence = evidences;\n                                            this.$store.dispatch('editor/computeBecause', this.evidence).then((because) => {\n                                                this.evidenceExplanation = because;\n                                            });\n                                            negativeCallback();\n                                        }, callback);\n                                    } else {\n                                        this.evidence = null;\n                                        this.evidenceExplanation = null;\n                                        negativeCallback();\n                                    }\n                                } else {\n                                    this.assertionsByOthers.push(assertion);\n                                    callback();\n                                }\n                            }, callback);\n                        } else {\n                            callback();\n                        }\n                    }, callback);\n                } else {\n                    callback();\n                }\n            }, () => {\n                // TODO\n            });\n        },\n        handleEvidenceAssertion: async function() {\n            this.loading = true;\n            try {\n                await this.evidenceAssertion();\n            } catch (e) {\n                appError(e);\n            } finally {\n                this.loading = false;\n            }\n        },\n        handleUnevidenceAssertion: async function(url) {\n            this.loading = true;\n            try {\n                await this.unevidenceAssertion(url);\n            } catch (e) {\n                appError(e);\n            } finally {\n                this.loading = false;\n            }\n        },\n        handleBadgeClick: async function() {\n            this.loading = true;\n            try {\n                if (this.badge) {\n                    await this.revokeBadge();\n                } else {\n                    await this.generateBadge();\n                }\n            } catch (e) {\n                appError(e);\n            } finally {\n                this.loading = false;\n            }\n        },\n        handleCanClick: async function() {\n            this.loading = true;\n            try {\n                if (this.canAssertion) {\n                    await this.revokeBadge();\n                    await this.revokeCanAssertion();\n                } else {\n                    if (this.cannotAssertion) {\n                        await this.revokeCannotAssertion();\n                    }\n                    await this.generateCanAssertion();\n                }\n            } catch (e) {\n                appError(e);\n            } finally {\n                this.loading = false;\n            }\n        },\n        handleCannotClick: async function() {\n            this.loading = true;\n            try {\n                if (this.cannotAssertion) {\n                    await this.revokeCannotAssertion();\n                } else {\n                    if (this.canAssertion) {\n                        await this.revokeBadge();\n                        await this.revokeCanAssertion();\n                    }\n                    await this.generateCannotAssertion();\n                }\n            } catch (e) {\n                appError(e);\n            } finally {\n                this.loading = false;\n            }\n        },\n        generateBadge: async function() {\n            return new Promise((resolve, reject) => {\n                EcCompetency.get(this.uri, (c) => {\n                    if (this.assertions.length === 0) {\n                        return;\n                    }\n                    var eah = new EcAsyncHelper();\n                    eah.each(this.assertions, (assertion, callback) => {\n                        if (c.isId(assertion.competency)) {\n                            assertion.getSubjectAsync((subject) => {\n                                if (this.subject === subject.toPem()) {\n                                    assertion.getAgentAsync((agent) => {\n                                        if (this.me === agent.toPem()) {\n                                            if (assertion.negative == null) {\n                                                assertion.addReader(this.$store.getters['editor/badgePk']);\n                                                EcRepository.save(assertion, () => {\n                                                    this.$store.commit('editor/addAssertion', assertion);\n                                                    this.badgeLink = EcRemote.urlAppend(this.repo.selectedServer, \"badge/assertion/\") + assertion.getGuid();\n                                                    this.badge = true;\n                                                    callback();\n                                                }, callback);\n                                            } else {\n                                                assertion.getNegativeAsync((negative) => {\n                                                    if (!negative) {\n                                                        assertion.addReader(this.$store.getters['editor/badgePk']);\n                                                        EcRepository.save(assertion, () => {\n                                                            this.$store.commit('editor/addAssertion', assertion);\n                                                            this.badgeLink = EcRemote.urlAppend(this.repo.selectedServer, \"badge/assertion/\") + assertion.getGuid();\n                                                            this.badge = true;\n                                                            callback();\n                                                        }, callback);\n                                                    } else {\n                                                        callback();\n                                                    }\n                                                }, callback);\n                                            }\n                                        } else {\n                                            callback();\n                                        }\n                                    }, callback);\n                                } else {\n                                    callback();\n                                }\n                            }, callback);\n                        } else {\n                            callback();\n                        }\n                    }, () => {\n                        resolve();\n                    });\n                }, reject);\n            });\n        },\n        viewBadge: function() {\n            window.open(this.badgeLink, '_blank');\n        },\n        revokeBadge: async function() {\n            return new Promise((resolve, reject) => {\n                EcCompetency.get(this.uri, (c) => {\n                    if (this.assertions.length === 0) {\n                        return;\n                    }\n                    var eah = new EcAsyncHelper();\n                    eah.each(this.assertions, (assertion, callback) => {\n                        if (c.isId(assertion.competency)) {\n                            assertion.getSubjectAsync((subject) => {\n                                if (this.subject === subject.toPem()) {\n                                    assertion.getAgentAsync((agent) => {\n                                        if (this.me === agent.toPem()) {\n                                            if (assertion.negative == null) {\n                                                assertion.removeReader(this.$store.getters['editor/badgePk']);\n                                                EcRepository.save(assertion, () => {\n                                                    this.$store.commit('editor/addAssertion', assertion);\n                                                    this.badgeLink = null;\n                                                    this.badge = false;\n                                                    callback();\n                                                }, callback);\n                                            } else {\n                                                assertion.getNegativeAsync((negative) => {\n                                                    if (!negative) {\n                                                        assertion.removeReader(this.$store.getters['editor/badgePk']);\n                                                        EcRepository.save(assertion, () => {\n                                                            this.$store.commit('editor/addAssertion', assertion);\n                                                            this.badgeLink = null;\n                                                            this.badge = false;\n                                                            callback();\n                                                        }, callback);\n                                                    } else {\n                                                        callback();\n                                                    }\n                                                }, callback);\n                                            }\n                                        } else {\n                                            callback();\n                                        }\n                                    }, callback);\n                                } else {\n                                    callback();\n                                }\n                            }, callback);\n                        } else {\n                            callback();\n                        }\n                    }, () => {\n                        resolve();\n                    });\n                }, reject);\n            });\n        },\n        revokeCanAssertion: function() {\n            return new Promise((resolve, reject) => {\n                EcCompetency.get(this.uri, (c) => {\n                    if (this.assertions.length === 0) {\n                        return;\n                    }\n                    var eah = new EcAsyncHelper();\n                    eah.each(this.assertions, (assertion, callback) => {\n                        if (c.isId(assertion.competency)) {\n                            assertion.getSubjectAsync((subject) => {\n                                if (this.subject === subject.toPem()) {\n                                    assertion.getAgentAsync((agent) => {\n                                        if (this.me === agent.toPem()) {\n                                            if (assertion.negative === null) {\n                                                EcRepository._delete(assertion, () => {\n                                                    this.$store.commit('editor/removeAssertion', assertion);\n                                                    this.canAssertion = false;\n                                                    callback();\n                                                }, callback);\n                                            } else {\n                                                assertion.getNegativeAsync((negative) => {\n                                                    if (!negative) {\n                                                        EcRepository._delete(assertion, () => {\n                                                            this.$store.commit('editor/removeAssertion', assertion);\n                                                            this.canAssertion = false;\n                                                            callback();\n                                                        }, callback);\n                                                    } else {\n                                                        callback();\n                                                    }\n                                                }, callback);\n                                            }\n                                        } else {\n                                            callback();\n                                        }\n                                    }, callback);\n                                } else {\n                                    callback();\n                                }\n                            }, callback);\n                        } else {\n                            callback();\n                        }\n                    }, () => {\n                        resolve();\n                    });\n                }, reject);\n            });\n        },\n        revokeCannotAssertion: function() {\n            return new Promise((resolve, reject) => {\n                EcCompetency.get(this.uri, (c) => {\n                    if (this.assertions.length === 0) {\n                        return;\n                    }\n                    var eah = new EcAsyncHelper();\n                    eah.each(this.assertions, (assertion, callback) => {\n                        if (c.isId(assertion.competency)) {\n                            assertion.getSubjectAsync((subject) => {\n                                if (this.subject === subject.toPem()) {\n                                    assertion.getAgentAsync((agent) => {\n                                        if (this.me === agent.toPem()) {\n                                            if (assertion.negative != null) {\n                                                assertion.getNegativeAsync((negative) => {\n                                                    if (negative) {\n                                                        EcRepository._delete(assertion, () => {\n                                                            this.$store.commit('editor/removeAssertion', assertion);\n                                                            this.cannotAssertion = false;\n                                                            callback();\n                                                        }, callback);\n                                                    } else {\n                                                        callback();\n                                                    }\n                                                }, callback);\n                                            }\n                                        } else callback();\n                                    }, callback);\n                                } else callback();\n                            }, callback);\n                        } else {\n                            callback();\n                        }\n                    }, () => {\n                        resolve();\n                    });\n                }, reject);\n            });\n        },\n        generateCanAssertion: function() {\n            var a = new EcAssertion();\n            a.generateId(this.repo.selectedServer);\n            a.addOwner(EcIdentityManager.default.ids[0].ppk.toPk());\n            // a.addReader(EcPk.fromPem(\"-----BEGIN PUBLIC KEY-----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAixq5WEp+F5HEJZj12N791JATM+vkVJuolfOq0KbqtZwiygPao12fnpTwZdRCmb/4O1n6PXkJJ1XbufAx6k7hGNyM1kTngbs743QuyzP15SmYcP9l9FluL9ISvIECt1eHo4sSKdaKxLRguOj79HjZXtFg3UDIhvvLBVqPQm5d5OQ1OPgu4WzL4GN7hYwK6PYJf2zJjxs9vEQ6agrvpAZI+Rm1DT5x3i4xtcB+Mip473Xe+6IPoRmJ/NqzcP3c0xBf6xV1GDBBIQIaRRkIJgoAb/k0fb+Hl0uXnKxcSm86nYk4Kq5GSbeZ+G+B3rrnQfXbLZnle6nTj1YdAOErOKKi2wIDAQAB-----END PUBLIC KEY-----\")); //Eduworks Researcher\n            for (var i = 0; i < EcIdentityManager.default.contacts.length; i++) {\n                a.addReader(EcIdentityManager.default.contacts[i].pk);\n            }\n            a.setSubjectAsync(EcPk.fromPem(this.subject), () => {\n                a.setAgentAsync(EcPk.fromPem(this.me), () => {\n                    a.setCompetency(EcRemoteLinkedData.trimVersionFromUrl(this.uri));\n                    a.setAssertionDateAsync(Date.now(), () => {\n                        a.setExpirationDateAsync(Date.now() + 1000 * 60 * 60 * 24 * 365, () => {\n                            a.setNegativeAsync(false, () => {\n                                a.setConfidence(1.0);\n                                var evidences = [];\n                                // Go find viewActions on related resources to attach to the assertion.\n                                if (this.me === this.subject) {\n                                    repo.searchWithParams(\n                                        \"@type:CreativeWork AND educationalAlignment.targetUrl:\\\"\" + EcRemoteLinkedData.trimVersionFromUrl(this.uri) + \"\\\"\",\n                                        {size: 5000},\n                                        null,\n                                        (resources) => {\n                                            new EcAsyncHelper().each(\n                                                resources,\n                                                (resource, resourceCallback) => {\n                                                    repo.searchWithParams(\n                                                        \"@type:ChooseAction AND object:\\\"\" + resource.shortId() + \"\\\" AND \\\\*owner:\\\"\" + this.subject + \"\\\"\",\n                                                        {size: 5000},\n                                                        null,\n                                                        (views) => {\n                                                            for (var i = 0; i < views.length; i++) {\n                                                                evidences.push(views[i].shortId());\n                                                            }\n                                                            resourceCallback();\n                                                        },\n                                                        resourceCallback\n                                                    );\n                                                }, (resources) => {\n                                                    if (evidences.length > 0) {\n                                                        a.setEvidenceAsync(evidences, () => {\n                                                            EcRepository.save(a, () => {\n                                                                this.$store.commit('editor/addAssertion', a);\n                                                                this.canAssertion = true;\n                                                            }, appError);\n                                                        }, appError);\n                                                    } else {\n                                                        EcRepository.save(a, () => {\n                                                            this.$store.commit('editor/addAssertion', a);\n                                                            this.canAssertion = true;\n                                                        }, appError);\n                                                    }\n                                                }\n                                            );\n                                        },\n                                        appError\n                                    );\n                                } else {\n                                    EcRepository.save(a, () => {\n                                        this.$store.commit('editor/addAssertion', a);\n                                        this.canAssertion = true;\n                                    }, appError);\n                                }\n                            }, appError); // This is an assertion that an individual *can* do something, not that they *cannot*.\n                        }, appError); // UTC Milliseconds, 365 days in the future.\n                    }, appError); // UTC Milliseconds\n                }, appError);\n            }, appError);\n        },\n        generateCannotAssertion: function() {\n            var a = new EcAssertion();\n            a.generateId(this.repo.selectedServer);\n            a.addOwner(EcIdentityManager.default.ids[0].ppk.toPk());\n            for (var i = 0; i < EcIdentityManager.default.contacts.length; i++) {\n                a.addReader(EcIdentityManager.default.contacts[i].pk);\n            }\n            a.setSubjectAsync(EcPk.fromPem(this.subject), () => {\n                a.setAgentAsync(EcPk.fromPem(this.me), () => {\n                    a.setCompetency(EcRemoteLinkedData.trimVersionFromUrl(this.uri));\n                    a.setAssertionDateAsync(Date.now(), () => {\n                        a.setExpirationDateAsync(Date.now() + 1000 * 60 * 60 * 24 * 365, () => {\n                            a.setNegativeAsync(true, () => {\n                                a.setConfidence(1.0);\n                                EcRepository.save(a, () => {\n                                    this.$store.commit('editor/addAssertion', a);\n                                    this.cannotAssertion = true;\n                                }, appError);\n                            }, appError); // This is an assertion that an individual *cannot* do something, not that they *can*.\n                        }, appError); // UTC Milliseconds, 365 days in the future.\n                    }, appError); // UTC Milliseconds\n                }, appError);\n            }, appError);\n        },\n        evidenceAssertion: async function() {\n            return new Promise((resolve, reject) => {\n                EcCompetency.get(this.uri, (c) => {\n                    if (this.assertions.length === 0) {\n                        return;\n                    }\n                    var eah = new EcAsyncHelper();\n                    eah.each(this.assertions, (assertion, callback) => {\n                        if (c.isId(assertion.competency)) {\n                            assertion.getSubjectAsync((subject) => {\n                                if (this.subject === subject.toPem()) {\n                                    assertion.getAgentAsync((agent) => {\n                                        if (this.me === agent.toPem()) {\n                                            assertion.getEvidencesAsync((evidences) => {\n                                                EcArray.setAdd(evidences, this.assertionText);\n                                                this.assertionText = \"\";\n                                                assertion.setEvidence(evidences);\n                                                EcRepository.save(assertion, () => {\n                                                    this.$store.commit('editor/addAssertion', assertion);\n                                                    this.$store.dispatch('editor/computeBecause', evidences).then((because) => {\n                                                        this.evidenceExplanation = because;\n                                                    });\n                                                    callback();\n                                                }, callback);\n                                            }, callback);\n                                        } else {\n                                            callback();\n                                        }\n                                    }, callback);\n                                } else {\n                                    callback();\n                                }\n                            }, callback);\n                        } else {\n                            callback();\n                        }\n                    }, () => {\n                        resolve();\n                    });\n                }, reject);\n            });\n        },\n        unevidenceAssertion: async function(url) {\n            return new Promise((resolve, reject) => {\n                EcCompetency.get(this.uri, (c) => {\n                    if (this.assertions.length === 0) {\n                        return;\n                    }\n                    var eah = new EcAsyncHelper();\n                    eah.each(this.assertions, (assertion, callback) => {\n                        if (c.isId(assertion.competency)) {\n                            assertion.getSubjectAsync((subject) => {\n                                if (this.subject === subject.toPem()) {\n                                    assertion.getAgentAsync((agent) => {\n                                        if (this.me === agent.toPem()) {\n                                            assertion.getEvidencesAsync((evidences) => {\n                                                EcArray.setRemove(evidences, url);\n                                                assertion.setEvidence(evidences);\n                                                EcRepository.save(assertion, () => {\n                                                    this.$store.commit('editor/addAssertion', assertion);\n                                                    this.$store.dispatch('editor/computeBecause', evidences).then((because) => {\n                                                        this.evidenceExplanation = because;\n                                                    });\n                                                    callback();\n                                                }, callback);\n                                            }, callback);\n                                        } else {\n                                            callback();\n                                        }\n                                    }, callback);\n                                } else {\n                                    callback();\n                                }\n                            }, callback);\n                        } else {\n                            callback();\n                        }\n                    }, () => {\n                        resolve();\n                    });\n                }, reject);\n            });\n        }\n    },\n    watch: {\n        subject: function() {\n            this.initAssertions();\n        }\n    }\n};\n</script>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./AssertionEditor.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./AssertionEditor.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./AssertionEditor.vue?vue&type=template&id=256c6a88&\"\nimport script from \"./AssertionEditor.vue?vue&type=script&lang=js&\"\nexport * from \"./AssertionEditor.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}