{"version":3,"sources":["webpack:///./src/views/progressionModel/ProgressionHierarchy.vue?5809","webpack:///./src/views/progressionModel/ProgressionHierarchy.vue?4c89","webpack:///src/views/progressionModel/ProgressionHierarchy.vue","webpack:///./src/views/progressionModel/ProgressionHierarchy.vue?aef6","webpack:///./src/views/progressionModel/ProgressionHierarchy.vue","webpack:///./src/mixins/competencyEdits.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","class","dragging","canEdit","view","queryParams","select","attrs","directives","name","rawName","value","expression","domProps","Array","isArray","selectAll","_i","on","$event","$$a","$$el","target","$$c","checked","$$v","$$i","concat","slice","_e","expanded","$emit","selectedArray","_v","_s","selectButtonText","multipleSelected","addingNode","_m","addProgressionModelOrLevelText","canCopyOrCut","deleteSelected","loading","onClickCreateNew","cutClick","canPaste","pasteClick","computeHierarchy","setPrecedence","cancelImport","$store","dispatch","openFramework","path","query","_b","isDraggable","beginDrag","endDrag","model","callback","hierarchy","dragOptions","_l","item","index","key","obj","id","subview","children","profile","highlightList","newFramework","container","properties","shiftKey","arrowKey","onCreateNewNode","handleMountingNode","add","move","onDraggableCheck","staticRenderFns","props","containerType","repo","selectMode","containerTypeGet","viewOnly","type","default","doneDragging","data","structure","once","controlOnStart","filter","dragIcon","delay","disabled","ghostClass","chosenClass","dragClass","scrollSensitivity","forceFallback","components","HierarchyNode","draggable","mixins","computed","addAnother","appLog","precache","me","appError","recomputeHierarchy","framework","watch","handler","deep","mounted","window","beforeDestroy","methods","copyClick","keydown","e","keyup","startTime","hierarchyTimeout","removePrecedence","r","i","EcConcept","c","resolve","setOrder","printPrettyStructure","output","addChildren","j","subC","deletePrecedence","reorder","changesMade","numChangesMade","unorderedStructure","next","c2","reorderChildren","childChangesMade","numChildChangesMade","subC1","subC2","setProrgressionOrder","sibling","parentStructure","node1Index","node2Index","node2","property","node1","nodeParent","findSiblingOfNode","niblingParent","nibling","niblingAncestor","findSubStructure","node","parentId","EcRemoteLinkedData","subStructure","toId","toLast","foo","setPrecedes","precedes","setChildrenPrecedes","subContainer","findPrecedes","foundSourceNode","findChildrenPrecedes","foundChildSourceNode","setPrecededBy","precededBy","setChildrenPrecededBy","findPrecededBy","findChildrenPrecededBy","saveObject","fromContainerId","toContainerId","EcRepository","initialValue","fromIndex","toIndex","operation","fieldChanged","EcEncryptedValue","moveComp","fromContainer","fromProperty","fromProperty2","toContainer","toProperty","toProperty2","fromPropInitialValue","fromProp2InitialValue","toPropInitialValue","toProp2InitialValue","EcArray","owner","reader","containerId","parent","EcConceptScheme","f","params","frameworkId","deleteLevel","deleteLevelInner","editsToUndo","level","component","common","removeObject","thing","thisFramework","getters","initialCompetencies","competency","initialRelations","relation","initialLevels","Date","toISOString","removeCompetency","shortId","commit","state","editor","private","encryptOnSaveMap","_context","toEncryptedValue","saveTo","deleteObject","deleteRegistered","success","spitEvent","length","conditionalDelete","importType","$router","push","removeLevel","changedValue","frameworkToSave","_context2"],"mappings":"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","file":"js/chunk-1cef0344.812c8a07.js","sourcesContent":["import mod from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ProgressionHierarchy.vue?vue&type=style&index=0&lang=scss&\"; export default mod; export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--9-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--9-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--9-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--9-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ProgressionHierarchy.vue?vue&type=style&index=0&lang=scss&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"lode__hierarchy\",class:{'is-dragging': _vm.dragging}},[_c('div',{staticClass:\"hierarchy-buttons columns is-gapless is-paddingless is-mobile is-marginless is-paddingless\"},[((_vm.canEdit && _vm.view !== 'import') || _vm.queryParams.select)?_c('div',{staticClass:\"column is-narrow\",attrs:{\"id\":\"check-radio-all-column\"}},[_c('div',{staticClass:\"field\"},[_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.selectAll),expression:\"selectAll\"}],staticClass:\"is-checkradio\",attrs:{\"id\":\"selectAllCheckbox\",\"type\":\"checkbox\",\"name\":\"selectAllCheckbox\"},domProps:{\"checked\":Array.isArray(_vm.selectAll)?_vm._i(_vm.selectAll,null)>-1:(_vm.selectAll)},on:{\"change\":function($event){var $$a=_vm.selectAll,$$el=$event.target,$$c=$$el.checked?(true):(false);if(Array.isArray($$a)){var $$v=null,$$i=_vm._i($$a,$$v);if($$el.checked){$$i<0&&(_vm.selectAll=$$a.concat([$$v]))}else{$$i>-1&&(_vm.selectAll=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{_vm.selectAll=$$c}}}}),_c('label',{attrs:{\"for\":\"selectAllCheckbox\"}})])]):_vm._e(),_c('div',{staticClass:\"column is-narrow\"},[(_vm.expanded)?_c('div',{staticClass:\"icon is-vcentered\",on:{\"click\":function($event){_vm.expanded=false}}},[_c('i',{staticClass:\"fa fa-caret-down has-text-primary is-size-2\"})]):(!_vm.expanded)?_c('div',{staticClass:\"icon is-vcentered\",on:{\"click\":function($event){_vm.expanded=true}}},[_c('i',{staticClass:\"fa fa-caret-right has-text-primary is-size-2\"})]):_c('div',{staticClass:\"icon is-vcentered\"},[_c('i',{staticClass:\"fa fa-circle is-size-6 has-text-light\"})]),(_vm.selectButtonText)?_c('div',{staticClass:\"button is-outlined is-primary\",on:{\"click\":function($event){return _vm.$emit('select-button-click', _vm.selectedArray)}}},[_vm._v(\" \"+_vm._s(_vm.selectButtonText)+\" \")]):_vm._e()]),_c('div',{staticClass:\"column is-narrow\"},[_c('div',{staticClass:\"buttons\"},[(_vm.multipleSelected && !_vm.addingNode && _vm.view !== 'import' && _vm.canEdit)?_c('div',{staticClass:\"button is-outlined is-primary\",on:{\"click\":function($event){return _vm.$emit('edit-multiple-event')}}},[_vm._m(0),_c('span',[_vm._v(\" Edit multiple \")])]):_vm._e(),(!_vm.addingNode && _vm.canEdit && !_vm.multipleSelected)?_c('div',{staticClass:\"button is-outlined is-primary\",on:{\"click\":function($event){_vm.addingNode = true;}}},[_vm._m(1),_c('span',[_vm._v(\" \"+_vm._s(_vm.addProgressionModelOrLevelText)+\" \")])]):_vm._e(),(!_vm.addingNode && _vm.canEdit && !_vm.multipleSelected && _vm.canCopyOrCut)?_c('div',{staticClass:\"button is-outlined is-danger\",on:{\"click\":_vm.deleteSelected}},[_vm._m(2),_c('span',[_vm._v(\" delete item \")])]):_vm._e(),(_vm.addingNode)?_c('div',{staticClass:\"button is-outlined is-dark \",on:{\"click\":function($event){_vm.addingNode = false;}}},[_vm._m(3),_c('span',[_vm._v(\"cancel\")])]):_vm._e(),(_vm.addingNode)?_c('div',{staticClass:\"button is-outlined is-primary \",class:{'is-loading': _vm.loading},on:{\"click\":_vm.onClickCreateNew}},[_vm._m(4),_c('span',[_vm._v(\" create new \")])]):_vm._e(),(_vm.view === 'framework' || _vm.view === 'concept')?_c('div',{staticClass:\"button is-outlined\",class:_vm.canCopyOrCut ? 'is-primary' : 'is-disabled',attrs:{\"title\":\"Cut progression level\",\"disabled\":!_vm.canCopyOrCut},on:{\"click\":_vm.cutClick}},[_vm._m(5)]):_vm._e(),(_vm.view === 'framework' || _vm.view === 'concept')?_c('div',{staticClass:\"button is-outlined \",class:_vm.canPaste ? 'is-primary' : 'is-disabled',attrs:{\"disabled\":!_vm.canPaste,\"title\":\"Paste progression level\"},on:{\"click\":_vm.pasteClick}},[_vm._m(6)]):_vm._e(),(_vm.view === 'concept')?_c('div',{staticClass:\"button is-outlined is-primary \",attrs:{\"title\":\"Reorder by Precedence\"},on:{\"click\":function($event){return _vm.computeHierarchy(true)}}},[_c('span',[_vm._v(\" reorder by precedence \")])]):_vm._e(),(_vm.view === 'concept')?_c('div',{staticClass:\"button is-outlined is-primary \",attrs:{\"title\":\"Set Precedence\"},on:{\"click\":_vm.setPrecedence}},[_c('span',[_vm._v(\" set precedence by order \")])]):_vm._e()])]),(_vm.view === 'import')?_c('div',{staticClass:\"column\"},[_c('div',{staticClass:\"buttons is-right\"},[_c('div',{staticClass:\"buttons is-right\"},[_c('div',{staticClass:\" button is-light is-pulled-right is-dark is-outlined\",on:{\"click\":_vm.cancelImport}},[_c('span',[_vm._v(\" Cancel \")]),_vm._m(7)]),_c('div',{staticClass:\"button is-dark is-outlined is-pulled-right\",on:{\"click\":function($event){return _vm.$store.dispatch('app/clearImport')}}},[_c('span',[_vm._v(\" import again \")]),_vm._m(8)]),_c('div',{staticClass:\"button is-dark is-outlined is-pulled-right\",on:{\"click\":_vm.openFramework}},[_c('span',[_vm._v(\"view in editor\")]),_vm._m(9)]),_c('router-link',{staticClass:\"button is-primary is-outlined is -pulled-right\",attrs:{\"to\":{path: '/progressionLevels', query: _vm.queryParams}}},[_c('span',[_vm._v(\" Done \")]),_c('span',{staticClass:\"icon\"},[_c('i',{staticClass:\"fa fa-home\"})])])],1)])]):_vm._e()]),(_vm.hierarchy)?[_c('draggable',_vm._b({staticClass:\"lode__hierarchy-ul\",attrs:{\"tag\":\"ul\",\"disabled\":_vm.canEdit !== true || !_vm.isDraggable,\"group\":{ name: 'test' },\"handle\":\".handle\"},on:{\"start\":_vm.beginDrag,\"end\":_vm.endDrag},model:{value:(_vm.hierarchy),callback:function ($$v) {_vm.hierarchy=$$v},expression:\"hierarchy\"}},'draggable',_vm.dragOptions,false),_vm._l((_vm.hierarchy),function(item,index){return _c('HierarchyNode',{key:item.obj.id,staticClass:\"lode__hierarchy-li\",attrs:{\"depth\":1,\"view\":_vm.view,\"subview\":_vm.subview,\"obj\":item.obj,\"dragging\":_vm.dragging,\"canEdit\":_vm.canEdit,\"hasChild\":item.children,\"profile\":_vm.profile,\"highlightList\":_vm.highlightList,\"selectAll\":_vm.selectAll,\"newFramework\":_vm.newFramework,\"index\":index,\"frameworkEditable\":_vm.canEdit,\"selectedArray\":_vm.selectedArray,\"parentStructure\":_vm.hierarchy,\"parent\":_vm.container,\"properties\":_vm.properties,\"expandAll\":_vm.expanded==true,\"propagateParentChecked\":false,\"shiftKey\":_vm.shiftKey,\"arrowKey\":_vm.arrowKey},on:{\"create-new-node-event\":_vm.onCreateNewNode,\"mounting-node\":_vm.handleMountingNode,\"add\":_vm.add,\"begin-drag\":_vm.beginDrag,\"move\":_vm.move,\"select\":_vm.select,\"draggable-check\":_vm.onDraggableCheck}})}),1)]:_vm._e()],2)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',{staticClass:\"icon\"},[_c('i',{staticClass:\"fa fa-cog\"})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',{staticClass:\"icon\"},[_c('i',{staticClass:\"fa fa-plus-circle\"})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',{staticClass:\"icon\"},[_c('i',{staticClass:\"fa fa-plus-circle\"})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',{staticClass:\"icon\"},[_c('i',{staticClass:\"fa fa-times\"})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',{staticClass:\"icon\"},[_c('i',{staticClass:\"fa fa-plus\"})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',{staticClass:\"icon\"},[_c('i',{staticClass:\"fas handle fa-cut\"})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',{staticClass:\"icon\"},[_c('i',{staticClass:\"fa fa-paste\"})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',{staticClass:\"icon\"},[_c('i',{staticClass:\"fa fa-times-circle\"})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',{staticClass:\"icon\"},[_c('i',{staticClass:\"fa fa-redo-alt\"})])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('span',{staticClass:\"icon\"},[_c('i',{staticClass:\"fa fa-edit\"})])}]\n\nexport { render, staticRenderFns }","<template>\n    <div\n        class=\"lode__hierarchy\"\n        :class=\"{'is-dragging': dragging}\">\n        <div\n            class=\"hierarchy-buttons columns is-gapless is-paddingless is-mobile is-marginless is-paddingless\">\n            <!-- CONTROLS FOR SELECT: ENABLED MULTI EDIT  -->\n            <div\n                v-if=\"(canEdit && view !== 'import') || queryParams.select\"\n                id=\"check-radio-all-column\"\n                class=\"column is-narrow\">\n                <div\n                    class=\"field\">\n                    <input\n                        class=\"is-checkradio\"\n                        id=\"selectAllCheckbox\"\n                        type=\"checkbox\"\n                        name=\"selectAllCheckbox\"\n                        v-model=\"selectAll\">\n                    <label for=\"selectAllCheckbox\" />\n                </div>\n            </div>\n            <!-- CONTROLS FOR EXPAND  -->\n            <div class=\"column is-narrow\">\n                <div\n                    v-if=\"expanded\"\n                    class=\"icon is-vcentered\"\n                    @click=\"expanded=false\">\n                    <i class=\"fa fa-caret-down has-text-primary is-size-2\" />\n                </div>\n                <div\n                    v-else-if=\"!expanded\"\n                    class=\"icon is-vcentered\"\n                    @click=\"expanded=true\">\n                    <i class=\"fa fa-caret-right has-text-primary is-size-2\" />\n                </div>\n                <div\n                    v-else\n                    class=\"icon is-vcentered\">\n                    <i class=\"fa fa-circle is-size-6 has-text-light\" />\n                </div>\n                <div\n                    v-if=\"selectButtonText\"\n                    @click=\"$emit('select-button-click', selectedArray)\"\n                    class=\"button is-outlined is-primary\">\n                    {{ selectButtonText }}\n                </div>\n            </div>\n            <!-- MULTI EDIT BUTTONS -->\n            <div class=\"column is-narrow\">\n                <div\n                    class=\"buttons\">\n                    <div\n                        v-if=\"multipleSelected && !addingNode && view !== 'import' && canEdit\"\n                        @click=\"$emit('edit-multiple-event')\"\n                        class=\"button is-outlined is-primary\">\n                        <span class=\"icon\">\n                            <i class=\"fa fa-cog\" />\n                        </span>\n                        <span>\n                            Edit multiple\n                        </span>\n                    </div>\n                    <!-- if multiple are selected allow for edit multiple -->\n                    <div\n                        @click=\"addingNode = true;\"\n                        v-if=\"!addingNode && canEdit && !multipleSelected\"\n                        class=\"button is-outlined is-primary\">\n                        <span class=\"icon\">\n                            <i class=\"fa fa-plus-circle\" />\n                        </span>\n                        <span>\n                            {{ addProgressionModelOrLevelText }}\n                        </span>\n                    </div>\n                    <!-- delete item -->\n                    <div\n                        v-if=\"!addingNode && canEdit && !multipleSelected && canCopyOrCut\"\n                        @click=\"deleteSelected\"\n                        class=\"button is-outlined is-danger\">\n                        <span class=\"icon\">\n                            <i class=\"fa fa-plus-circle\" />\n                        </span>\n                        <span>\n                            delete item\n                        </span>\n                    </div>\n                    <div\n                        v-if=\"addingNode\"\n                        @click=\"addingNode = false;\"\n                        class=\"button is-outlined is-dark \">\n                        <span class=\"icon\">\n                            <i class=\"fa fa-times\" />\n                        </span>\n                        <span>cancel</span>\n                    </div>\n                    <div\n                        v-if=\"addingNode\"\n                        @click=\"onClickCreateNew\"\n                        :class=\"{'is-loading': loading}\"\n                        class=\"button is-outlined is-primary \">\n                        <span class=\"icon\">\n                            <i class=\"fa fa-plus\" />\n                        </span>\n                        <span>\n                            create new\n                        </span>\n                    </div>\n                    <div\n                        v-if=\"view === 'framework' || view === 'concept'\"\n                        title=\"Cut progression level\"\n                        :disabled=\"!canCopyOrCut\"\n                        class=\"button is-outlined\"\n                        :class=\"canCopyOrCut ? 'is-primary' : 'is-disabled'\"\n                        @click=\"cutClick\">\n                        <span class=\"icon\">\n                            <i class=\"fas handle fa-cut\" />\n                        </span>\n                    </div>\n                    <div\n                        v-if=\"view === 'framework' || view === 'concept'\"\n                        :disabled=\"!canPaste\"\n                        class=\"button is-outlined \"\n                        @click=\"pasteClick\"\n                        :class=\"canPaste ? 'is-primary' : 'is-disabled'\"\n                        title=\"Paste progression level\">\n                        <span class=\"icon\">\n                            <i class=\"fa fa-paste\" />\n                        </span>\n                    </div>\n                    <div\n                        v-if=\"view === 'concept'\"\n                        @click=\"computeHierarchy(true)\"\n                        class=\"button is-outlined is-primary \"\n                        title=\"Reorder by Precedence\">\n                        <span>\n                            reorder by precedence\n                        </span>\n                    </div>\n                    <div\n                        v-if=\"view === 'concept'\"\n                        @click=\"setPrecedence\"\n                        class=\"button is-outlined is-primary \"\n                        title=\"Set Precedence\">\n                        <span>\n                            set precedence by order\n                        </span>\n                    </div>\n                </div>\n            </div>\n            <!-- IMPORT WORKFLOW BUTTONS -->\n            <div\n                class=\"column\"\n                v-if=\"view === 'import'\">\n                <div class=\"buttons is-right\">\n                    <!-- import details options -->\n                    <div\n                        class=\"buttons is-right\">\n                        <!-- cancel button -->\n                        <div\n                            @click=\"cancelImport\"\n                            class=\" button is-light is-pulled-right is-dark is-outlined\">\n                            <span>\n                                Cancel\n                            </span>\n                            <span class=\"icon\">\n                                <i class=\"fa fa-times-circle\" />\n                            </span>\n                        </div>\n                        <!--  start over -->\n                        <div\n                            @click=\"$store.dispatch('app/clearImport')\"\n                            class=\"button is-dark is-outlined is-pulled-right\">\n                            <span>\n                                import again\n                            </span>\n                            <span class=\"icon\">\n                                <i class=\"fa fa-redo-alt\" />\n                            </span>\n                        </div>\n                        <!-- open in editor -->\n                        <div\n                            @click=\"openFramework\"\n                            class=\"button is-dark is-outlined is-pulled-right\">\n                            <span>view in editor</span>\n                            <span class=\"icon\">\n                                <i class=\"fa fa-edit\" />\n                            </span>\n                        </div>\n                        <!--  home -->\n                        <router-link\n                            class=\"button is-primary is-outlined is -pulled-right\"\n                            :to=\"{path: '/progressionLevels', query: queryParams}\">\n                            <span>\n                                Done\n                            </span>\n                            <span class=\"icon\">\n                                <i class=\"fa fa-home\" />\n                            </span>\n                        </router-link>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <template\n            v-if=\"hierarchy\">\n            <draggable\n                v-bind=\"dragOptions\"\n                v-model=\"hierarchy\"\n                tag=\"ul\"\n                class=\"lode__hierarchy-ul\"\n                :disabled=\"canEdit !== true || !isDraggable\"\n                :group=\"{ name: 'test' }\"\n                @start=\"beginDrag\"\n                handle=\".handle\"\n                @end=\"endDrag\">\n                <HierarchyNode\n                    :depth=\"1\"\n                    :view=\"view\"\n                    @create-new-node-event=\"onCreateNewNode\"\n                    :subview=\"subview\"\n                    @mounting-node=\"handleMountingNode\"\n                    v-for=\"(item, index) in hierarchy\"\n                    :key=\"item.obj.id\"\n                    :obj=\"item.obj\"\n                    class=\"lode__hierarchy-li\"\n                    :dragging=\"dragging\"\n                    :canEdit=\"canEdit\"\n                    :hasChild=\"item.children\"\n                    :profile=\"profile\"\n                    :highlightList=\"highlightList\"\n                    :selectAll=\"selectAll\"\n                    :newFramework=\"newFramework\"\n                    :index=\"index\"\n                    :frameworkEditable=\"canEdit\"\n                    :selectedArray=\"selectedArray\"\n                    @add=\"add\"\n                    @begin-drag=\"beginDrag\"\n                    @move=\"move\"\n                    @select=\"select\"\n                    :parentStructure=\"hierarchy\"\n                    :parent=\"container\"\n                    @draggable-check=\"onDraggableCheck\"\n                    :properties=\"properties\"\n                    :expandAll=\"expanded==true\"\n                    :propagateParentChecked=\"false\"\n                    :shiftKey=\"shiftKey\"\n                    :arrowKey=\"arrowKey\" />\n            </draggable>\n        </template>\n    </div>\n</template>\n<script>\n\nimport common from '@/mixins/common.js';\nimport competencyEdits from '@/mixins/competencyEdits.js';\nvar hierarchyTimeout;\nexport default {\n    name: 'ProgressionHierarchy',\n    props: {\n        container: Object,\n        containerType: String,\n        repo: Object,\n        profile: Object,\n        highlightList: Array,\n        selectMode: Boolean,\n        selectAll: Boolean,\n        containerTypeGet: String,\n        viewOnly: Boolean,\n        newFramework: Boolean,\n        properties: String,\n        view: {\n            type: String,\n            default: 'framework'\n        },\n        subview: {\n            type: String,\n            default: ''\n        },\n        doneDragging: {\n            type: Boolean,\n            default: false\n        }\n    },\n    data: function() {\n        return {\n            structure: [],\n            once: true,\n            dragging: false,\n            controlOnStart: false,\n            filter: 'showAll',\n            dragIcon: 'fa-arrows-alt',\n            dragOptions: {\n                delay: 100,\n                disabled: false,\n                ghostClass: 'ghost-drag',\n                chosenClass: 'chosen-drag',\n                dragClass: 'drag',\n                scrollSensitivity: 200,\n                forceFallback: true\n            },\n            multipleSelected: false,\n            addingNode: false,\n            selectedArray: [],\n            selectButtonText: null,\n            expanded: true,\n            isDraggable: true,\n            shiftKey: false,\n            arrowKey: null,\n            addProgressionModelOrLevelText: \"Add Level\",\n            loading: false\n        };\n    },\n    components: {\n        HierarchyNode: () => import('@/lode/components/HierarchyNode.vue'),\n        draggable: () => import('vuedraggable')\n    },\n    mixins: [common, competencyEdits],\n    computed: {\n        canCopyOrCut: function() {\n            if (this.selectedArray && this.selectedArray.length === 1) {\n                return true;\n            } else {\n                return false;\n            }\n        },\n        canPaste: function() {\n            if ((this.$store.getters['editor/copyId'] !== null || this.$store.getters['editor/cutId'] !== null) && this.$store.getters['editor/nodeInFocus'] !== null) {\n                return true;\n            } else {\n                return false;\n            }\n        },\n        queryParams: function() {\n            return this.$store.getters['editor/queryParams'];\n        },\n        addAnother: function() {\n            return this.$store.getters['editor/addAnother'];\n        },\n        hierarchy: function() {\n            var me = this;\n            if (this.container == null) return null;\n            if (!this.once) return this.structure;\n            appLog(\"Computing hierarchy.\");\n            var precache = [];\n            if (this.container[\"skos:hasTopConcept\"] != null) { precache = precache.concat(this.container[\"skos:hasTopConcept\"]); }\n            if (precache.length > 0) {\n                this.repo.multiget(precache, function(success) {\n                    me.computeHierarchy(false);\n                }, appError);\n            } else {\n                me.computeHierarchy(false);\n            }\n            return this.structure;\n        },\n        // True if the current client can edit this object.\n        canEdit: function() {\n            if (this.viewOnly === true) {\n                return false;\n            }\n            return this.canEditAny(this.container);\n        },\n        recomputeHierarchy: function() {\n            return this.$store.getters['editor/recomputeHierarchy'];\n        },\n        framework() {\n            return this.$store.getters['editor/framework'];\n        }\n    },\n    watch: {\n        container: {\n            handler() {\n                this.once = true;\n            },\n            deep: true\n        },\n        selectedArray: function() {\n            if (this.selectedArray.length > 1) {\n                this.multipleSelected = true;\n            } else {\n                this.multipleSelected = false;\n            }\n            if (this.selectedArray.length === 1) {\n                this.addProgressionModelOrLevelText = \"Add Level\";\n            } else {\n                this.addProgressionMaddProgressionModelOrLevelTextodelOrChildText = \"Add Progression Model\";\n            }\n            this.$emit('selected-array', this.selectedArray);\n        },\n        recomputeHierarchy: function() {\n            if (this.recomputeHierarchy) {\n                this.once = true;\n                this.$store.commit('editor/recomputeHierarchy', false);\n            }\n        },\n        doneDragging: function() {\n            if (this.doneDragging) {\n                this.dragging = false;\n            }\n        },\n        addAnother: function(val) {\n            if (val) {\n                this.onClickCreateNew();\n                this.$store.commit('editor/addAnother', false);\n            }\n        }\n    },\n    mounted: function() {\n        if (this.queryParams) {\n            if (this.queryParams.singleSelect) {\n                this.selectButtonText = this.queryParams.singleSelect;\n            }\n            if (this.queryParams.select) {\n                if (this.queryParams.select !== \"\" && this.queryParams.select !== \"select\") {\n                    this.selectButtonText = this.queryParams.select;\n                }\n            }\n        }\n        window.addEventListener(\"keydown\", this.keydown);\n        window.addEventListener(\"keyup\", this.keyup);\n    },\n    beforeDestroy: function() {\n        window.removeEventListener('keyup', this.keyup);\n        window.removeEventListener('keydown', this.keydown);\n    },\n    methods: {\n        cutClick: function() {\n            if (this.selectedArray && this.selectedArray.length === 1) {\n                this.$store.commit('editor/cutId', this.selectedArray[0]);\n            }\n            this.$store.commit('editor/copyId', null);\n            this.$store.commit('editor/paste', false);\n        },\n        copyClick: function() {\n            if (this.selectedArray && this.selectedArray.length === 1) {\n                this.$store.commit('editor/copyId', this.selectedArray[0]);\n            }\n            this.$store.commit('editor/cutId', null);\n            this.$store.commit('editor/paste', false);\n        },\n        pasteClick: function() {\n            this.$store.commit('editor/paste', true);\n        },\n        keydown(e) {\n            if (this.canEdit) {\n                if (e.shiftKey) {\n                    this.shiftKey = true;\n                }\n                if (e.key.indexOf(\"Arrow\") !== -1 && e.shiftKey) {\n                    this.arrowKey = e.key;\n                }\n                if (e.key === \"x\" && e.ctrlKey) {\n                    if (this.selectedArray && this.selectedArray.length === 1) {\n                        this.$store.commit('editor/cutId', this.selectedArray[0]);\n                    }\n                    this.$store.commit('editor/copyId', null);\n                    this.$store.commit('editor/paste', false);\n                }\n                if (e.key === \"c\" && e.ctrlKey) {\n                    if (this.selectedArray && this.selectedArray.length === 1) {\n                        this.$store.commit('editor/copyId', this.selectedArray[0]);\n                    }\n                    this.$store.commit('editor/cutId', null);\n                    this.$store.commit('editor/paste', false);\n                }\n                if (e.key === \"v\" && e.ctrlKey) {\n                    this.$store.commit('editor/paste', true);\n                }\n            }\n        },\n        keyup(e) {\n            if (!e.shiftKey) {\n                this.shiftKey = false;\n            }\n            if (e.key.indexOf(\"Arrow\") !== -1) {\n                this.arrowKey = null;\n            }\n        },\n        onCreateNewNode: function(parentId, previousSiblingId) {\n            this.add(parentId, previousSiblingId);\n        },\n        /*\n         * when a child node is mounted it emits an event\n         * and a timeout is started\n         */\n        handleMountingNode: function() {\n            this.startTime();\n        },\n        /*\n         * each mount resets the timeout\n         * if the timeout length is met (no new nodes)\n         * the done loading event is triggered\n         */\n        startTime: function() {\n            hierarchyTimeout = setTimeout(() => {\n                this.$emit('done-loading-nodes');\n            }, 1000);\n        },\n        removePrecedence: async function() {\n            return new Promise(async(resolve) => {\n                let structure = [];\n                if (this.container == null) { return r; }\n                if (this.container[\"skos:hasTopConcept\"] !== null && this.container[\"skos:hasTopConcept\"] !== undefined) {\n                    if (this.container[\"ceterms:precedes\"] || this.container[\"ceterms:precededBy\"]) {\n                        if (this.container[\"ceterms:precedes\"]) delete this.container[\"ceterms:precedes\"];\n                        if (this.container[\"ceterms:precededBy\"]) delete this.container[\"ceterms:precededBy\"];\n                        await this.saveObject(this.container);\n                    }\n                    for (var i = 0; i < this.container[\"skos:hasTopConcept\"].length; i++) {\n                        var c = await EcConcept.get(this.container[\"skos:hasTopConcept\"][i]);\n                        if (c) {\n                            if (c[\"ceterms:precedes\"] || c[\"ceterms:precededBy\"]) {\n                                if (c[\"ceterms:precedes\"]) delete c[\"ceterms:precedes\"];\n                                if (c[\"ceterms:precededBy\"]) delete c[\"ceterms:precededBy\"];\n                                await this.saveObject(c);\n                            }\n                            structure.push({\"obj\": c, \"children\": []});\n                            if (c[\"skos:narrower\"]) {\n                                await this.addChildren(structure, c, i, true);\n                            }\n                        }\n                    }\n                }\n\n                this.structure = structure;\n                resolve();\n            });\n        },\n        setPrecedence: async function() {\n            await this.removePrecedence();\n\n            let structure = this.structure;\n            await this.setPrecedes(structure);\n            await this.setPrecededBy(structure);\n\n            this.structure = structure;\n        },\n        computeHierarchy: async function(setOrder) {\n            let structure = [];\n            if (this.container == null) { return r; }\n            if (this.container[\"skos:hasTopConcept\"] !== null && this.container[\"skos:hasTopConcept\"] !== undefined) {\n                for (var i = 0; i < this.container[\"skos:hasTopConcept\"].length; i++) {\n                    var c = await EcConcept.get(this.container[\"skos:hasTopConcept\"][i]);\n                    if (c) {\n                        structure.push({\"obj\": c, \"children\": []});\n                        if (c[\"skos:narrower\"]) {\n                            await this.addChildren(structure, c, i, false);\n                        }\n                    }\n                }\n            }\n\n            if (setOrder) {\n                await this.reorder(structure, \"ceterms:precedes\");\n                await this.reorder(structure, \"ceterms:precededBy\");\n            }\n\n            this.structure = structure;\n            this.once = false;\n        },\n        printPrettyStructure(structure) {\n            let output = \"[\";\n            for (let i = 0; i < structure.length; i++) {\n                if (structure[i].obj) {\n                    output += structure[i].obj[\"skos:prefLabel\"][\"@value\"] + ((i === structure.length - 1) && !(structure[i].children && structure[i].children.length > 0) ? \"\" : \", \");\n                }\n                if (structure[i].children.length > 0) {\n                    for (let j = 0; j < structure[i].children.length; j++) {\n                        if (structure[i].children[j]) {\n                            let children = structure[i].children;\n                            output += (j === 0 ? \"(\" : \"\") + children[j].obj[\"skos:prefLabel\"][\"@value\"] + (j === structure[i].children.length - 1 ? \")\" : \", \");\n                            output += (j === structure[i].children.length - 1 ? (i === structure.length - 1 ? \"]\" : \", \") : \"\");\n                            if (children[j].children.length > 0) {\n                                for (let k = 0; k < children[j].children.length; k++) {\n                                    if (children[j].children[k]) {\n                                        output += (k === 0 ? \"(\" : \"\") + children[j].children[k].obj[\"skos:prefLabel\"][\"@value\"] + (k === children[j].children.length - 1 ? \")\" : \", \");\n                                        output += (k === children[j].children.length - 1 ? (j === children.length - 1 ? \"]\" : \", \") : \"\");\n                                    }\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    output += (i === structure.length - 1 ? \"]\" : \"\");\n                }\n            }\n            return output;\n        },\n        addChildren: async function(structure, c, i, deletePrecedence) {\n            return new Promise(async(resolve) => {\n                for (var j = 0; j < c[\"skos:narrower\"].length; j++) {\n                    var subC = await EcConcept.get(c[\"skos:narrower\"][j]);\n                    if (deletePrecedence &&\n                        (subC[\"ceterms:precedes\"] || subC[\"ceterms:precededBy\"])) {\n                        if (subC[\"ceterms:precedes\"]) delete subC[\"ceterms:precedes\"];\n                        if (subC[\"ceterms:precededBy\"]) delete subC[\"ceterms:precededBy\"];\n                        await this.saveObject(subC);\n                    }\n                    structure[i].children.push({\"obj\": subC, \"children\": []});\n                    if (subC && subC[\"skos:narrower\"]) {\n                        await this.addChildren(structure[i].children, subC, j, deletePrecedence);\n                    }\n                }\n                resolve();\n            });\n        },\n        reorder: async function(unorderedStructure, property) {\n            return new Promise(async(resolve) => {\n                let changesMade = true;\n                let numChangesMade = 0; // Prevents endless loop when model properties are inconsistent\n                if (unorderedStructure == null) {\n                    return;\n                }\n                if (unorderedStructure !== null && unorderedStructure.length) {\n                    while (changesMade && (numChangesMade < 100)) {\n                        changesMade = false;\n                        let i;\n                        if (property === \"ceterms:precedes\") {\n                            i = 0;\n                        } else {\n                            i = unorderedStructure.length - 1;\n                        }\n                        let next = unorderedStructure[i];\n                        while (next) {\n                            var c = unorderedStructure[i].obj;\n                            if (c) {\n                                if (unorderedStructure[i].children) {\n                                    if (await this.reorderChildren(unorderedStructure, unorderedStructure[i].children, property)) {\n                                        numChangesMade++;\n                                        changesMade = true;\n                                    }\n                                }\n                                if (c[property]) {\n                                    var c2 = await EcConcept.get(c[property]);\n                                    if (await this.setProrgressionOrder(unorderedStructure, c, c2, property)) {\n                                        numChangesMade++;\n                                        changesMade = true;\n                                    }\n                                }\n                                if (property === \"ceterms:precedes\") {\n                                    if (i < unorderedStructure.length - 1) {\n                                        i++;\n                                        next = unorderedStructure[i];\n                                    } else {\n                                        next = undefined;\n                                    }\n                                } else {\n                                    if (i > 0) {\n                                        i--;\n                                        next = unorderedStructure[i];\n                                    } else {\n                                        next = undefined;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                resolve();\n            });\n        },\n        reorderChildren: async function(unorderedStructure, children, property) {\n            return new Promise(async(resolve) => {\n                let changesMade = false;\n                let childChangesMade = true;\n                let numChildChangesMade = 0; // Prevents endless loop when model properties are inconsistent\n                while (childChangesMade && (numChildChangesMade < 100)) {\n                    childChangesMade = false;\n                    let j;\n                    if (property === \"ceterms:precedes\") {\n                        j = 0;\n                    } else {\n                        j = children.length - 1;\n                    }\n                    let next = children[j];\n                    while (next) {\n                        let subC1 = children[j].obj;\n                        if (subC1) {\n                            if (subC1[\"skos:narrower\"]) {\n                                if (await this.reorderChildren(unorderedStructure, children[j].children, property)) {\n                                    changesMade = true;\n                                    numChildChangesMade++;\n                                    childChangesMade = true;\n                                }\n                            }\n                            if (subC1[property]) {\n                                let subC2 = await EcConcept.get(subC1[property]);\n                                if (await this.setProrgressionOrder(unorderedStructure, subC1, subC2, property)) {\n                                    changesMade = true;\n                                    numChildChangesMade++;\n                                    childChangesMade = true;\n                                }\n                            }\n                        }\n\n                        if (property === \"ceterms:precedes\") {\n                            if (j < children.length - 1) {\n                                j++;\n                                next = children[j];\n                            } else {\n                                next = undefined;\n                            }\n                        } else {\n                            if (j > 0) {\n                                j--;\n                                next = children[j];\n                            } else {\n                                next = undefined;\n                            }\n                        }\n                    }\n                }\n                resolve(changesMade);\n            });\n        },\n        setProrgressionOrder: async function(structure, node1, node2, property) {\n            // If the nodes are not at the same level in the hierarchy, then find the ancestor that IS\n            //  at the same level. Once the two sibling nodes are found, switch positions in the array.\n            let sibling = await this.findSiblingOfNode(node1, node2);\n            if (sibling !== null) {\n                // Set the order of the progression levels\n                let parentStructure = await this.findSubStructure(structure, node1);\n                if (!parentStructure) {\n                    // This condition should never be reached.\n                    appLog('Error: No parent structure found');\n                    return false;\n                }\n                let node1Index = await parentStructure.findIndex(item => EcRemoteLinkedData.trimVersionFromUrl(item.obj ? item.obj.id : item.id) === EcRemoteLinkedData.trimVersionFromUrl(node1.id));\n                let node2Index = await parentStructure.findIndex(item => EcRemoteLinkedData.trimVersionFromUrl(item.obj ? item.obj.id : item.id) === EcRemoteLinkedData.trimVersionFromUrl(sibling.id));\n                node2 = ({\"obj\": parentStructure[node2Index].obj, \"children\": parentStructure[node2Index].children});\n                if (property === \"ceterms:precedes\") {\n                    if (node1Index + 1 === node2Index) {\n                        // Nodes are already in order\n                        return false;\n                    }\n                    parentStructure.splice(node2Index, 1);\n                    node1Index = await parentStructure.findIndex(item => EcRemoteLinkedData.trimVersionFromUrl(item.obj ? item.obj.id : item.id) === EcRemoteLinkedData.trimVersionFromUrl(node1.id));\n                    parentStructure.splice(node1Index + 1, 0, node2);\n                } else {\n                    if (node2Index + 1 === node1Index) {\n                        // Nodes are already in order\n                        return false;\n                    }\n                    parentStructure.splice(node2Index, 1);\n                    node1Index = await parentStructure.findIndex(item => EcRemoteLinkedData.trimVersionFromUrl(item.obj ? item.obj.id : item.id) === EcRemoteLinkedData.trimVersionFromUrl(node1.id));\n                    parentStructure.splice(node1Index, 0, node2);\n                }\n                return true;\n            } else {\n                sibling = await this.findSiblingOfNode(node2, node1);\n                if (sibling !== null) {\n                    // Set the order of the progression levels\n                    let parentStructure = await this.findSubStructure(structure, node2);\n                    if (!parentStructure) {\n                        // This condition should never be reached.\n                        appLog('Error: No parent structure found');\n                        return false;\n                    }\n                    let node1Index = await parentStructure.findIndex(item => EcRemoteLinkedData.trimVersionFromUrl(item.obj ? item.obj.id : item.id) === EcRemoteLinkedData.trimVersionFromUrl(sibling.id));\n                    let node2Index = await parentStructure.findIndex(item => EcRemoteLinkedData.trimVersionFromUrl(item.obj ? item.obj.id : item.id) === EcRemoteLinkedData.trimVersionFromUrl(node2.id));\n                    if ((node1Index < 0) || (node1Index >= parentStructure.length) ||\n                        (node2Index < 0) || (node2Index >= parentStructure.length)) {\n                        appLog('Node index not found');\n                        return false;\n                    }\n                    node2 = ({\"obj\": parentStructure[node2Index].obj, \"children\": parentStructure[node2Index].children});\n                    if (property === \"ceterms:precedes\") {\n                        if (node1Index + 1 === node2Index) {\n                            // Nodes are already in order\n                            return false;\n                        }\n                        parentStructure.splice(node2Index, 1);\n                        node1Index = await parentStructure.findIndex(item => EcRemoteLinkedData.trimVersionFromUrl(item.obj ? item.obj.id : item.id) === EcRemoteLinkedData.trimVersionFromUrl(sibling.id));\n                        parentStructure.splice(node1Index + 1, 0, node2);\n                    } else {\n                        if (node2Index + 1 === node1Index) {\n                            // Nodes are already in order\n                            return false;\n                        }\n                        parentStructure.splice(node2Index, 1);\n                        node1Index = await parentStructure.findIndex(item => EcRemoteLinkedData.trimVersionFromUrl(item.obj ? item.obj.id : item.id) === EcRemoteLinkedData.trimVersionFromUrl(sibling.id));\n                        parentStructure.splice(node1Index, 0, node2);\n                    }\n                    return true;\n                } else {\n                    // If no sibling is found, then the common ancestor is higher up in the hierarchy.\n                    //  Search again with the node parent.\n                    if (node1[\"skos:broader\"]) {\n                        let nodeParent = await EcConcept.get(EcRemoteLinkedData.trimVersionFromUrl(node1[\"skos:broader\"]).toString());\n                        return (this.setProrgressionOrder(structure, nodeParent, node2, property));\n                    } else {\n                        // This condition should never be reached.\n                        appLog('Error: No common ancestry found');\n                        return false;\n                    }\n                }\n            }\n        },\n        findSiblingOfNode: async function(node, nibling) {\n            return new Promise(async(resolve) => {\n                let nodeParent = null;\n                let niblingParent = null;\n\n                if (node[\"skos:broader\"]) {\n                    nodeParent = EcRemoteLinkedData.trimVersionFromUrl(node[\"skos:broader\"]);\n                }\n                if (nibling[\"skos:broader\"]) {\n                    niblingParent = EcRemoteLinkedData.trimVersionFromUrl(nibling[\"skos:broader\"]);\n                }\n                if (niblingParent && nodeParent && (niblingParent.toString() === nodeParent.toString())) {\n                    // Nibling is a sibling of node\n                    resolve(nibling);\n                } else if (!node[\"skos:broader\"] && !nibling[\"skos:broader\"]) {\n                    // Nibling and node are at the top of the hierarchy amd are therefore siblings\n                    resolve(nibling);\n                } else if (!nibling[\"skos:broader\"]) {\n                    // Nibling is at the top of the hierarchy and is therefore higher up than node\n                    resolve(null);\n                } else {\n                    // Find the ancestor of nibling that is the sibling of node\n                    let niblingAncestor = await EcConcept.get(niblingParent.toString());\n                    resolve(await this.findSiblingOfNode(node, niblingAncestor));\n                }\n            });\n        },\n        findSubStructure: async function(structure, node) {\n            return new Promise(async(resolve) => {\n                if (!node[\"skos:broader\"]) {\n                    // Parent node is at the top of the container\n                    resolve(structure);\n                    return;\n                }\n                let parentId = null;\n                if (node[\"skos:broader\"].length && node[\"skos:broader\"].length > 0) {\n                    parentId = node[\"skos:broader\"][0];\n                } else {\n                    parentId = node[\"skos:broader\"];\n                }\n\n                for (var i = 0; i < structure.length; i++) {\n                    if (structure[i].children) {\n                        if (EcRemoteLinkedData.trimVersionFromUrl(structure[i].obj.id) === parentId) {\n                            resolve(structure[i].children);\n                            return;\n                        } else {\n                            // If this level is not the parent, of the target node, then go deeper...\n                            let subStructure = await this.findSubStructure(structure[i].children, node);\n                            if (subStructure) {\n                                resolve(subStructure);\n                                return;\n                            }\n                        }\n                    }\n                }\n                resolve(null);\n            });\n        },\n        // WARNING: The Daemon of OBO lingers in these here drag and move methods. The library moves the objects, and OBO will then come get you!\n        beginDrag: function(event) {\n            this.dragging = true;\n            if (event !== undefined) {\n                this.controlOnStart = event.originalEvent.ctrlKey || event.originalEvent.shiftKey;\n            }\n        },\n        endDrag: function(foo) {\n            if (foo.to.id === 'framework_drag') {\n                this.dragging = false;\n                return;\n            }\n            appLog(foo.oldIndex, foo.newIndex);\n            var toId = null;\n            var toLast = false;\n            if (this.shiftKey) {\n                this.controlOnStart = true;\n            }\n            if (foo.from.id === foo.to.id) {\n                if (foo.newIndex + 1 < this.hierarchy.length) {\n                    toId = this.hierarchy[foo.newIndex + 1].obj.shortId();\n                } else if (foo.newIndex === this.hierarchy.length - 1) {\n                    toLast = true;\n                }\n            } else {\n                if (foo.to.children[foo.newIndex] === undefined) {\n                    toId = foo.to.id;\n                } else {\n                    if (foo.newIndex + 1 < foo.to.children.length) {\n                        toId = foo.to.children[foo.newIndex + 1].id;\n                    }\n                }\n            }\n            this.move(\n                this.hierarchy[foo.oldIndex].obj.shortId(),\n                toId,\n                foo.from.id,\n                foo.to.id,\n                !this.controlOnStart, toLast);\n        },\n        setPrecedes: async function(container) {\n            return new Promise(async(resolve) => {\n                // container received should be an array - each array element containing and array of children and EcConcept obj.\n                if (container === null || container.length <= 0) {\n                    resolve(false);\n                }\n                for (let i = 0; i < container.length; i++) {\n                    if (container[i]) {\n                        if (container[i].children && container[i].children.length > 0) {\n                            if (container[i].obj[\"ceterms:precedes\"]) {\n                                delete container[i].obj[\"ceterms:precedes\"];\n                                await this.saveObject(container[i].obj);\n                            }\n                            await this.setChildrenPrecedes(container, container[i].children);\n                        } else {\n                            // leaf node - add precedes property\n                            if (i === container.length - 1) {\n                                // precedes level at another stage of the hierarchy\n                                let precedes = await this.findPrecedes(container, EcRemoteLinkedData.trimVersionFromUrl(container[i].obj.id));\n                                container[i].obj[\"ceterms:precedes\"] = EcRemoteLinkedData.trimVersionFromUrl(precedes);\n                                await this.saveObject(container[i].obj);\n                            } else {\n                                if (container[i + 1].children && container[i + 1].children.length > 0) {\n                                    let precedes = await this.findChildrenPrecedes(container[i + 1].children, container[i].obj.id, true);\n                                    if (precedes !== null) {\n                                        container[i].obj[\"ceterms:precedes\"] = EcRemoteLinkedData.trimVersionFromUrl(precedes);\n                                        await this.saveObject(container[i].obj);\n                                    }\n                                } else {\n                                    container[i].obj[\"ceterms:precedes\"] = EcRemoteLinkedData.trimVersionFromUrl(container[i + 1].obj.id);\n                                    await this.saveObject(container[i].obj);\n                                }\n                            }\n                        }\n                    }\n                }\n                resolve(true);\n            });\n        },\n        setChildrenPrecedes: async function(container, subContainer) {\n            return new Promise(async(resolve) => {\n                // container and subContainer received should both be an array - each array element containing and array of children and EcConcept obj.\n                for (let j = 0; j < subContainer.length; j++) {\n                    if (subContainer[j]) {\n                        if (subContainer[j].children && subContainer[j].children.length > 0) {\n                            if (subContainer[j].obj[\"ceterms:precedes\"]) {\n                                delete subContainer[j].obj[\"ceterms:precedes\"];\n                                await this.saveObject(subContainer[j].obj);\n                            }\n                            await this.setChildrenPrecedes(container, subContainer[j].children);\n                        } else {\n                            // leaf node - add precedes property\n                            if (j === subContainer.length - 1) {\n                                // precedes level at another stage of the hierarchy\n                                let precedes = await this.findPrecedes(container, EcRemoteLinkedData.trimVersionFromUrl(subContainer[j].obj.id));\n                                if (precedes !== null) {\n                                    subContainer[j].obj[\"ceterms:precedes\"] = EcRemoteLinkedData.trimVersionFromUrl(precedes);\n                                    await this.saveObject(subContainer[j].obj);\n                                }\n                            } else {\n                                if (subContainer[j + 1].children && subContainer[j + 1].children.length > 0) {\n                                    let precedes = await this.findChildrenPrecedes(subContainer[j + 1].children, subContainer[j].obj.id, true);\n                                    if (precedes !== null) {\n                                        subContainer[j].obj[\"ceterms:precedes\"] = EcRemoteLinkedData.trimVersionFromUrl(precedes);\n                                        await this.saveObject(subContainer[j].obj);\n                                    }\n                                } else {\n                                    subContainer[j].obj[\"ceterms:precedes\"] = EcRemoteLinkedData.trimVersionFromUrl(subContainer[j + 1].obj.id);\n                                    await this.saveObject(subContainer[j].obj);\n                                }\n                            }\n                        }\n                    }\n                }\n                resolve();\n            });\n        },\n        findPrecedes: async function(container, sourceNodeId) {\n            return new Promise(async(resolve) => {\n                // container received should be an array - each array element containing and array of children and EcConcept obj.\n                // Assumes sourceNodeId is a leaf node\n                let foundSourceNode = false;\n                if (container === null) { return null; }\n                // if (EcRemoteLinkedData.trimVersionFromUrl(container.obj.id) === sourceNodeId) { return null; }\n                for (let i = 0; i < container.length; i++) {\n                    if (!foundSourceNode && (EcRemoteLinkedData.trimVersionFromUrl(container[i].obj.id) === sourceNodeId)) {\n                        foundSourceNode = true;\n                    } else {\n                        if (container[i].children && container[i].children.length > 0) {\n                            let precedes = await this.findChildrenPrecedes(container[i].children, sourceNodeId, foundSourceNode);\n                            if (precedes) {\n                                if (precedes === sourceNodeId) {\n                                    foundSourceNode = true;\n                                } else {\n                                    resolve(precedes);\n                                }\n                            }\n                        } else {\n                            if (foundSourceNode) {\n                                // Source node has already been found. That means that this is the closeest leaf node\n                                resolve(EcRemoteLinkedData.trimVersionFromUrl(container[i].obj.id));\n                            }\n                        }\n                    }\n                }\n                resolve(null);\n            });\n        },\n        findChildrenPrecedes: async function(subContainer, sourceNodeId, foundSourceNode) {\n            return new Promise(async(resolve) => {\n                // subContainer received should be an array - each array element containing and array of children and EcConcept obj.\n                let foundChildSourceNode = foundSourceNode;\n                if (subContainer === null) { return null; }\n                for (let j = 0; j < subContainer.length; j++) {\n                    if (!foundChildSourceNode && (EcRemoteLinkedData.trimVersionFromUrl(subContainer[j].obj.id) === sourceNodeId)) {\n                        foundChildSourceNode = true;\n                    } else {\n                        if (subContainer[j].children && subContainer[j].children.length > 0) {\n                            let precedes = await this.findChildrenPrecedes(subContainer[j].children, sourceNodeId, foundSourceNode);\n                            if (precedes) {\n                                if (precedes === sourceNodeId) {\n                                    foundChildSourceNode = true;\n                                } else {\n                                    resolve(precedes);\n                                }\n                            }\n                        } else {\n                            if (foundChildSourceNode) {\n                                // Source node has already been found. That means that this is the closeest leaf node\n                                resolve(EcRemoteLinkedData.trimVersionFromUrl(subContainer[j].obj.id));\n                            }\n                        }\n                    }\n                }\n                if (foundChildSourceNode) {\n                    resolve(sourceNodeId);\n                } else {\n                    resolve(null);\n                }\n            });\n        },\n        setPrecededBy: async function(container) {\n            return new Promise(async(resolve) => {\n                // container received should be an array - each array element containing and array of children and EcConcept obj.\n                if (container === null || container.length <= 0) {\n                    resolve(false);\n                }\n                for (let i = container.length - 1; i >= 0; i--) {\n                    if (container[i]) {\n                        if (container[i].children && container[i].children.length > 0) {\n                            if (container[i].obj[\"ceterms:precededBy\"]) {\n                                delete container[i].obj[\"ceterms:precededBy\"];\n                                await this.saveObject(container[i].obj);\n                            }\n                            await this.setChildrenPrecededBy(container, container[i].children, i);\n                        } else {\n                            // leaf node - add precededBy property\n                            if (i === 0) {\n                                // precededBy level at another stage of the hierarchy\n                                let precededBy = await this.findPrecededBy(container, EcRemoteLinkedData.trimVersionFromUrl(container[i].obj.id));\n                                if (precededBy !== null) {\n                                    container[i].obj[\"ceterms:precededBy\"] = EcRemoteLinkedData.trimVersionFromUrl(precededBy);\n                                    await this.saveObject(container[i].obj);\n                                }\n                            } else {\n                                if (container[i - 1].children && container[i - 1].children.length > 0) {\n                                    let precededBy = await this.findChildrenPrecededBy(container[i - 1].children, container[i].obj.id, true);\n                                    if (precededBy !== null) {\n                                        container[i].obj[\"ceterms:precededBy\"] = EcRemoteLinkedData.trimVersionFromUrl(precededBy);\n                                        await this.saveObject(container[i].obj);\n                                    }\n                                } else {\n                                    container[i].obj[\"ceterms:precededBy\"] = EcRemoteLinkedData.trimVersionFromUrl(container[i - 1].obj.id);\n                                    await this.saveObject(container[i].obj);\n                                }\n                            }\n                        }\n                    }\n                }\n                resolve(true);\n            });\n        },\n        setChildrenPrecededBy: async function(container, subContainer) {\n            return new Promise(async(resolve) => {\n                // container and subContainer received should both be an array - each array element containing and array of children and EcConcept obj.\n                for (let j = subContainer.length - 1; j >= 0; j--) {\n                    if (subContainer[j]) {\n                        if (subContainer[j].children && subContainer[j].children.length > 0) {\n                            if (subContainer[j].obj[\"ceterms:precededBy\"]) {\n                                delete subContainer[j].obj[\"ceterms:precededBy\"];\n                                await this.saveObject(subContainer[j].obj);\n                            }\n                            await this.setChildrenPrecededBy(container, subContainer[j].children);\n                        } else {\n                            // leaf node - add precededBy property\n                            if (j === 0) {\n                                // precededBy level at another stage of the hierarchy\n                                let precededBy = await this.findPrecededBy(container, EcRemoteLinkedData.trimVersionFromUrl(subContainer[j].obj.id));\n                                if (precededBy !== null) {\n                                    subContainer[j].obj[\"ceterms:precededBy\"] = EcRemoteLinkedData.trimVersionFromUrl(precededBy);\n                                    await this.saveObject(subContainer[j].obj);\n                                }\n                            } else {\n                                if (subContainer[j - 1].children && subContainer[j - 1].children.length > 0) {\n                                    let precededBy = await this.findChildrenPrecededBy(subContainer[j - 1].children, subContainer[j].obj.id, true);\n                                    if (precededBy !== null) {\n                                        subContainer[j].obj[\"ceterms:precededBy\"] = EcRemoteLinkedData.trimVersionFromUrl(precededBy);\n                                        await this.saveObject(subContainer[j].obj);\n                                    }\n                                } else {\n                                    subContainer[j].obj[\"ceterms:precededBy\"] = EcRemoteLinkedData.trimVersionFromUrl(subContainer[j - 1].obj.id);\n                                    await this.saveObject(subContainer[j].obj);\n                                }\n                            }\n                        }\n                    }\n                }\n                resolve();\n            });\n        },\n        findPrecededBy: async function(container, sourceNodeId) {\n            return new Promise(async(resolve) => {\n                // container received should be an array - each array element containing and array of children and EcConcept obj.\n                // Assumes sourceNodeId is a leaf node\n                let foundSourceNode = false;\n                if (container === null) { return null; }\n                for (let i = container.length - 1; i >= 0; i--) {\n                    if (!foundSourceNode && (EcRemoteLinkedData.trimVersionFromUrl(container[i].obj.id) === sourceNodeId)) {\n                        foundSourceNode = true;\n                    } else {\n                        if (container[i].children && container[i].children.length > 0) {\n                            let precededBy = await this.findChildrenPrecededBy(container[i].children, sourceNodeId, foundSourceNode);\n                            if (precededBy) {\n                                if (precededBy === sourceNodeId) {\n                                    foundSourceNode = true;\n                                } else {\n                                    resolve(precededBy);\n                                }\n                            }\n                        } else {\n                            if (foundSourceNode) {\n                                // Source node has already been found. That means that this is the closeest leaf node\n                                resolve(EcRemoteLinkedData.trimVersionFromUrl(container[i].obj.id));\n                            }\n                        }\n                    }\n                }\n                resolve(null);\n            });\n        },\n        findChildrenPrecededBy: async function(subContainer, sourceNodeId, foundSourceNode) {\n            return new Promise(async(resolve) => {\n                // subContainer received should be an array - each array element containing and array of children and EcConcept obj.\n                let foundChildSourceNode = foundSourceNode;\n                if (subContainer === null) { return null; }\n                for (let j = subContainer.length - 1; j >= 0; j--) {\n                    if (!foundChildSourceNode && (EcRemoteLinkedData.trimVersionFromUrl(subContainer[j].obj.id) === sourceNodeId)) {\n                        foundChildSourceNode = true;\n                    } else {\n                        if (subContainer[j].children && subContainer[j].children.length > 0) {\n                            let precededBy = await this.findChildrenPrecededBy(subContainer[j].children, sourceNodeId, foundSourceNode);\n                            if (precededBy) {\n                                if (precededBy === sourceNodeId) {\n                                    foundChildSourceNode = true;\n                                } else {\n                                    resolve(precededBy);\n                                }\n                            }\n                        } else {\n                            if (foundChildSourceNode) {\n                                // Source node has already been found. That means that this is the closeest leaf node\n                                resolve(EcRemoteLinkedData.trimVersionFromUrl(subContainer[j].obj.id));\n                            }\n                        }\n                    }\n                }\n                if (foundChildSourceNode) {\n                    resolve(sourceNodeId);\n                } else {\n                    resolve(null);\n                }\n            });\n        },\n        saveObject: async function(obj) {\n            return new Promise(async(resolve) => {\n                this.repo.saveTo(obj, function() {\n                    resolve();\n                }, appError);\n            });\n        },\n        move: async function(fromId, toId, fromContainerId, toContainerId, removeOldRelations, toLast) {\n            this.once = true;\n            var me = this;\n            if (fromContainerId === toContainerId) {\n                var container = toContainerId ? await EcRepository.get(toContainerId) : this.container;\n                var property = \"skos:narrower\";\n                if (container.type === \"ConceptScheme\") {\n                    container = this.container;\n                    property = \"skos:hasTopConcept\";\n                }\n                var initialValue = container[property] ? container[property].slice() : null;\n                var fromIndex = container[property].indexOf(fromId);\n                container[property].splice(fromIndex, 1);\n                if (toId == null || toId === undefined) {\n                    if (!EcArray.isArray(container[property])) {\n                        container[property] = [];\n                    }\n                    container[property].push(fromId);\n                } else {\n                    if (toLast) {\n                        container[property].push(fromId);\n                    } else {\n                        var toIndex = container[property].indexOf(toId);\n                        container[property].splice(toIndex, 0, fromId);\n                    }\n                }\n                me.$store.commit('editor/addEditsToUndo', [{operation: \"update\", id: container.shortId(), fieldChanged: [property], initialValue: [initialValue]}]);\n                container[\"schema:dateModified\"] = new Date().toISOString();\n                if (this.$store.state.editor.private === true && EcEncryptedValue.encryptOnSaveMap[container.id] !== true) {\n                    container = await EcEncryptedValue.toEncryptedValue(container);\n                }\n                this.repo.saveTo(container, function() {\n                    me.computeHierarchy(false);\n                }, appError);\n            } else {\n                var moveComp = await EcConcept.get(fromId);\n                var fromContainer = fromContainerId ? await EcRepository.get(fromContainerId) : this.container;\n                var fromProperty = \"skos:narrower\";\n                var fromProperty2 = \"skos:broader\";\n                var toContainer = toContainerId ? await EcRepository.get(toContainerId) : this.container;\n                var toProperty = \"skos:narrower\";\n                var toProperty2 = \"skos:broader\";\n                if (fromContainer.type === \"ConceptScheme\") {\n                    fromContainer = this.container;\n                    fromProperty = \"skos:hasTopConcept\";\n                    fromProperty2 = \"skos:topConceptOf\";\n                }\n                if (toContainer.type === \"ConceptScheme\") {\n                    toContainer = this.container;\n                    toProperty = \"skos:hasTopConcept\";\n                    toProperty2 = \"skos:topConceptOf\";\n                }\n                var fromIndex = fromContainer[fromProperty].indexOf(fromId);\n                var fromPropInitialValue = fromContainer[fromProperty].slice();\n                var fromProp2InitialValue = moveComp[fromProperty2] ? moveComp[fromProperty2].slice() : null;\n                var toPropInitialValue = toContainer[toProperty] ? toContainer[toProperty].slice() : null;\n                var toProp2InitialValue = moveComp[toProperty2] ? moveComp[toProperty2].slice() : null;\n                if (removeOldRelations) {\n                    fromContainer[fromProperty].splice(fromIndex, 1);\n                }\n                if (fromContainerId && moveComp[fromProperty2]) {\n                    if (removeOldRelations) {\n                        EcArray.setRemove(moveComp[fromProperty2], fromContainerId);\n                    }\n                    if (moveComp[fromProperty2].length === 0) {\n                        delete moveComp[fromProperty2];\n                    }\n                } else {\n                    delete moveComp[fromProperty2];\n                }\n                fromContainer[\"schema:dateModified\"] = new Date().toISOString();\n                if (this.$store.state.editor.private === true && EcEncryptedValue.encryptOnSaveMap[fromContainer.id] !== true) {\n                    fromContainer = await EcEncryptedValue.toEncryptedValue(fromContainer);\n                }\n                this.repo.saveTo(fromContainer, async function() {\n                    if (toId == null || toId === undefined) {\n                        if (!EcArray.isArray(toContainer[toProperty])) {\n                            toContainer[toProperty] = [];\n                        }\n                        toContainer[toProperty].push(fromId);\n                    } else {\n                        var toIndex = toContainer[toProperty].indexOf(toId);\n                        toContainer[toProperty].splice(toIndex, 0, fromId);\n                    }\n                    if (toContainer.type === \"ConceptScheme\") {\n                        moveComp[toProperty2] = toContainerId;\n                    } else {\n                        if (!EcArray.isArray(moveComp[toProperty2])) {\n                            moveComp[toProperty2] = [];\n                        }\n                        if (toContainerId) {\n                            moveComp[toProperty2].push(toContainerId);\n                        }\n                    }\n                    me.$store.commit('editor/addEditsToUndo', [\n                        {operation: \"update\", id: fromContainer.shortId(), fieldChanged: [fromProperty], initialValue: [fromPropInitialValue]},\n                        {operation: \"update\", id: toContainer.shortId(), fieldChanged: [toProperty], initialValue: [toPropInitialValue]},\n                        {operation: \"update\", id: moveComp.shortId(), fieldChanged: [fromProperty2, toProperty2], initialValue: [fromProp2InitialValue, toProp2InitialValue]}\n                    ]);\n                    toContainer[\"schema:dateModified\"] = new Date().toISOString();\n                    moveComp[\"schema:dateModified\"] = new Date().toISOString();\n                    if (me.$store.state.editor.private === true && EcEncryptedValue.encryptOnSaveMap[toContainer.id] !== true) {\n                        toContainer = await EcEncryptedValue.toEncryptedValue(toContainer);\n                    }\n                    if (me.$store.state.editor.private === true && EcEncryptedValue.encryptOnSaveMap[moveComp.id] !== true) {\n                        moveComp = await EcEncryptedValue.toEncryptedValue(moveComp);\n                    }\n                    me.repo.saveTo(toContainer, function() {\n                        me.repo.saveTo(moveComp, appLog, appError);\n                        me.computeHierarchy(false);\n                    }, appLog);\n                }, appError);\n            }\n            this.dragging = false;\n        },\n        add: async function(containerId, previousSibling) {\n            var me = this;\n            var c = new EcConcept();\n            if (this.queryParams.newObjectEndpoint) {\n                c.generateShortId(this.queryParams.newObjectEndpoint);\n            } else {\n                c.generateId(this.repo.selectedServer);\n            }\n            c[\"subType\"] = 'Progression';\n            c[\"schema:dateCreated\"] = new Date().toISOString();\n            c[\"schema:dateModified\"] = new Date().toISOString();\n            if (EcIdentityManager.default.ids != null && EcIdentityManager.default.ids.length > 0) {\n                c.addOwner(EcIdentityManager.default.ids[0].ppk.toPk());\n            }\n            if (this.container.owner && this.container.owner.length > 0) {\n                for (var j = 0; j < this.container.owner.length; j++) {\n                    var owner = this.container.owner[j];\n                    c.addOwner(EcPk.fromPem(owner));\n                }\n            }\n            if (this.container.reader && this.container.reader.length > 0) {\n                for (var j = 0; j < this.container.reader.length; j++) {\n                    var reader = this.container.reader[j];\n                    r.addReader(EcPk.fromPem(reader));\n                }\n            }\n            this.setDefaultLanguage();\n            c[\"skos:prefLabel\"] = {\"@language\": this.$store.state.editor.defaultLanguage, \"@value\": \"New Progression Level\"};\n            c[\"ceasn:inProgressionModel\"] = this.container.shortId();\n            if (containerId === this.container.shortId()) {\n                var initialValue = this.container[\"skos:hasTopConcept\"] ? this.container[\"skos:hasTopConcept\"].slice() : null;\n                if (!EcArray.isArray(this.container[\"skos:hasTopConcept\"])) {\n                    this.container[\"skos:hasTopConcept\"] = [];\n                }\n                if (previousSibling == null || previousSibling === undefined) {\n                    this.container[\"skos:hasTopConcept\"].push(c.shortId());\n                } else {\n                    // Insert immediately after the sibling\n                    var index = this.container[\"skos:hasTopConcept\"].indexOf(previousSibling);\n                    this.container[\"skos:hasTopConcept\"].splice(index + 1, 0, c.shortId());\n                }\n                c[\"skos:topConceptOf\"] = this.container.shortId();\n                me.$store.commit('editor/addEditsToUndo', [\n                    {operation: \"addNew\", id: c.shortId()},\n                    {operation: \"update\", id: this.container.shortId(), fieldChanged: [\"skos:hasTopConcept\"], initialValue: [initialValue]}\n                ]);\n                this.container[\"schema:dateModified\"] = new Date().toISOString();\n                c[\"schema:dateModified\"] = new Date().toISOString();\n                if (this.$store.state.editor.private === true) {\n                    c = await EcEncryptedValue.toEncryptedValue(c);\n                    if (EcEncryptedValue.encryptOnSaveMap[me.container.id] !== true) {\n                        me.container = await EcEncryptedValue.toEncryptedValue(me.container);\n                    }\n                }\n\n                try {\n                    await this.repo.multiput([c, me.container]);\n                    me.once = true;\n                } catch (e) {\n                    appError(e);\n                }\n            } else {\n                c[\"skos:broader\"] = [containerId];\n                var parent = await EcConcept.get(containerId);\n                var initialValue = parent[\"skos:narrower\"] ? parent[\"skos:narrower\"].slice() : null;\n                if (!EcArray.isArray(parent[\"skos:narrower\"])) {\n                    parent[\"skos:narrower\"] = [];\n                }\n                if (previousSibling == null || previousSibling === undefined) {\n                    parent[\"skos:narrower\"].push(c.shortId());\n                } else {\n                    // Insert immediately after the sibling\n                    var index = parent[\"skos:narrower\"].indexOf(previousSibling);\n                    parent[\"skos:narrower\"].splice(index + 1, 0, c.shortId());\n                }\n                me.$store.commit('editor/addEditsToUndo', [\n                    {operation: \"addNew\", id: c.shortId()},\n                    {operation: \"update\", id: parent.shortId(), fieldChanged: [\"skos:narrower\"], initialValue: [initialValue]}\n                ]);\n                this.container[\"schema:dateModified\"] = new Date().toISOString();\n                c[\"schema:dateModified\"] = new Date().toISOString();\n                parent[\"schema:dateModified\"] = new Date().toISOString();\n                if (this.$store.state.editor.private === true) {\n                    c = await EcEncryptedValue.toEncryptedValue(c);\n                    if (EcEncryptedValue.encryptOnSaveMap[parent.id] !== true) {\n                        parent = await EcEncryptedValue.toEncryptedValue(parent);\n                    }\n                    if (EcEncryptedValue.encryptOnSaveMap[me.container.id] !== true) {\n                        me.container = await EcEncryptedValue.toEncryptedValue(me.container);\n                    }\n                }\n                try {\n                    await this.repo.multiput([c, parent, me.container]);\n                    me.once = true;\n                } catch (e) {\n                    appError(e);\n                }\n            }\n            this.$store.commit(\"editor/newCompetency\", c.shortId());\n            appLog(\"Added node: \", JSON.parse(c.toJson()));\n        },\n        select: function(objId, checked) {\n            if (checked) {\n                EcArray.setAdd(this.selectedArray, objId);\n            } else {\n                EcArray.setRemove(this.selectedArray, objId);\n            }\n        },\n        onDraggableCheck: function(checked) {\n            this.isDraggable = checked;\n        },\n        cancelImport: function() {\n            this.deleteObject(this.container);\n            this.$store.dispatch('app/clearImport');\n        },\n        openFramework: async function() {\n            var f = await EcConceptScheme.get(this.container.shortId());\n            this.$store.commit('editor/framework', f);\n            this.$router.push({name: \"progressionModel\", params: {frameworkId: this.container.id}});\n        },\n        onClickCreateNew: async function() {\n            let parent = this.container.shortId();\n            if (this.selectedArray.length === 1) {\n                parent = this.selectedArray[0];\n            }\n\n            this.loading = true;\n            try {\n                await this.add(parent, null);\n            } catch (e) {\n                appError(e);\n            }\n            this.loading = false;\n\n            this.addingNode = false;\n        },\n        deleteSelected: async function() {\n            let item = await EcRepository.get(this.selectedArray[0]);\n            this.deleteLevel(item);\n            this.selectedArray.splice(0, this.selectedArray.length);\n        },\n        deleteLevel: function(thing) {\n            appLog(\"deleting \" + thing.id);\n            this.deleteLevelInner(thing);\n            this.framework[\"schema:dateModified\"] = new Date().toISOString();\n            this.$store.commit('editor/selectedCompetency', null);\n        },\n        deleteLevelInner: async function(c) {\n            var me = this;\n            let editsToUndo = [];\n            if (c[\"skos:broader\"] != null) {\n                for (var i = 0; i < c[\"skos:broader\"].length; i++) {\n                    try {\n                        let level = await EcConcept.get(c[\"skos:broader\"][i]);\n                        var initialValue = level[\"skos:narrower\"].slice();\n                        EcArray.setRemove(level[\"skos:narrower\"], c.shortId());\n                        level[\"schema:dateModified\"] = new Date().toISOString();\n                        editsToUndo.push({operation: \"update\", id: level.shortId(), fieldChanged: [\"skos:narrower\"], initialValue: [initialValue]});\n                        if (me.$store.state.editor.private === true && EcEncryptedValue.encryptOnSaveMap[level.id] !== true) {\n                            level = await EcEncryptedValue.toEncryptedValue(level);\n                        }\n                        await repo.saveTo(level);\n                        me.$store.commit('editor/framework', me.framework);\n                    } catch (e) {\n                        appError(e);\n                    }\n                }\n            }\n            if (c[\"skos:narrower\"] != null) {\n                for (var i = 0; i < c[\"skos:narrower\"].length; i++) {\n                    try {\n                        let level = await EcConcept.get(c[\"skos:narrower\"][i]);\n                        me.deleteLevelInner(level);\n                    } catch (e) {\n                        appError(e);\n                    }\n                }\n            }\n            if (c[\"skos:topConceptOf\"] != null) {\n                try {\n                    var initialValue = this.framework[\"skos:hasTopConcept\"].slice();\n                    EcArray.setRemove(this.framework[\"skos:hasTopConcept\"], c.shortId());\n                    editsToUndo.push({operation: \"update\", id: this.framework.shortId(), fieldChanged: [\"skos:hasTopConcept\"], initialValue: [initialValue]});\n                    var framework = this.framework;\n                    framework[\"schema:dateModified\"] = new Date().toISOString();\n                    if (this.$store.state.editor.private === true && EcEncryptedValue.encryptOnSaveMap[framework.id] !== true) {\n                        framework = await EcEncryptedValue.toEncryptedValue(framework);\n                    }\n                    await repo.saveTo(framework);\n                    me.$store.commit('editor/framework', me.framework);\n                } catch (e) {\n                    appError(e);\n                }\n            }\n            this.spitEvent(\"levelDeleted\", c.shortId(), \"editFrameworkPage\");\n            editsToUndo.push({operation: \"delete\", obj: c});\n            repo.deleteRegistered(c, function() {\n                me.$store.commit('editor/framework', me.framework);\n                me.$store.commit('editor/addEditsToUndo', JSON.parse(JSON.stringify(editsToUndo)));\n                editsToUndo.splice(0, editsToUndo.length);\n            }, appError);\n        }\n    }\n};\n</script>\n\n<style lang=\"scss\">\n    @import './../../scss/variables.scss';\n\n\n</style>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ProgressionHierarchy.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ProgressionHierarchy.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ProgressionHierarchy.vue?vue&type=template&id=af1cf648&\"\nimport script from \"./ProgressionHierarchy.vue?vue&type=script&lang=js&\"\nexport * from \"./ProgressionHierarchy.vue?vue&type=script&lang=js&\"\nimport style0 from \"./ProgressionHierarchy.vue?vue&type=style&index=0&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import common from '@/mixins/common.js';\nexport default {\n    mixins: [common],\n    methods: {\n        removeObject: function(thing) {\n            // Remove from container but don't delete\n            appLog(\"removing \" + thing.id);\n            var me = this;\n            var thisFramework = this.$store.getters['editor/framework'];\n            var initialCompetencies = thisFramework.competency ? thisFramework.competency.slice() : null;\n            var initialRelations = thisFramework.relation ? thisFramework.relation.slice() : null;\n            var initialLevels = thisFramework.level ? thisFramework.level.slice() : null;\n            thisFramework[\"schema:dateModified\"] = new Date().toISOString();\n            thisFramework.removeCompetency(thing.shortId(), async function() {\n                var framework = me.framework;\n                me.$store.commit('editor/addEditsToUndo', [{operation: \"update\", id: framework.shortId(), fieldChanged: [\"competency\", \"relation\", \"level\"], initialValue: [initialCompetencies, initialRelations, initialLevels]}]);\n                if (me.$store.state.editor.private === true && EcEncryptedValue.encryptOnSaveMap[f.id] !== true) {\n                    framework = await EcEncryptedValue.toEncryptedValue(framework);\n                }\n                window.repo.saveTo(framework, function() {\n                    me.$store.commit('editor/framework', thisFramework);\n                }, appError);\n            }, appLog);\n        },\n        deleteObject: function(thing) {\n            appLog(\"deleting \" + thing.id);\n            var me = this;\n            var framework = this.$store.getters['editor/framework'];\n            if (thing.shortId() === framework.shortId()) {\n                // delete framework\n                window.repo.deleteRegistered(framework, function(success) {\n                    me.spitEvent(\"frameworkDeleted\", framework.shortId(), \"editFrameworkSection\");\n                    // Delete the framework, delete all non-used stuff.\n                    if (framework.competency != null) {\n                        for (var i = 0; i < framework.competency.length; i++) {\n                            me.conditionalDelete(framework.competency[i]);\n                        }\n                    }\n                    if (framework.relation != null) {\n                        for (var i = 0; i < framework.relation.length; i++) {\n                            me.conditionalDelete(framework.relation[i]);\n                        }\n                    }\n                    if (framework.level != null) {\n                        for (var i = 0; i < framework.level.length; i++) {\n                            me.conditionalDelete(framework.level[i]);\n                        }\n                    }\n                    me.$store.commit('editor/framework', null);\n                    if (me.importType) {\n                        // Calling function from import page\n                        me.$store.commit('app/importFramework', null);\n                    } else {\n                        me.$router.push({name: \"frameworks\"});\n                    }\n                }, appLog);\n            } else {\n                // Delete competency and relations\n                var initialCompetencies = framework.competency ? framework.competency.slice() : null;\n                var initialRelations = framework.relation ? framework.relation.slice() : null;\n                var initialLevels = framework.level ? framework.level.slice() : null;\n                this.$store.commit('editor/selectedCompetency', thing);\n                framework[\"schema:dateModified\"] = new Date().toISOString();\n                framework.removeCompetency(thing.shortId(), async function() {\n                    framework.removeLevel(thing.shortId());\n                    me.$store.commit('editor/addEditsToUndo', [\n                        {operation: \"delete\", obj: thing},\n                        {operation: \"update\", id: framework.shortId(), fieldChanged: [\"competency\", \"relation\", \"level\"], initialValue: [initialCompetencies, initialRelations, initialLevels], changedValue: [framework.competency, framework.relation, framework.level]}\n                    ]);\n                    me.conditionalDelete(thing.shortId());\n                    me.spitEvent(\"competencyDeleted\", thing.shortId(), \"editFrameworkSection\");\n                    me.$store.commit('editor/selectedCompetency', null);\n                    var frameworkToSave = framework;\n                    if (me.$store.state.editor.private === true && EcEncryptedValue.encryptOnSaveMap[framework.id] !== true) {\n                        frameworkToSave = await EcEncryptedValue.toEncryptedValue(framework);\n                    }\n                    window.repo.saveTo(frameworkToSave, function() {\n                        me.$store.commit('editor/framework', framework);\n                    }, appError);\n                }, appLog);\n            }\n        }\n    }\n};"],"sourceRoot":""}